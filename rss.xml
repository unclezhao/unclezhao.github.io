<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Understanding Architecture</title>
        <link>https://zhaoyang.me/</link>
        <description>MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</description>
        <generator>Hugo 0.72.0 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>young.icetea@gmail.com (赵洋)</managingEditor>
        
        
            <webMaster>young.icetea@gmail.com (赵洋)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Fri, 24 Jul 2020 09:43:00 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://zhaoyang.me/rss.xml" />
        
        
            <item>
                <title>设计一个简单的压力测试工具</title>
                <link>https://zhaoyang.me/posts/architecture-training-pressure-test-toy/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/architecture-training-pressure-test-toy/</guid>
                <pubDate>Tue, 14 Jul 2020 10:02:56 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;本篇是架构师训练营的一道作业题，记录一下。&lt;/p&gt;
&lt;h4 id=&#34;0x01-问题&#34;&gt;0x01 问题&lt;/h4&gt;
&lt;p&gt;架构师训练营第七周的作业有一道题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用你熟悉的编程语言写一个&lt;code&gt;Web&lt;/code&gt;性能压测工具，输入参数：&lt;code&gt;URL&lt;/code&gt;，请求总数，并发数。
输出参数：平均响应时间，&lt;code&gt;95%&lt;/code&gt;响应时间。
用这个测试工具以&lt;code&gt;10&lt;/code&gt;并发、&lt;code&gt;100&lt;/code&gt;次请求压测&lt;code&gt;www.baidu.com&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;0x02-分析需求&#34;&gt;0x02 分析需求&lt;/h4&gt;
&lt;p&gt;首先，程序接受压测的参数，命令行工具更合适，所以考虑用命令行工具的方式实现；&lt;/p&gt;
&lt;p&gt;其次，程序需要对参数所指定的&lt;code&gt;URL&lt;/code&gt;按参数指定的并发数和总请求数进行测试，最后还要输出统计指标，这里需要协调并发数和请求数之间的任务处理。&lt;/p&gt;
&lt;p&gt;一个是要保证每轮测试的并发请求数等于并发数，另一个是要保证总的请求数全部处理完成。&lt;/p&gt;
&lt;p&gt;最后就是统计指标结果的计算，要注意计算中途的精度不能掉。&lt;/p&gt;
&lt;h4 id=&#34;0x03-编码实现&#34;&gt;0x03 编码实现&lt;/h4&gt;
&lt;p&gt;首先是&lt;code&gt;Worker&lt;/code&gt;的封装，负责处理压测的并发数和总请求数之间的协调逻辑，以及统计指标的输出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;concurrentNum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;jobsCh&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;resultCh&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewWorker&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;concurrentNum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;:           &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;concurrentNum&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;concurrentNum&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;jobsCh&lt;/span&gt;:        make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;),
		&lt;span style=&#34;color:#a6e22e&#34;&gt;resultCh&lt;/span&gt;:      make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;),
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WorkFunc&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;DoWork&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;BuildWorker&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;wf&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WorkFunc&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;concurrentNum&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doWork&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;wf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jobsCh&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;resultCh&lt;/span&gt;)
		&lt;span style=&#34;color:#75715e&#34;&gt;//fmt.Println(&amp;#34;worker &amp;#34;, i, &amp;#34; initialized&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;BuildJobs&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jobsCh&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}{}
		&lt;span style=&#34;color:#75715e&#34;&gt;//fmt.Println(&amp;#34;add job &amp;#34;, i+1)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;PrintStatistic&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;totalRespTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; int64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;nfpRespTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; int64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;nfpCount&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; int(float64(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.95&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;resultCh&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;totalRespTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nfpCount&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;nfpRespTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;avg response time:\t%.2Fs\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;calcRespTime&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;totalRespTime&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;95%% response time:\t%.2Fs\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;calcRespTime&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nfpRespTime&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nfpCount&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calcRespTime&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;totalNanoTime&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;totalCount&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; float64(&lt;span style=&#34;color:#a6e22e&#34;&gt;totalNanoTime&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;float64(&lt;span style=&#34;color:#a6e22e&#34;&gt;totalCount&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;float64(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000000000&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doWork&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;wf&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WorkFunc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;jobs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;respTimeCh&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jobs&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;respTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DoWork&lt;/span&gt;()
		&lt;span style=&#34;color:#a6e22e&#34;&gt;respTimeCh&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;respTime&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;//fmt.Println(&amp;#34;resp time: &amp;#34;, respTime)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试用例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/magiconair/properties/assert&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mockWorkFunc&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mockWorkFunc&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;DoWork&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestWorker_BuildWorker&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;:           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.example.com&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;concurrentNum&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;jobsCh&lt;/span&gt;:        make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;),
		&lt;span style=&#34;color:#a6e22e&#34;&gt;resultCh&lt;/span&gt;:      make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;),
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Unix&lt;/span&gt;()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BuildWorker&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mockWorkFunc&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;})

	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jobsCh&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}{}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;resultCh&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Equal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestWorker_BuildJobs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;:           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.example.com&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;concurrentNum&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;jobsCh&lt;/span&gt;:        make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;),
		&lt;span style=&#34;color:#a6e22e&#34;&gt;resultCh&lt;/span&gt;:      make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;),
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BuildJobs&lt;/span&gt;()

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jobsCh&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Equal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestWorker_PrintStatistic&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;:           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.example.com&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;concurrentNum&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;jobsCh&lt;/span&gt;:        make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;),
		&lt;span style=&#34;color:#a6e22e&#34;&gt;resultCh&lt;/span&gt;:      make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;),
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Unix&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BuildWorker&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mockWorkFunc&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;})
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BuildJobs&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PrintStatistic&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;worker&lt;/code&gt;对压测的任务通过&lt;code&gt;WorkFunc&lt;/code&gt;接口来隔离，在&lt;code&gt;Golang&lt;/code&gt;中也可以直接传入一个函数（更函数式），这里用接口来隔离再面向对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UrlWorkFun&lt;/code&gt;处理具体的测试任务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urlWorkFunc&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewUrlWorkFunc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;WorkFunc&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;urlWorkFunc&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;urlWorkFunc&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;DoWork&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;UnixNano&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;//time.Sleep(1 * time.Second)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;UnixNano&lt;/span&gt;()

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试用例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/magiconair/properties/assert&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test_DoWork&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;urlWorkFunc&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.baidu.com&amp;#34;&lt;/span&gt;}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;latency&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DoWork&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Equal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;latency&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt;函数处理命令行参数的校验，以及业务逻辑的协调：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/url&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pressure-test-toy/pkg/worker&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; (
	&lt;span style=&#34;color:#a6e22e&#34;&gt;targetURL&lt;/span&gt;     = &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;target URL for pressure test&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;concurrentNum&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Int&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;concurrentNum&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;concurrency number&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;   = &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Int&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;totalReqNum&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;total request number&amp;#34;&lt;/span&gt;)
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;targetURL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Usage&lt;/span&gt;()
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ParseRequestURI&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;targetURL&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;invalid target url: &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;targetURL&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewUrlWorkFunc&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;targetURL&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewWorker&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;targetURL&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;concurrentNum&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;totalReqNum&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BuildWorker&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BuildJobs&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PrintStatistic&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上即为全部的实现代码。&lt;/p&gt;
&lt;h4 id=&#34;0x04-编译&#34;&gt;0x04 编译&lt;/h4&gt;
&lt;p&gt;编写&lt;code&gt;Makefile&lt;/code&gt;以编译代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!make
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# version
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;version &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v0.0.1&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# app name
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;app &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pttoy&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# platform
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;darwin &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;app&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-darwin.&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;version&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.bin
linux &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;app&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-linux.&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;version&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.bin

&lt;span style=&#34;color:#a6e22e&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; darwin

&lt;span style=&#34;color:#a6e22e&#34;&gt;linux&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;

	CGO_ENABLE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux GOARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;amd64 go build -o &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;linux&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; cmd/main.go
	upx &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;linux&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;darwin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;

	CGO_ENABLE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;darwin GOARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;amd64 go build -o &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;darwin&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; cmd/main.go
	upx &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;darwin&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认编译&lt;code&gt;Mac&lt;/code&gt;下的可执行文件，要编译&lt;code&gt;Linux&lt;/code&gt;下的可执行文件使用&lt;code&gt;make linux&lt;/code&gt;即可。&lt;/p&gt;
&lt;h4 id=&#34;0x05-运行&#34;&gt;0x05 运行&lt;/h4&gt;
&lt;p&gt;经过上面的编译会得到可以执行文件：&lt;code&gt;pttoy-darwin.v0.0.1.bin&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;直接运行，或加上&lt;code&gt;-h&lt;/code&gt;参数都会打印出使用帮助。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;➜  pressure-test-toy git:(master) ./pttoy-darwin.v0.0.1.bin
Usage of ./pttoy-darwin.v0.0.1.bin:
  -concurrentNum int
    	concurrency number (default 1)
  -totalReqNum int
    	total request number (default 1)
  -url string
    	target url for pressure test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;url&lt;/code&gt;参数不正确时，会打印使用帮助：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;➜  pressure-test-toy git:(master) ./pttoy-darwin.v0.0.1.bin -url aaa -concurrentNum 1 -totalReqNum 2
invalid target url:  aaa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正确传参时，输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;➜  pressure-test-toy git:(master) ./pttoy-darwin.v0.0.1.bin -url https://www.baidu.com -concurrentNum 10 -totalReqNum 100

avg response time:	0.08s
95% response time:	0.07s

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的输出即为题目要求的以&lt;code&gt;10&lt;/code&gt;个并发，总共&lt;code&gt;100&lt;/code&gt;次请求压测&lt;code&gt;www.baidu.com&lt;/code&gt;的结果。&lt;/p&gt;
&lt;p&gt;全部代码已经上传到了代码仓库，链接在下面。&lt;/p&gt;
&lt;h5 id=&#34;reference&#34;&gt;Reference:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/rooobot/pressure-test-toy.git&#34;&gt;代码仓库&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/design/">design</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/golang/">Golang</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：Dubbo服务暴露与服务消费流程分析</title>
                <link>https://zhaoyang.me/posts/dubbo-export-refer-analysis/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/dubbo-export-refer-analysis/</guid>
                <pubDate>Tue, 07 Jul 2020 08:49:04 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;TL;DR&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dubbo&lt;/code&gt;的服务暴露和服务的引用流程比较复杂，尤其是&lt;code&gt;Dubbo&lt;/code&gt;框架对于扩展点实现了自动包装、自动装配、自适应和自动激活的这些特性，导致我们直接在看源码分析时，会出现很多地方的逻辑不清楚（因为有很多的类是在内存中动态生成的），这里我会把一些动态生成的关键的类的源码贴出来，这样有助于更清晰的理解&lt;code&gt;Dubbo&lt;/code&gt;的服务暴露和和消费的整个过程。&lt;/p&gt;
&lt;p&gt;之所以对服务的暴露和引用的流程做分析，一方面是想更深入的理解&lt;code&gt;Dubbo&lt;/code&gt;框架，另一方便是想结合&lt;code&gt;Dubbo&lt;/code&gt;的这些扩展点，研究一下&lt;code&gt;Dubbo&lt;/code&gt;的微内核加插件机制的架构，学架构不就得理解别人的思想吗？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dubbo&lt;/code&gt;官方把服务的暴露叫做导出，把服务的消费叫作引用，下面也会使用这两个词语来代替。&lt;/p&gt;
&lt;p&gt;本文大纲：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Dubbo&lt;/code&gt;的配置覆盖策略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dubbo&lt;/code&gt;框架分层&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dubbo&lt;/code&gt;服务的导出分析&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dubbo&lt;/code&gt;服务的引用分析&lt;/li&gt;
&lt;li&gt;微内核加插件的设计模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下正文开始。&lt;/p&gt;
&lt;h4 id=&#34;0x01-dubbo的配置覆盖策略&#34;&gt;0x01 &lt;code&gt;Dubbo&lt;/code&gt;的配置覆盖策略&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Dubbo&lt;/code&gt;对配置参数的处理分两种情况，一种是启动时期的参数处理，这时会有一组默认的参数覆盖策略；另一种是运行期，这里会有另一组默认的参数覆盖策略。&lt;/p&gt;
&lt;p&gt;先看启动时期&lt;code&gt;Dubbo&lt;/code&gt;的参数配置覆盖策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;-D&lt;/code&gt;传递给&lt;code&gt;JVM&lt;/code&gt;的参数优先级最高，比如&lt;code&gt;-Ddubbo.protocol.port=20882&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;代码（基于注解）或&lt;code&gt;XML&lt;/code&gt;配置优先级次之，比如在&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;XML&lt;/code&gt;文件中指定&lt;code&gt;&amp;lt;dubbo:protocol port=&amp;quot;20881&amp;quot;/&amp;gt;&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;配置文件优先级最低，比如&lt;code&gt;dubbo.properties&lt;/code&gt;文件指定&lt;code&gt;dubbo.protocol.port=20880&lt;/code&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般我们考虑使用&lt;code&gt;dubbo.properties&lt;/code&gt;作为默认配置。&lt;/p&gt;
&lt;p&gt;再看运行期，一句话总结&lt;code&gt;Dubbo&lt;/code&gt;的运行期配置覆盖策略：&lt;code&gt;override &amp;gt; -D &amp;gt; Consumer &amp;gt; Provider&lt;/code&gt;（具体参考&lt;code&gt;RegistryDirectory#mergeUrl()&lt;/code&gt;的源码）。&lt;/p&gt;
&lt;p&gt;这个是&lt;code&gt;Dubbo&lt;/code&gt;内部对配置的默认处理优先级，&lt;code&gt;override&lt;/code&gt;最高，这个是通过&lt;code&gt;override://xxx&lt;/code&gt;协议来操作的，主要是用来在&lt;code&gt;dubbo-admin&lt;/code&gt;中对服务的参数进行调整，也可以理解为动态服务治理时使用该协议来对参数进行动态的调整。&lt;/p&gt;
&lt;p&gt;其次是&lt;code&gt;-D&lt;/code&gt;传递给&lt;code&gt;JVM&lt;/code&gt;的参数，这个不难理解，因为启动时&lt;code&gt;-D&lt;/code&gt;是优先级最高的，确切的说，这里应该是对启动完成时最终确定的参数。&lt;/p&gt;
&lt;p&gt;再次就是&lt;code&gt;Consumer&lt;/code&gt;的参数了，最后是&lt;code&gt;Provider&lt;/code&gt;的参数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dubbo&lt;/code&gt;会按照这些规则对参数进行覆盖处理。&lt;/p&gt;
&lt;h4 id=&#34;0x02-dubbo框架分层&#34;&gt;0x02 &lt;code&gt;Dubbo&lt;/code&gt;框架分层&lt;/h4&gt;
&lt;p&gt;众所周知，&lt;code&gt;Dubbo&lt;/code&gt;是分层良好的框架，乍一看上去挺复杂的，实际上也确实是挺复杂的，不过理解了&lt;code&gt;Dubbo&lt;/code&gt;服务的导出和引用过程之后，你就不会再觉得这个分层复杂了。以下是&lt;code&gt;Dubbo&lt;/code&gt;框架的分层，内容来自于&lt;code&gt;Dubbo&lt;/code&gt;的文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config&lt;/code&gt;配置层：对外配置接口，以&lt;code&gt;ServiceConfig&lt;/code&gt;、&lt;code&gt;ReferenceConfig&lt;/code&gt;为中心，可以直接初始化配置类，也可能通过&lt;code&gt;Spring&lt;/code&gt;解析配置生成配置类；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proxy&lt;/code&gt;服务代理层：服务接口透明代理，生成服务的客户端&lt;code&gt;Stub&lt;/code&gt;和服务端&lt;code&gt;Skeleton&lt;/code&gt;，以&lt;code&gt;ServiceProxy&lt;/code&gt;为中心，扩展接口为&lt;code&gt;ProxyFactory&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;registry&lt;/code&gt;注册中心层：封装服务地址的注册与发现，以服务&lt;code&gt;URL&lt;/code&gt;为中心，扩展接口为&lt;code&gt;RegistryFactory&lt;/code&gt;、&lt;code&gt;Registry&lt;/code&gt;、&lt;code&gt;RegistryService&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cluster&lt;/code&gt;路由层：封装多个提供者的路由及负载均衡，并桥接注册中心，以&lt;code&gt;Invoker&lt;/code&gt;为中心，扩展接口为&lt;code&gt;Cluster&lt;/code&gt;、&lt;code&gt;Directory&lt;/code&gt;、&lt;code&gt;Router&lt;/code&gt;、&lt;code&gt;LoadBalance&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monitor&lt;/code&gt;监控层：&lt;code&gt;RPC&lt;/code&gt;调用次数和调用时间监控，以&lt;code&gt;Statistics&lt;/code&gt;为中心， 扩展接口为&lt;code&gt;MonitoryFactory&lt;/code&gt;、&lt;code&gt;Monitor&lt;/code&gt;，&lt;code&gt;MonitorService&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protocol&lt;/code&gt;远程调用层：封装&lt;code&gt;RPC&lt;/code&gt;调用，以&lt;code&gt;Invocation&lt;/code&gt;、&lt;code&gt;Result&lt;/code&gt;为中心，扩展接口为&lt;code&gt;Protocol&lt;/code&gt;、&lt;code&gt;Invoker&lt;/code&gt;、&lt;code&gt;Exporter&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exchange&lt;/code&gt;信息交换层：封装请求响应模式，同步转异步，以&lt;code&gt;Request&lt;/code&gt;、&lt;code&gt;Response&lt;/code&gt;为中心，扩展接口为&lt;code&gt;Exchanger&lt;/code&gt;、&lt;code&gt;ExchangeChannel&lt;/code&gt;、&lt;code&gt;ExchangeClient&lt;/code&gt;、&lt;code&gt;ExchangeServer&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transport&lt;/code&gt;网络传输层：抽象&lt;code&gt;mina&lt;/code&gt;和&lt;code&gt;netty&lt;/code&gt;为统一接口，以&lt;code&gt;Message&lt;/code&gt;为中心，扩展接口为&lt;code&gt;Channel&lt;/code&gt;、&lt;code&gt;Transporter&lt;/code&gt;、&lt;code&gt;Client&lt;/code&gt;、&lt;code&gt;Server&lt;/code&gt;、&lt;code&gt;Codec&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serialize&lt;/code&gt;数据序列化层：可复用的一些工具，扩展接口为&lt;code&gt;Serialization&lt;/code&gt;、&lt;code&gt;ObjectInput&lt;/code&gt;、&lt;code&gt;ObjectOutput&lt;/code&gt;、&lt;code&gt;ThreadPool&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关系说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;RPC&lt;/code&gt;中，&lt;code&gt;Protocol&lt;/code&gt;是核心层，也就是只要有&lt;code&gt;Protocol + Invoker + Exporter&lt;/code&gt;就可以完成非透明的&lt;code&gt;RPC&lt;/code&gt;调用，然后在&lt;code&gt;Invoker&lt;/code&gt;的主过程上&lt;code&gt;Filter&lt;/code&gt;拦截点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cluster&lt;/code&gt;是外围概念，所以&lt;code&gt;Cluster&lt;/code&gt;的目的是将多个&lt;code&gt;Invoker&lt;/code&gt;伪装成一个&lt;code&gt;Invoker&lt;/code&gt;，这样其它人只要关注&lt;code&gt;Protocol&lt;/code&gt;层的&lt;code&gt;Invoker&lt;/code&gt;即可；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proxy&lt;/code&gt;层封装了所有接口的透明化代理，而在其它层都以&lt;code&gt;Invoker&lt;/code&gt;为中心，只有到了暴露给用户使用时，才用&lt;code&gt;Proxy&lt;/code&gt;将&lt;code&gt;Invoker&lt;/code&gt;转成接口，或将接口实现转成&lt;code&gt;Invoker&lt;/code&gt;，也就是去掉&lt;code&gt;Proxy&lt;/code&gt;层&lt;code&gt;RPC&lt;/code&gt;也是可以运行的，只是不那么透明，看起来不像调用本地服务一样调远程服务；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Remoting&lt;/code&gt;实现是&lt;code&gt;Dubbo&lt;/code&gt;协议的实现，如果选择&lt;code&gt;RMI&lt;/code&gt;协议，整个&lt;code&gt;Remoting&lt;/code&gt;层都不会用上；&lt;code&gt;Remoting&lt;/code&gt;内部再划分为&lt;code&gt;Transport&lt;/code&gt;传输层和&lt;code&gt;Exchange&lt;/code&gt;信息交换层，&lt;code&gt;Transport&lt;/code&gt;层只负责单向消息传输，是对&lt;code&gt;Mina&lt;/code&gt;、&lt;code&gt;Netty&lt;/code&gt;、&lt;code&gt;Grizzly&lt;/code&gt;的抽象，它也可以扩展&lt;code&gt;UDP&lt;/code&gt;传输，而&lt;code&gt;Exchange&lt;/code&gt;层是在传输层之上封装了&lt;code&gt;Request-Response&lt;/code&gt;语义；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Registry&lt;/code&gt;和&lt;code&gt;Monitor&lt;/code&gt;实际上不算一层，而是一个独立的节点，只是为了全局概览，用层的方式画在一起；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;0x03-dubbo服务的导出分析&#34;&gt;0x03 &lt;code&gt;Dubbo&lt;/code&gt;服务的导出分析&lt;/h4&gt;
&lt;p&gt;这里以之前&lt;code&gt;SPI&lt;/code&gt;篇中写的示例来分析吧，&lt;code&gt;EchoProvider&lt;/code&gt;的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EchoProvider&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        ServiceConfig&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;EchoServiceImpl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ServiceConfig&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setInterface&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EchoService&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setRef&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EchoServiceImpl&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setApplication&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ApplicationConfig&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo-provider&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setRegistry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegistryConfig&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setSerialization&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;protostuff&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;export&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dubbo service started&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CountDownLatch&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ServiceConfig&lt;/code&gt;类是&lt;code&gt;API&lt;/code&gt;类型的，也就是说它是用来给使用者使用的。我们先创建了一个&lt;code&gt;ServiceConfig&lt;/code&gt;对象，然后进行服务相关的配置，接着调用了&lt;code&gt;service.export()&lt;/code&gt;方法来对服务进行导出，这个方法就是&lt;code&gt;Dubbo&lt;/code&gt;服务导出的入口。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ServiceConfig&lt;/code&gt;会准备环境所需的&lt;code&gt;config&lt;/code&gt;（检查用户配置，生成默认设置），并检查所需的环境配置，比如&lt;code&gt;ApplicationConfig&lt;/code&gt;、&lt;code&gt;ModuleConfig&lt;/code&gt;、&lt;code&gt;RegistryConfig&lt;/code&gt;、&lt;code&gt;MonitorConfig&lt;/code&gt;、&lt;code&gt;ProtocolConfig&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ServiceConfig&lt;/code&gt;初始化时会加载&lt;code&gt;Protocol.class&lt;/code&gt;和&lt;code&gt;ProxyFactory.class&lt;/code&gt;两个扩展点的自适应扩展，也就是说，实际上，这两个扩展加载时返回的是两个在内存动态生成的&lt;code&gt;Apaptive&lt;/code&gt;对象：&lt;code&gt;Protocol$Adaptive&lt;/code&gt;和&lt;code&gt;ProxyFactory$Adaptive&lt;/code&gt;，具体的过程在之前的&lt;code&gt;SPI&lt;/code&gt;篇中详细的分析过&lt;code&gt;dubbo&lt;/code&gt;的扩展加载特性；这两个对象一定要清楚，否则，后面的过程很多代码无法关联上；动态生成的这两个&lt;code&gt;Adaptive&lt;/code&gt;类其实是一个包装类，它们的职责很简单，会根据&lt;code&gt;url&lt;/code&gt;的参数动态的返回对应的扩展实现。下面是两个自适应类的代码：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Protocol$Adaptive&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.alibaba.dubbo.rpc&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.URL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.extension.ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.rpc.Exporter&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.rpc.Invoker&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.rpc.Protocol&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.rpc.RpcException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Protocol$Adaptive&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Protocol &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Invoker &lt;span style=&#34;color:#a6e22e&#34;&gt;refer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Class class_&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; URL uRL&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; RpcException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String string&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        URL uRL2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        String string2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProtocol&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProtocol&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) use keys([protocol])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        Protocol protocol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Protocol&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; protocol&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;refer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;class_&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Exporter &lt;span style=&#34;color:#a6e22e&#34;&gt;export&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Invoker invoker&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; RpcException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String string&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invoker &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.alibaba.dubbo.rpc.Invoker argument == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invoker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.alibaba.dubbo.rpc.Invoker argument getUrl() == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        URL uRL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; invoker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        String string2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProtocol&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProtocol&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) use keys([protocol])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        Protocol protocol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Protocol&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; protocol&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;export&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invoker&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;destroy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getDefaultPort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ProxyFactory$Adaptive&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.alibaba.dubbo.rpc&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.URL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.extension.ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.rpc.Invoker&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.rpc.ProxyFactory&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.rpc.RpcException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProxyFactory$Adaptive&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; ProxyFactory &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#a6e22e&#34;&gt;getProxy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Invoker invoker&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; RpcException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invoker &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.alibaba.dubbo.rpc.Invoker argument == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invoker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.alibaba.dubbo.rpc.Invoker argument getUrl() == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        URL uRL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; invoker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        String string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proxy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javassist&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) use keys([proxy])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        ProxyFactory proxyFactory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ProxyFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; proxyFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProxy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invoker&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#a6e22e&#34;&gt;getProxy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Invoker invoker&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; bl&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; RpcException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invoker &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.alibaba.dubbo.rpc.Invoker argument == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invoker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.alibaba.dubbo.rpc.Invoker argument getUrl() == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        URL uRL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; invoker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        String string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proxy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javassist&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) use keys([proxy])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        ProxyFactory proxyFactory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ProxyFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; proxyFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProxy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invoker&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; bl&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Invoker &lt;span style=&#34;color:#a6e22e&#34;&gt;getInvoker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Object object&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Class class_&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; URL uRL&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; RpcException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        URL uRL2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        String string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proxy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javassist&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) use keys([proxy])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        ProxyFactory proxyFactory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ProxyFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; proxyFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInvoker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;object&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; class_&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其实，在&lt;code&gt;Dubbo&lt;/code&gt;的源码中可以看到有一些&lt;code&gt;@Adaptive&lt;/code&gt;标注的类，但是不多，这些类的结构非常相似，可能是&lt;code&gt;Dubbo&lt;/code&gt;的开发者后续发现了这些相似性，所以采用了自适应方式的设计来直接在内存中动态的生成，这样避免了大量重复结构的代码。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export()&lt;/code&gt;方法简单的处理后，直接调用了&lt;code&gt;doExport()&lt;/code&gt;方法，&lt;code&gt;doExport()&lt;/code&gt;方法做了大量的参数校验和初始化，然后调用&lt;code&gt;doExportUrls()&lt;/code&gt;方法开始对服务做导出。&lt;/p&gt;
&lt;p&gt;首先，它会加载注册中心：&lt;code&gt;loadRegistries(true)&lt;/code&gt;。先解析配置的注册中心（可以是多个）到&lt;code&gt;AbstractInterfaceConfig#registries&lt;/code&gt;列表中，然后循环&lt;code&gt;registries&lt;/code&gt;列表，根据配置的参数来组装注册链接&lt;code&gt;URL&lt;/code&gt;列表（&lt;code&gt;dubbo&lt;/code&gt;的配置信息封装为&lt;code&gt;URL&lt;/code&gt;对象）。&lt;/p&gt;
&lt;p&gt;加载注册中心时会动态生成&lt;code&gt;RegistryFactory&lt;/code&gt;扩展点的自适应对象，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.alibaba.dubbo.registry&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.URL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.extension.ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.registry.Registry&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.registry.RegistryFactory&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RegistryFactory$Adaptive&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; RegistryFactory &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Registry &lt;span style=&#34;color:#a6e22e&#34;&gt;getRegistry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;URL uRL&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String string&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        URL uRL2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        String string2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProtocol&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProtocol&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) use keys([protocol])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        RegistryFactory registryFactory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RegistryFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; registryFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRegistry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，循环&lt;code&gt;ServiceConfig#protocols&lt;/code&gt;列表，为配置的&lt;code&gt;protocol&lt;/code&gt;组装配置&lt;code&gt;URL&lt;/code&gt;并导出服务，在正式&lt;code&gt;export&lt;/code&gt;前会组装参数&lt;code&gt;map&lt;/code&gt;，同时会解析&lt;code&gt;MethodConfig&lt;/code&gt;及&lt;code&gt;ArgumentConfig&lt;/code&gt;的配置信息，处理完配置信息，接下来就是真正的&lt;code&gt;export&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export&lt;/code&gt;分为本地导出和远程导出，由参数&lt;code&gt;scope&lt;/code&gt;（&lt;code&gt;scope&lt;/code&gt;的值有&lt;code&gt;none&lt;/code&gt;、&lt;code&gt;local&lt;/code&gt;、&lt;code&gt;remote&lt;/code&gt;三种）决定，没有指定为&lt;code&gt;remote&lt;/code&gt;时会做本地导出，没有指定为&lt;code&gt;local&lt;/code&gt;时会做&lt;code&gt;local&lt;/code&gt;导出，如果指定为&lt;code&gt;none&lt;/code&gt;，则不做导出；本地导出，使用的是&lt;code&gt;InJvmProtocol#export&lt;/code&gt;来导出（需要注意的是，&lt;code&gt;protocol&lt;/code&gt;扩展对象是在&lt;code&gt;ServiceConfig&lt;/code&gt;初始化时，这个加载的过程在之前的&lt;code&gt;SPI&lt;/code&gt;篇中已经分析过，这里要注意的是&lt;code&gt;protocol&lt;/code&gt;扩展对象会被&lt;code&gt;Wrapper&lt;/code&gt;实现包装，并且，在不同的地方还会根据&lt;code&gt;url#protocol&lt;/code&gt;参数的变化来动态的加载不同的&lt;code&gt;Protocol.class&lt;/code&gt;的扩展实现）；接下来就是远程导出了，远程导出时会对每个配置的&lt;code&gt;protocol&lt;/code&gt;去循环前面生成的&lt;code&gt;registryURLs&lt;/code&gt;列表，也就是说会远程导出到所有配置的注册中心，这里也要注意，在这里会检查配置的&lt;code&gt;proxy&lt;/code&gt;参数，根据配置参数的值加载对应的&lt;code&gt;ProxyFactory.class&lt;/code&gt;扩展实现来生成服务的代理对象&lt;code&gt;Invoker.class&lt;/code&gt;，&lt;code&gt;Invoker&lt;/code&gt;对象是服务的核心（我们暂时不关注具体的细节，后面专门来分析&lt;code&gt;Invoker&lt;/code&gt;的核心逻辑），这里要留意在&lt;code&gt;proxyFactory#getInvoker()&lt;/code&gt;时，&lt;code&gt;registryURL&lt;/code&gt;将具体服务的&lt;code&gt;URL&lt;/code&gt;（&lt;code&gt;dubbo://xxxx&lt;/code&gt;开头的&lt;code&gt;URL&lt;/code&gt;参数）作为&lt;code&gt;export&lt;/code&gt;参数加入到了&lt;code&gt;registryURL&lt;/code&gt;中，同时，默认使用&lt;code&gt;JavassistProxyFactory&lt;/code&gt;扩展实现，返回的结果是通过&lt;code&gt;Wrapper&lt;/code&gt;类动态生成的一个包装类&lt;code&gt;Wrapper0&lt;/code&gt;；另外，这里循环时的&lt;code&gt;URL&lt;/code&gt;是&lt;code&gt;registry&lt;/code&gt;协议的&lt;code&gt;URL&lt;/code&gt;，所以被&lt;code&gt;Protocol$Adaptive#export&lt;/code&gt;处理时，真正做&lt;code&gt;protocol#export&lt;/code&gt;的是&lt;code&gt;RegistryProtocol#export&lt;/code&gt;，该方法先调用了&lt;code&gt;RegistryProtocol#doLocalExport()&lt;/code&gt;，&lt;code&gt;doLocalExport()&lt;/code&gt;方法中在第一次时又会通过&lt;code&gt;protocol#export()&lt;/code&gt;来做真正的服务导出，这里传入的&lt;code&gt;Invoker&lt;/code&gt;对象是一个委托类型的&lt;code&gt;InvokerDelegete&lt;/code&gt;对象，该对象在构造方法中会传入服务参数的&lt;code&gt;URL&lt;/code&gt;，也就是前面&lt;code&gt;registryURL&lt;/code&gt;中的&lt;code&gt;export&lt;/code&gt;参数，因为默认服务使用的是&lt;code&gt;dubbo&lt;/code&gt;协议，这里的&lt;code&gt;protocol&lt;/code&gt;对象是从&lt;code&gt;ServiceConfig&lt;/code&gt;传入的，是同一个对象，所以又会调用&lt;code&gt;Protocol$Adaptive#export()&lt;/code&gt;方法进行包装处理，而这时的协议为&lt;code&gt;dubbo&lt;/code&gt;，所以里面真正做&lt;code&gt;export&lt;/code&gt;的&lt;code&gt;protocol&lt;/code&gt;实现就是&lt;code&gt;DubboProtocol&lt;/code&gt;的实现了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Wrapper#getWrapper()&lt;/code&gt;返回的包装类对象是一个动态拼接，然后在内存中使用&lt;code&gt;javassist&lt;/code&gt;编译后再实例化的对象，具体的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.alibaba.dubbo.common.bytecode&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.bytecode.ClassGenerator&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.bytecode.NoSuchMethodException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.bytecode.NoSuchPropertyException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.bytecode.Wrapper&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.lang.reflect.InvocationTargetException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Map&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; me.zy.std.dubbo.spi.api.EchoService&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Wrapper0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Wrapper
&lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; ClassGenerator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DC&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; pns&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Map pts&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; mns&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; dmns&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Class&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; mts0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getPropertyNames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pns&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hasProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String string&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;containsKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Class &lt;span style=&#34;color:#a6e22e&#34;&gt;getPropertyType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String string&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Class&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;pts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getMethodNames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mns&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getDeclaredMethodNames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dmns&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setPropertyValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Object object&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String string&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object object2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            EchoService echoService &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EchoService&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;object&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Throwable throwable&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;throwable&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NoSuchPropertyException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Not found property \&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34; filed or setter method in class me.zy.std.dubbo.spi.api.EchoService.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#a6e22e&#34;&gt;getPropertyValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Object object&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String string&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            EchoService echoService &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EchoService&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;object&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Throwable throwable&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;throwable&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NoSuchPropertyException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Not found property \&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34; filed or setter method in class me.zy.std.dubbo.spi.api.EchoService.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#a6e22e&#34;&gt;invokeMethod&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Object object&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String string&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Class&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arrclass&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arrobject&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; InvocationTargetException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        EchoService echoService&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            echoService &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EchoService&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;object&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Throwable throwable&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;throwable&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; arrclass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; echoService&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;arrobject&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Throwable throwable&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InvocationTargetException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;throwable&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NoSuchMethodException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Not found method \&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34; in class me.zy.std.dubbo.spi.api.EchoService.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体到&lt;code&gt;DubboProtocol&lt;/code&gt;协议中导出时，首先会根据服务的参数&lt;code&gt;URL&lt;/code&gt;生成服务的唯一标识&lt;code&gt;serviceKey(url)&lt;/code&gt;，然后就是&lt;code&gt;openServer(url)&lt;/code&gt;了，第一次会创建&lt;code&gt;ExchangeServer&lt;/code&gt;对象，这里会加载&lt;code&gt;Transporter.class&lt;/code&gt;扩展实现，默认使用&lt;code&gt;netty&lt;/code&gt;实现，&lt;code&gt;ExchangeServer&lt;/code&gt;对象是通过&lt;code&gt;Exchangers.bind(url, requestHandler)&lt;/code&gt;方法来生成的，在这个&lt;code&gt;bind()&lt;/code&gt;方法中，会根据&lt;code&gt;URL&lt;/code&gt;的&lt;code&gt;exchanger&lt;/code&gt;参数来加载&lt;code&gt;Exchanger.class&lt;/code&gt;的扩展实现，默认使用&lt;code&gt;HeaderExchanger&lt;/code&gt;的实现，然后调用&lt;code&gt;HeaderExchanger#bind()&lt;/code&gt;方法来返回&lt;code&gt;HeaderExchangeServer&lt;/code&gt;的&lt;code&gt;ExchangeServer&lt;/code&gt;实现，这里又会调用&lt;code&gt;Transporters.bind()&lt;/code&gt;来真正的创建&lt;code&gt;Server&lt;/code&gt;对象，这里通过自适应的方式来加载&lt;code&gt;Transporter.class&lt;/code&gt;扩展实现，默认是&lt;code&gt;netty&lt;/code&gt;实现&lt;code&gt;NettyTransporter&lt;/code&gt;，在&lt;code&gt;NettyTransporter#bind()&lt;/code&gt;方法中，返回了&lt;code&gt;Server&lt;/code&gt;的实现&lt;code&gt;NettyServer&lt;/code&gt;对象，这样就创建好&lt;code&gt;Server&lt;/code&gt;了。在&lt;code&gt;Exchangers#bind()&lt;/code&gt;方法创建&lt;code&gt;Server&lt;/code&gt;对象时，一同传入的还有一个&lt;code&gt;ExchangeHandler&lt;/code&gt;对象参数，该参数是一个抽象类&lt;code&gt;ExchangeHandlerAdapter&lt;/code&gt;的实现，该&lt;code&gt;handler&lt;/code&gt;在&lt;code&gt;HeaderExchanger&lt;/code&gt;中传入&lt;code&gt;Transporters.bind()&lt;/code&gt;方法之前会分别被&lt;code&gt;HeaderExchangeHandler&lt;/code&gt;和&lt;code&gt;DecodeHandler&lt;/code&gt;进行包装，然后在&lt;code&gt;Transporters.bind()&lt;/code&gt;中进一步被包装为&lt;code&gt;ChannelHandlerDispatcher&lt;/code&gt;，接着传给了&lt;code&gt;NettyServer&lt;/code&gt;，在&lt;code&gt;NettyServer&lt;/code&gt;中，又被&lt;code&gt;ChannelHandlers#wrapInternal()&lt;/code&gt;方法分别用&lt;code&gt;HeartbeatHandler&lt;/code&gt;和&lt;code&gt;MultiMessageHandler&lt;/code&gt;进行包装，在这里又会通过自适应的方式加载&lt;code&gt;Dispatcher.class&lt;/code&gt;扩展实现，这又是一个动态生成的自适应包装类&lt;code&gt;Dispatcher$Adaptive&lt;/code&gt;，该自适应类会动态的根据&lt;code&gt;URL&lt;/code&gt;中的&lt;code&gt;dispatcher&lt;/code&gt;参数来动态的调用对应的&lt;code&gt;Dispather&lt;/code&gt;的扩展实现来做&lt;code&gt;dispatch()&lt;/code&gt;操作，默认使用&lt;code&gt;AllDispatcher&lt;/code&gt;的实现，这里会再一次用&lt;code&gt;AllChannelHandler&lt;/code&gt;来对前面传入的&lt;code&gt;handler&lt;/code&gt;进行包装。在前面的步骤中，生成&lt;code&gt;NettyServer&lt;/code&gt;对象时，在&lt;code&gt;NettyServer&lt;/code&gt;的构造方法中调用了父类的构造方法，也就是&lt;code&gt;AbstractServer&lt;/code&gt;的构造方法，这个构造方法回调了子类的&lt;code&gt;doOpen()&lt;/code&gt;方法，也就是&lt;code&gt;NettyServer#doOpen()&lt;/code&gt;方法，这里就正式的启动了&lt;code&gt;Netty&lt;/code&gt;服务器。&lt;code&gt;Netty&lt;/code&gt;服务器会绑定&lt;code&gt;Codec2&lt;/code&gt;扩展实现，默认使用&lt;code&gt;telnet&lt;/code&gt;实现，但&lt;code&gt;DubbpProtocol&lt;/code&gt;中指定了&lt;code&gt;codec&lt;/code&gt;为&lt;code&gt;dubbo&lt;/code&gt;，所以这里会加载&lt;code&gt;DubboCountCodec&lt;/code&gt;的实现，在&lt;code&gt;Netty&lt;/code&gt;服务器中，&lt;code&gt;codec&lt;/code&gt;被封装到&lt;code&gt;NettyCodecAdapter&lt;/code&gt;适配器对象中，同时，该对象实现了&lt;code&gt;Netty&lt;/code&gt;的编码和解码器&lt;code&gt;handler&lt;/code&gt;，编解码器通过回调&lt;code&gt;Codec2&lt;/code&gt;中的&lt;code&gt;encode()&lt;/code&gt;和&lt;code&gt;decode()&lt;/code&gt;方法来做编解码处理，&lt;code&gt;DubboCountCodec&lt;/code&gt;又调用&lt;code&gt;DubboCodec&lt;/code&gt;的实现，&lt;code&gt;DubboCodec&lt;/code&gt;中会加载&lt;code&gt;Serialization.class&lt;/code&gt;扩展实现来进行不同协议的编解码操作，解码是在&lt;code&gt;ExchangeCodec#decodeBody()&lt;/code&gt;方法中，调用&lt;code&gt;CodecSupport.deserialize()&lt;/code&gt;方法时动态加载&lt;code&gt;Serialization.class&lt;/code&gt;的扩展实现的。&lt;/p&gt;
&lt;p&gt;上面的&lt;code&gt;Transporter&lt;/code&gt;扩展点动态生成的自适应类，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.alibaba.dubbo.remoting&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.URL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.extension.ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.remoting.ChannelHandler&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.remoting.Client&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.remoting.RemotingException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.remoting.Server&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.remoting.Transporter&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Transporter$Adaptive&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Transporter &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Server &lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;URL uRL&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ChannelHandler channelHandler&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; RemotingException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        URL uRL2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        String string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;transporter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;netty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) use keys([server, transporter])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        Transporter transporter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Transporter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; transporter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; channelHandler&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Client &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;URL uRL&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ChannelHandler channelHandler&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; RemotingException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        URL uRL2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        String string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;transporter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;netty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) use keys([client, transporter])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        Transporter transporter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Transporter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; transporter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; channelHandler&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Dispatcher&lt;/code&gt;扩展点的自适应类，这里可以注意一下获取多个配置参数的处理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.alibaba.dubbo.remoting&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.URL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.extension.ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.remoting.ChannelHandler&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.remoting.Dispatcher&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dispatcher$Adaptive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Dispatcher &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ChannelHandler &lt;span style=&#34;color:#a6e22e&#34;&gt;dispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ChannelHandler channelHandler&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; URL uRL&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        URL uRL2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        String string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dispatcher&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dispather&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channel.handler&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)));&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) use keys([dispatcher, dispather, channel.handler])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        Dispatcher dispatcher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Dispatcher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dispatcher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;channelHandler&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;DubboProtocol#export()&lt;/code&gt;完成后会回到&lt;code&gt;RegistryProtocol#export()&lt;/code&gt;方法中继续服务的注册流程，&lt;code&gt;RegistryProtocol#getRegistry()&lt;/code&gt;方法会根据&lt;code&gt;registryUrl&lt;/code&gt;的&lt;code&gt;registry&lt;/code&gt;参数传入的值来动态加载&lt;code&gt;Registry&lt;/code&gt;的扩展实现，这里是通过&lt;code&gt;RegistryFactory&lt;/code&gt;的扩展实现来创建&lt;code&gt;Registry&lt;/code&gt;对象的，&lt;code&gt;RegistryFactory&lt;/code&gt;是&lt;code&gt;RegistryProtocol&lt;/code&gt;扩展在实例化阶段通过&lt;code&gt;ExtensionLoader#injectExtension()&lt;/code&gt;方法注入的一个动态的自适应扩展包装类&lt;code&gt;RegistryFactory$Adaptive&lt;/code&gt;，该类会根据传入的&lt;code&gt;registryUrl&lt;/code&gt;对象的&lt;code&gt;protocol&lt;/code&gt;参数来动态加载&lt;code&gt;Registry&lt;/code&gt;的扩展实现，创建&lt;code&gt;Registry&lt;/code&gt;对象后，会生成&lt;code&gt;registeredProviderUrl&lt;/code&gt;对象，这是服务提供者的参数&lt;code&gt;URL&lt;/code&gt;对象，然后&lt;code&gt;ProviderConsumerRegTable#registerProvider()&lt;/code&gt;方法会将&lt;code&gt;Invoker&lt;/code&gt;、&lt;code&gt;registryUrl&lt;/code&gt;及&lt;code&gt;providerUrl&lt;/code&gt;对象包装为&lt;code&gt;ProviderInvokerWrapper&lt;/code&gt;对象，并缓存在本地，然后调用前面创建的&lt;code&gt;Registry&lt;/code&gt;对象实例来做注册操作，我们这里使用的是&lt;code&gt;zookeeper&lt;/code&gt;，所以此时会调用&lt;code&gt;ZookeeperRegistry#doRegister()&lt;/code&gt;方法来注册要导出的服务，本质上就是在&lt;code&gt;ZooKeeper&lt;/code&gt;上创建路径节点，&lt;code&gt;ZookeeperRegistry&lt;/code&gt;在实例化时，会动态获取&lt;code&gt;ZookeeperTransporter&lt;/code&gt;的扩展实现，默认为&lt;code&gt;curator&lt;/code&gt;的实现，&lt;code&gt;ZookeeperTransporter&lt;/code&gt;的创建同样也是通过自适应的方式生成自适应的包装类&lt;code&gt;ZookeeperTransporter$Adaptive&lt;/code&gt;，然后通过&lt;code&gt;client&lt;/code&gt;参数和&lt;code&gt;transporter&lt;/code&gt;参数来动态加载&lt;code&gt;ZookeeperTransporter&lt;/code&gt;的实现。注册成功后会将&lt;code&gt;ProviderConsumerRegTable&lt;/code&gt;中对应的&lt;code&gt;ProviderInvokerWrapper&lt;/code&gt;包装类的&lt;code&gt;isReg&lt;/code&gt;设置为&lt;code&gt;true&lt;/code&gt;。随后，还创建了&lt;code&gt;OverrideListener&lt;/code&gt;监听器来监听服务的重载，通过&lt;code&gt;ZookeeperRegistry&lt;/code&gt;在&lt;code&gt;ZooKeeper&lt;/code&gt;上创建节点来订阅服务端服务的变更通知，这样，当服务端发布的服务发生变更时，服务端通过&lt;code&gt;ZooKeeper&lt;/code&gt;上注册的对应的客户端列表来通知服务的变更，此时&lt;code&gt;CuratorZookeeperClient&lt;/code&gt;会接收到&lt;code&gt;WatchedEvent&lt;/code&gt;事件，然后回调注册的&lt;code&gt;OverrideListener#notify()&lt;/code&gt;方法，该方法又回调用&lt;code&gt;RegistryProtocol#doChangeLocalExport()&lt;/code&gt;方法，&lt;code&gt;doChangeLocalExport()&lt;/code&gt;方法会重新用&lt;code&gt;newInvokerUrl&lt;/code&gt;参数来重新注册变更的服务。这样，整个服务注册的流程基本上完全清晰了。&lt;/p&gt;
&lt;p&gt;下面的图片是&lt;code&gt;Dubbo&lt;/code&gt;服务导出的时序图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/15952963921582.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;0x04-dubbo服务的引用分析&#34;&gt;0x04 &lt;code&gt;Dubbo&lt;/code&gt;服务的引用分析&lt;/h4&gt;
&lt;p&gt;这里还是以&lt;code&gt;SPI&lt;/code&gt;篇中的示例来来分析：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EchoConsumer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        ReferenceConfig&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;EchoService&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; reference &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ReferenceConfig&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        reference&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setApplication&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ApplicationConfig&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo-service&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        reference&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setRegistry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegistryConfig&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        reference&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setInterface&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EchoService&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        EchoService service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reference&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        String message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;message&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CountDownLatch&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Dubbo&lt;/code&gt;的服务引用逻辑与导出大致相似，首先也是通过&lt;code&gt;ReferenceConfig&lt;/code&gt;来配置服务引用的各种参数，如&lt;code&gt;application config&lt;/code&gt;、&lt;code&gt;module config&lt;/code&gt;、&lt;code&gt;consumer config&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ReferenceConfig#init()&lt;/code&gt;初始化各种参数，然后调用&lt;code&gt;createProxy()&lt;/code&gt;方法来创建代理对象，重点就在这个&lt;code&gt;createProxy()&lt;/code&gt;方法中了。&lt;/p&gt;
&lt;p&gt;首先，它会判断调用的方式，这里有三种情况：同一&lt;code&gt;JVM&lt;/code&gt;内调用、通过指定的&lt;code&gt;url&lt;/code&gt;直连、通过注册中心调用。无论是哪种方式，最终都是返回一个&lt;code&gt;Invoker&lt;/code&gt;对象出来（&lt;code&gt;Invoker&lt;/code&gt;是&lt;code&gt;Dubbo&lt;/code&gt;的核心领域对象）。三种方式的入口都是&lt;code&gt;Protocol$Adaptive#refer()&lt;/code&gt;方法，这是一个动态生成的自适应类，&lt;code&gt;refer()&lt;/code&gt;方法会根据&lt;code&gt;URL&lt;/code&gt;的&lt;code&gt;protocol&lt;/code&gt;参数来动态加载&lt;code&gt;Protocol&lt;/code&gt;的扩展实现，默认是&lt;code&gt;dubbo&lt;/code&gt;的实现，通过注册中心调用时，首先会加载&lt;code&gt;RegistryProtocol&lt;/code&gt;的实现，这里会获取注册中心的实例&lt;code&gt;Registry&lt;/code&gt;，然后调用&lt;code&gt;doRefer()&lt;/code&gt;方法继续执行&lt;code&gt;refer&lt;/code&gt;的逻辑，&lt;code&gt;doRefer()&lt;/code&gt;方法中，首先会创建&lt;code&gt;RegistryDirectory&lt;/code&gt;实例，然后绑定&lt;code&gt;registry&lt;/code&gt;和&lt;code&gt;protocol&lt;/code&gt;，组装&lt;code&gt;subscribeUrl&lt;/code&gt;，接着会向注册中心注册&lt;code&gt;registry.register(registeredConsumerUrl)&lt;/code&gt;，注册的&lt;code&gt;URL&lt;/code&gt;也会绑定到&lt;code&gt;directory&lt;/code&gt;，再接下来会调用&lt;code&gt;directory.subscribe()&lt;/code&gt;方法来订阅&lt;code&gt;providers&lt;/code&gt;、&lt;code&gt;configurators&lt;/code&gt;、&lt;code&gt;routers&lt;/code&gt;的数据，这里的&lt;code&gt;subscribe()&lt;/code&gt;方法调用进去会调用到&lt;code&gt;FailbackRegistry#subscribe()&lt;/code&gt;方法，然后会回调到子类&lt;code&gt;ZookeeperRegistry#doSubscribe()&lt;/code&gt;方法，这里的逻辑和服务的导出类似，创建&lt;code&gt;zookeeper&lt;/code&gt;的路径节点，然后调用&lt;code&gt;notify()&lt;/code&gt;方法来通知监听器，&lt;code&gt;notify()&lt;/code&gt;方法又会调回父类，然后进一步调回&lt;code&gt;AbstractRegistry#notify()&lt;/code&gt;方法，再继续调回到&lt;code&gt;RegistryDirectory#notify()&lt;/code&gt;方法，在这里，会调用&lt;code&gt;refreshInvoker()&lt;/code&gt;方法刷新&lt;code&gt;invoker&lt;/code&gt;，进入到该方法中后，如果有提供者的&lt;code&gt;invokerUrl&lt;/code&gt;，则会调用&lt;code&gt;toInvokers()&lt;/code&gt;方法来进行转换操作，这里的转换是将&lt;code&gt;invokerUrl&lt;/code&gt;转换为具体的&lt;code&gt;invoker&lt;/code&gt;对象，这里会动态加载&lt;code&gt;Protocol&lt;/code&gt;的自适应对象，返回的是自适应对象&lt;code&gt;Protocol$Adaptive&lt;/code&gt;，它会根据&lt;code&gt;protocol&lt;/code&gt;参数来动态的返回具体的&lt;code&gt;Protocol&lt;/code&gt;实现，默认是&lt;code&gt;dubbo&lt;/code&gt;，也就是会返回&lt;code&gt;DubboProtocol&lt;/code&gt;实现，然后会有一个参数合并的过程，这里有根据默认的覆盖规则（&lt;code&gt;override &amp;gt; -D &amp;gt;Consumer &amp;gt; Provider&lt;/code&gt;）进行一些处理，然后再进一步做判断，之后会创建一个&lt;code&gt;InvokerDelegate&lt;/code&gt;对象，该对象的构造方法中的其中一个参数就是&lt;code&gt;DubboProtocol#refer()&lt;/code&gt;的返回值，到这里，服务引用的调用就到了&lt;code&gt;DubboProtocol#refer()&lt;/code&gt;方法，这里返回的是&lt;code&gt;DubboInvoker&lt;/code&gt;的包装对象，包装之前，会调用&lt;code&gt;getClients()&lt;/code&gt;方法来创建&lt;code&gt;ExchangeClient&lt;/code&gt;对象，这里面会判断是否共享连接，然后首次还会调用&lt;code&gt;initClient()&lt;/code&gt;方法来创建新的连接，&lt;code&gt;initClient()&lt;/code&gt;方法中会绑定&lt;code&gt;client&lt;/code&gt;参数（默认为&lt;code&gt;netty&lt;/code&gt;），&lt;code&gt;codec&lt;/code&gt;参数（默认为&lt;code&gt;dubbo&lt;/code&gt;），&lt;code&gt;heartbeat&lt;/code&gt;参数（默认为&lt;code&gt;60000&lt;/code&gt;），然后会生成&lt;code&gt;Transporter$Adaptive&lt;/code&gt;对象根据参数&lt;code&gt;client&lt;/code&gt;动态的加载&lt;code&gt;Transporter&lt;/code&gt;扩展，真正的连接是在&lt;code&gt;Exchangers#connect()&lt;/code&gt;方法中，先获取&lt;code&gt;Exchanger&lt;/code&gt;的扩展实现，然后再进行&lt;code&gt;connect()&lt;/code&gt;，这里的逻辑和前面服务导出部分的&lt;code&gt;bind()&lt;/code&gt;的逻辑非常相似，只不过一个是&lt;code&gt;bind()&lt;/code&gt;方法，一个是&lt;code&gt;connect()&lt;/code&gt;方法，经过一系列的包装，最终会创建&lt;code&gt;NettyClient&lt;/code&gt;对象，然后经过层层的包装后返回，到这里，&lt;code&gt;invoker&lt;/code&gt;对象还没包装完，这里只是处理完了&lt;code&gt;directory#subscribe()&lt;/code&gt;的逻辑，&lt;code&gt;subscribe()&lt;/code&gt;完成后，还会进一步使用&lt;code&gt;Cluster&lt;/code&gt;扩展进行包装，&lt;code&gt;Cluster$Adaptive&lt;/code&gt;自适应类会根据&lt;code&gt;cluster&lt;/code&gt;参数来动态加载具体的扩展实现，默认为&lt;code&gt;failover&lt;/code&gt;的实现，&lt;code&gt;Cluster&lt;/code&gt;扩展在加载时，也有一个&lt;code&gt;Wrapper&lt;/code&gt;会自动包装，它就是&lt;code&gt;MockClusterWrapper&lt;/code&gt;，这里会包装成一个&lt;code&gt;MockClusterInvoker&lt;/code&gt;返回（包装了服务降级的处理），里面才是调用&lt;code&gt;FailoverCluster#join()&lt;/code&gt;，这里又会包装成一个&lt;code&gt;FailoverClusterInvoker&lt;/code&gt;对象（包装了负载均衡的处理，即&lt;code&gt;LoadBalance&lt;/code&gt;扩展，以及失败重试的处理，默认最多调用三次），到这里，服务引用时的&lt;code&gt;invoker&lt;/code&gt;对象才算是真正的创建完成了。有了&lt;code&gt;invoker&lt;/code&gt;对象之后，还会调用&lt;code&gt;ProviderConsumerRegTable#registerConsumer()&lt;/code&gt;方法来将服务消费者注册到本地。有了&lt;code&gt;invoker&lt;/code&gt;对象，下一步就回到了&lt;code&gt;ReferenceConfig#createProxy()&lt;/code&gt;方法，这里还有最后一步，使用&lt;code&gt;ProxyFactory#getProxy()&lt;/code&gt;来获取代理对象，&lt;code&gt;ProxyFactory$Adaptive#getProxy()&lt;/code&gt;方法会根据&lt;code&gt;proxy&lt;/code&gt;参数动态的加载具体的扩展实现，默认是&lt;code&gt;javassist&lt;/code&gt;的实现，这里又回到前面分析过的&lt;code&gt;JavassistProxyFactory#getProxy()&lt;/code&gt;方法的调用了，它会返回包装好的代理对象。&lt;/p&gt;
&lt;p&gt;一些相关的扩展点的自适应类的代码与服务导出时生成的是一样的，参考上面贴的代码就行了。&lt;/p&gt;
&lt;p&gt;下面的图片是&lt;code&gt;Dubbo&lt;/code&gt;服务引用的时序图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/15953077811809.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;0x05-微内核加插件式的架构&#34;&gt;0x05 微内核加插件式的架构&lt;/h4&gt;
&lt;p&gt;到这里，服务的导出和服务的引用流程就分析完了，其实这里面还有很多的细节，比如，根据&lt;code&gt;URL&lt;/code&gt;的参数做一些动态的处理逻辑，光是内置的参数就已经很多了，而且很多的参数都是支持一些不同的策略的，所以这里面的一些处理逻辑很多。另外，无论是服务的导出，还是服务的引用，最后真正调用的都是一个代理对象，这个代理对象是对&lt;code&gt;Invoker&lt;/code&gt;对象的包装，这里面还包括了过滤器链的加载和处理，以及到具体的&lt;code&gt;Transporter&lt;/code&gt;实现时的各种&lt;code&gt;Handler&lt;/code&gt;的层层包装，整个逻辑比较复杂，&lt;code&gt;Invoker&lt;/code&gt;是&lt;code&gt;Dubbo&lt;/code&gt;框架的核心领域对象，这个后面会专门分析。&lt;/p&gt;
&lt;p&gt;再回过头来看&lt;code&gt;Dubbo&lt;/code&gt;服务的导出和引用的时序图，我用绿色标出了&lt;code&gt;Dubbo&lt;/code&gt;的扩展点，你会发现，使用&lt;code&gt;Dubbo&lt;/code&gt;框架时，除了环境配置使用的是相关的&lt;code&gt;API&lt;/code&gt;对象之后，其它的流程全部是基于扩展点之前的调用，换句话说就是，&lt;code&gt;Dubbo&lt;/code&gt;真正的服务导出和服务引用全部是基于抽象（这些抽象全部都是&lt;code&gt;Dubbo&lt;/code&gt;框架的扩展点，可以随时自由扩展）的实现，这就是框架的高层设计，在这一点上，&lt;code&gt;Dubbo&lt;/code&gt;框架封装得非常漂亮，完全基于抽象之间的调用来组装框架的处理流程，而真正的逻辑处理则是通过插件（这里抽象的具体实现）的方式来实现的，在使用的过程中，按照自己的需要去配置好要使用的具体实现即可，就算你不配置，&lt;code&gt;Dubbo&lt;/code&gt;也会提供默认的实现，对使用者友好。&lt;code&gt;Dubbo&lt;/code&gt;这里基于扩展点的抽象设计组装主流程，具体实现交给插件实现的模式就是现在非常流行的微内核加插件的模式（&lt;code&gt;microkernel + plugin&lt;/code&gt;），对于我们开发一个框架，非常具有借鉴的意义。&lt;/p&gt;
&lt;h4 id=&#34;0x06-总结&#34;&gt;0x06 总结&lt;/h4&gt;
&lt;p&gt;对于&lt;code&gt;Dubbo&lt;/code&gt;的服务导出和引用的过程分析，我这里没有贴出&lt;code&gt;Dubbo&lt;/code&gt;具体步骤的相关代码，一方面是贴出来代码太多了，另一方面，我已经把详细的调用链写出来了，看的时候只需要对照我上面说的入口和相关的方法调用的过程就已经很清晰了。&lt;/p&gt;
&lt;p&gt;分析&lt;code&gt;Dubbo&lt;/code&gt;服务导出时，因为很多的控制类是在内存中动态处理的，还有一些是在内存中拼接源码字符串，然后在内存中编译，再反射创建对象的（比如&lt;code&gt;Wrapper#getWrapper()&lt;/code&gt;），对于这些类的源码看不到的时候，心里会有一种莫名的不踏实感，好在后来找到了阿里开源的&lt;a href=&#34;https://github.com/alibaba/arthas&#34;&gt;&lt;code&gt;Arthas&lt;/code&gt;&lt;/a&gt;框架，通过&lt;code&gt;arthas&lt;/code&gt;可以动态的查找&lt;code&gt;JVM&lt;/code&gt;中生成的类、反编译这些类的源码、实时监控方法的返回值等，功能非常强大，太感谢阿里团队了。&lt;/p&gt;
&lt;p&gt;也正是因为这些动态生成的类不太清楚的原因，所以在分析服务导出的时候浪费了一些时间，不过找到了解决办法之后，一切都变得简单轻快了。&lt;/p&gt;
&lt;p&gt;其实那些&lt;code&gt;Xxxx$Adaptive&lt;/code&gt;自适应类生成出来的模式非常相似，本质上就是配置&lt;code&gt;URL&lt;/code&gt;中的参数值来动态加载不同的扩展实现，没看到源码的时候心里总不踏实，看多了之后基本上也就不用看了。&lt;/p&gt;
&lt;p&gt;尤其是&lt;code&gt;Wrapper#getWrapper()&lt;/code&gt;那里，开始我是去拼出来的，后来还去看了&lt;code&gt;javassist&lt;/code&gt;的文档（不看文档没办法理解里面的一些特殊符号的意义），基本上把&lt;code&gt;Wrapper0&lt;/code&gt;的源码分析出来了，但是因为对&lt;code&gt;javassist&lt;/code&gt;不是特别熟悉，心里老纠结会不会没拼对，后来使用&lt;code&gt;arthas&lt;/code&gt;反编译之后发现拼对了，这才踏实了。&lt;/p&gt;
&lt;p&gt;分析完导出和引用的流程后，对照&lt;code&gt;Dubbo&lt;/code&gt;文档画了一次这两个操作的时序图，然后顺序把扩展点用绿色标识了出来，现在你再回过头去看两张时序图，你会发现除了&lt;code&gt;Dubbo&lt;/code&gt;暴露给用户配置用的&lt;code&gt;API&lt;/code&gt;（&lt;code&gt;Config&lt;/code&gt;相关的对象）之外，其它的流程全部是通过扩展点来处理的，也就是说，&lt;code&gt;Dubbo&lt;/code&gt;通过抽象的扩展点来封装了框架的主流程，但具体的处理逻辑交给了扩展点的具体实现，这些实现可以是&lt;code&gt;Dubbo&lt;/code&gt;自己实现的，也可以是任何第三方实现的，这样就使得&lt;code&gt;Dubbo&lt;/code&gt;框架具有了非常良好的可扩展性。&lt;/p&gt;
&lt;p&gt;此外，&lt;code&gt;Dubbo&lt;/code&gt;框架的源码中还使用了非常多的设计模式来解决不同的问题，比如代理模式、装饰模式、委托模式、过滤器链模式、模板方法模式等等，非常的多，这些东西都值得我们去分析学习。&lt;/p&gt;
&lt;p&gt;到这里，&lt;code&gt;Dubbo&lt;/code&gt;框架的一些大致的流程和机制都分析清楚了，剩下还有&lt;code&gt;Proxy&lt;/code&gt;和&lt;code&gt;Invoker&lt;/code&gt;相关的核心领域对象没有完整的分析（其实在分析导出的时候，我没按捺住，追着代码已经分析了一部分了），后续会对这个核心域进行分析。&lt;/p&gt;
&lt;p&gt;好了，这篇就到此为止了，欢迎各种反馈和交流！&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://dubbo.apache.org/&#34;&gt;Dubbo&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/alibaba/arthas&#34;&gt;Arthas&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/unclezhao/architecture-std&#34;&gt;示例代码仓库&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/framework/">framework</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/dubbo/">Dubbo</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>动态密码TOTP</title>
                <link>https://zhaoyang.me/posts/totp-algorithm/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/totp-algorithm/</guid>
                <pubDate>Mon, 06 Jul 2020 11:46:30 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;昨天碰到一个有意思的事情，做了一道题，然后提交的时候需要根据定义好的共享密钥的规则来生成一个&lt;code&gt;TOTP&lt;/code&gt;动态密码，服务端会对不同的人提交的时候生成的动态密码做校验，于是就学习了一下&lt;code&gt;TOTP&lt;/code&gt;算法，并基于&lt;code&gt;Golang&lt;/code&gt;和&lt;code&gt;Java&lt;/code&gt;作出了相应的实现。&lt;/p&gt;
&lt;p&gt;生成的这个&lt;code&gt;TOTP&lt;/code&gt;动态密码要求是&lt;code&gt;10&lt;/code&gt;位的长度，如果只是直接网上搬别人写的代码基本无用，所以就有了这一篇。&lt;/p&gt;
&lt;h4 id=&#34;hotp与totp算法&#34;&gt;&lt;code&gt;HOTP&lt;/code&gt;与&lt;code&gt;TOTP&lt;/code&gt;算法&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;TOTP&lt;/code&gt;是一种基于时间的一次性密码算法，它根据预共享的密钥和当前时间计算一次性密码。该算法已经被互联网任务工作组接纳为&lt;code&gt;RFC 6238&lt;/code&gt;标准，成为主动开放认证（&lt;code&gt;OAUTH&lt;/code&gt;）的基础。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TOTP&lt;/code&gt;基于&lt;code&gt;HOTP&lt;/code&gt;（&lt;code&gt;RFC 4226&lt;/code&gt;），它使用一个时间戳来代替&lt;code&gt;HOTP&lt;/code&gt;中的计数器（即&lt;code&gt;HOTP&lt;/code&gt;算法中的&lt;code&gt;C&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HOTP&lt;/code&gt;的算法公式如下：&lt;/p&gt;
&lt;p&gt;$$HOTP(K,C) = Truncate(HMAC-SHA-1(K,C))$$&lt;/p&gt;
&lt;p&gt;主要有两个输入：一个是共享密钥&lt;code&gt;K&lt;/code&gt;，另一个是计数器&lt;code&gt;C&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;K&lt;/code&gt;：共享密钥，要求每个&lt;code&gt;HOTP&lt;/code&gt;的生成器都必须是唯一的；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt;：计数器，是一个&lt;code&gt;8-byte&lt;/code&gt;的值，计数器需要在服务端和客户端之间同步以保持一致；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;HOTP&lt;/code&gt;算法基于一个动态变化的计数器值和一个静态不变的密钥，使用&lt;code&gt;HMAC-SHA-1&lt;/code&gt;是散列算法（&lt;code&gt;RFC 2104&lt;/code&gt;）来生成&lt;code&gt;HOTP&lt;/code&gt;值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HMAC-SHA-1&lt;/code&gt;的输出是&lt;code&gt;160&lt;/code&gt;个字节的，所以最终用户使用的值是在此基于上基于一定规则进行截断处理之后的值。&lt;/p&gt;
&lt;p&gt;具体的截断处理分为三步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成散列值：&lt;code&gt;HS = HMAC-SHA-1(K,C)&lt;/code&gt;，这里的&lt;code&gt;HS&lt;/code&gt;为散列算法计算出来的原始值，是一个&lt;code&gt;20-byte&lt;/code&gt;的字符串；&lt;/li&gt;
&lt;li&gt;动态截取（&lt;code&gt;DT&lt;/code&gt;）生成一个&lt;code&gt;4-byte&lt;/code&gt;的字符串；&lt;/li&gt;
&lt;li&gt;计算&lt;code&gt;HOTP&lt;/code&gt;值并返回：将第二步的字符串转换为十进制的整数，然后对&lt;code&gt;10^Digit&lt;/code&gt;取模，返回结果；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;动态截取（&lt;code&gt;DT&lt;/code&gt;）的算法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    DT(String) // String = String[0]...String[19]
     Let OffsetBits be the low-order 4 bits of String[19]
     Offset = StToNum(OffsetBits) // 0 &amp;lt;= OffSet &amp;lt;= 15
     Let P = String[OffSet]...String[OffSet+3]
     Return the Last 31 bits of P
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实际上就是首先取&lt;code&gt;HS&lt;/code&gt;的最后一个字节的低四位，然后将它转成十进制数字，并以它作为偏移值（&lt;code&gt;offset&lt;/code&gt;值的大小为&lt;code&gt;0 &amp;lt;= offset &amp;lt;= 15&lt;/code&gt;），以得到的&lt;code&gt;offset&lt;/code&gt;为起始下标，从&lt;code&gt;HS&lt;/code&gt;中取四个字节（从&lt;code&gt;HS[offset]&lt;/code&gt;到&lt;code&gt;HS[offset+3]&lt;/code&gt;，定义为&lt;code&gt;P&lt;/code&gt;），然后返回&lt;code&gt;P&lt;/code&gt;的最后&lt;code&gt;31&lt;/code&gt;个字节。&lt;/p&gt;
&lt;p&gt;取模操作时的&lt;code&gt;Digit&lt;/code&gt;至少要是&lt;code&gt;6&lt;/code&gt;位的长度，长度大于等于&lt;code&gt;7&lt;/code&gt;位时要考虑生成更长的&lt;code&gt;HOTP&lt;/code&gt;值。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;Digit = 6&lt;/code&gt;时计算&lt;code&gt;HOTP&lt;/code&gt;的示例：&lt;/p&gt;
&lt;p&gt;这里的&lt;code&gt;hmac_result&lt;/code&gt;是&lt;code&gt;HMAC-SHA-1&lt;/code&gt;的结果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        int offset   =  hmac_result[19] &amp;amp; 0xf ;
        int bin_code = (hmac_result[offset]  &amp;amp; 0x7f) &amp;lt;&amp;lt; 24
           | (hmac_result[offset+1] &amp;amp; 0xff) &amp;lt;&amp;lt; 16
           | (hmac_result[offset+2] &amp;amp; 0xff) &amp;lt;&amp;lt;  8
           | (hmac_result[offset+3] &amp;amp; 0xff) ;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里是示例的散列值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   -------------------------------------------------------------
   | Byte Number                                               |
   -------------------------------------------------------------
   |00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|
   -------------------------------------------------------------
   | Byte Value                                                |
   -------------------------------------------------------------
   |1f|86|98|69|0e|02|ca|16|61|85|50|ef|7f|19|da|8e|94|5b|55|5a|
   -------------------------------***********----------------++|
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;最后的字节（即第&lt;code&gt;19&lt;/code&gt;字节）的值为&lt;code&gt;0x5a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;该值的低四位的值为&lt;code&gt;0xa&lt;/code&gt;（也就是偏移量的值&lt;code&gt;offset&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;偏移量的十进制值为&lt;code&gt;10&lt;/code&gt;（&lt;code&gt;0xa&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;以偏移量为起始下标取四个节点，即&lt;code&gt;0x50ef7f19&lt;/code&gt;，该值作为&lt;code&gt;DBC1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;MSB&lt;/code&gt; of &lt;code&gt;DBC1&lt;/code&gt; is &lt;code&gt;0x50&lt;/code&gt; so &lt;code&gt;DBC2 = DBC1 = 0x50ef7f19&lt;/code&gt;（这句没读懂&lt;code&gt;:(&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HOTP = DBC2 mod 10^6 = 872921&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的&lt;code&gt;DBC&lt;/code&gt;是取的&lt;code&gt;31&lt;/code&gt;位、无符合、大端序整数，它的首字节用&lt;code&gt;0x7f&lt;/code&gt;屏蔽掉了，最后得到的&lt;code&gt;HOTP&lt;/code&gt;值为：&lt;code&gt;872921&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HOTP&lt;/code&gt;的算法流程图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15943726590019.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TOTP&lt;/code&gt;引入了一个时间步长（&lt;code&gt;time step&lt;/code&gt;）的概念，它是基于一个时间戳减去一个起始计数值，然后除以步长得到的值来作为&lt;code&gt;HOTP&lt;/code&gt;中的计数器&lt;code&gt;C&lt;/code&gt;，并且，&lt;code&gt;TOTP&lt;/code&gt;的实现可以使用&lt;code&gt;HMAC-SHA-256&lt;/code&gt;或&lt;code&gt;HMAC-SHA-512&lt;/code&gt;散列算法来代替&lt;code&gt;HOTP&lt;/code&gt;中的&lt;code&gt;HMAC-SHA-1&lt;/code&gt;算法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TOTP&lt;/code&gt;的计算公式如下：&lt;/p&gt;
&lt;p&gt;$$TOTP = HOTP(K, T)$$&lt;/p&gt;
&lt;p&gt;这里用&lt;code&gt;T&lt;/code&gt;作为&lt;code&gt;HOTP&lt;/code&gt;的计数器，&lt;code&gt;T&lt;/code&gt;的计算公式为：&lt;code&gt;T = (Current Unix time - T0) / X&lt;/code&gt;，这里的&lt;code&gt;T0&lt;/code&gt;为起始计数值，默认为&lt;code&gt;0&lt;/code&gt;，这里的&lt;code&gt;X&lt;/code&gt;为时间步长，默认为&lt;code&gt;30&lt;/code&gt;，也就是说每个生成的密码的默认有效时间为&lt;code&gt;30&lt;/code&gt;秒。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TOTP&lt;/code&gt;的算法流程图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15943726823121.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;动手实现totp&#34;&gt;动手实现&lt;code&gt;TOTP&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;不多说，直接&lt;code&gt;PO&lt;/code&gt;代码。&lt;/p&gt;
&lt;p&gt;首先是&lt;code&gt;Golang&lt;/code&gt;的实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gtotp&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crypto/hmac&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crypto/sha512&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hash&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;math&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Totp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// the K, also the shared secret
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;cfg&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;TotpAlgorithmCfg&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// totp algorithm config parameters
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;hasher&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Hasher&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// Hmac hash function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TotpAlgorithmCfg&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;rtnDigitSize&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// the return digit value length
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// the T0, default is 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;timeStep&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// the X, default is 30
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Hasher&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;HashName&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// hash digit name
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Digest&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Hash&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// hash function, default is sha512
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#75715e&#34;&gt;// NewDefaultTotp return Totp reference using default config parameters.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewDefaultTotp&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sharedSecret&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Totp&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Totp&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;sharedSecret&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cfg&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;TotpAlgorithmCfg&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;rtnDigitSize&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt;:           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;timeStep&lt;/span&gt;:     &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,
		},
		&lt;span style=&#34;color:#a6e22e&#34;&gt;hasher&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Hasher&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;HashName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sha512&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Digest&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;sha512&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;,
		},
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Now return the digit value by current timestamp.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Totp&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;At&lt;/span&gt;(int(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Unix&lt;/span&gt;()))
}

&lt;span style=&#34;color:#75715e&#34;&gt;// At return the gigit value with the timestamp parameter.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Totp&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;At&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;currentSteps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;steps&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;byteSecret&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;secretHash&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hmac&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Digest&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;byteSecret&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;bSteps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Itob&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;currentSteps&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;secretHash&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bSteps&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;hmacHash&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;secretHash&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sum&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;hmacHash&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;hmacHash&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; ((int(&lt;span style=&#34;color:#a6e22e&#34;&gt;hmacHash&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) |
		((int(&lt;span style=&#34;color:#a6e22e&#34;&gt;hmacHash&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) |
		((int(&lt;span style=&#34;color:#a6e22e&#34;&gt;hmacHash&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) |
		(int(&lt;span style=&#34;color:#a6e22e&#34;&gt;hmacHash&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pow10&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;cfg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;rtnDigitSize&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%%0%dd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;cfg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;rtnDigitSize&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// calculate the steps of timestamp.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Totp&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;steps&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; int((&lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;cfg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;cfg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;timeStep&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// integer to byte array
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Itob&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;integer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;byteArr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;byteArr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;integer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;integer&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;integer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;byteArr&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试用例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gtotp&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/magiconair/properties/assert&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestTotp_At&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;totp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewDefaultTotp&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ninja@example.comHENNGECHALLENGE003&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1594352095&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;digitVal&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;totp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;At&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Equal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0517636551&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;digitVal&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是基于&lt;code&gt;Java&lt;/code&gt;的实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; javax.crypto.Mac&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; javax.crypto.spec.SecretKeySpec&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.lang.reflect.UndeclaredThrowableException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.nio.ByteBuffer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.nio.charset.StandardCharsets&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.security.GeneralSecurityException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author zhaoyang on 2020-07-10.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Totp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; DIGITS_POWER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        1L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;10L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;100L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;1000L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;10000L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;100000L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;1000000L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;10000000L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;100000000L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;1000000000L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;10000000000L
    &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; timeStep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 30L&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; t0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0L&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; rtnDigitSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 10L&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String hmacShaName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HmacSHA512&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Totp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;30L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 10L&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HmacSHA512&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Totp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; timeStep&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; t0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; rtnDigitSize&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String hmacShaName&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;timeStep&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; timeStep&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rtnDigitSize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rtnDigitSize&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hmacShaName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hmacShaName&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;genTotp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String secret&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
        StringBuilder result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; steps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;time &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;timeStep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; secretBytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; secret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;StandardCharsets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UTF_8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getHmacSha&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hmacShaName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; secretBytes&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; longToBytes&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;steps&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// put selected bytes into result int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;hash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0xf&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;hash&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;offset&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0x7f&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; 24&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;hash&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;offset &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0xff&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; 16&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;hash&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;offset &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0xff&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; 8&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hash&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;offset &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0xff&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;code &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; DIGITS_POWER&lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rtnDigitSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]);&lt;/span&gt;

        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuilder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;code&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rtnDigitSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;longToBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        ByteBuffer buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ByteBuffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;allocate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BYTES&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        buffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;putLong&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; buffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getHmacSha&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String crypto&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; secretBytes&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; msgBytes&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            Mac hmac &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mac&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;crypto&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            SecretKeySpec macKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SecretKeySpec&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;secretBytes&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RAW&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            hmac&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;macKey&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; hmac&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;doFinal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msgBytes&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GeneralSecurityException gse&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UndeclaredThrowableException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gse&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Totp totp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Totp&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;totp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;genTotp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ninja@example.comHENNGECHALLENGE003&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1594352095&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两种实现计算的结果是相同的。&lt;/p&gt;
&lt;h4 id=&#34;总结&#34;&gt;总结&lt;/h4&gt;
&lt;p&gt;其实认真的把&lt;code&gt;RFC&lt;/code&gt;的算法过程看过一遍，看懂之后，这个算法的实现还是蛮简单的，一些比较难搞的位运算的代码都已经直接在协议中给出来了，只要注意一下大于&lt;code&gt;8&lt;/code&gt;位的长度时&lt;code&gt;Java&lt;/code&gt;中需要修改为&lt;code&gt;long&lt;/code&gt;类型来处理就行了。&lt;/p&gt;
&lt;p&gt;这个过程中间，在使用&lt;code&gt;Golang&lt;/code&gt;实现时，发现了一些没留意的有趣的事情，&lt;code&gt;Golang&lt;/code&gt;中&lt;code&gt;time.Unix()&lt;/code&gt;方法返回的毫秒值永远是&lt;code&gt;UTC&lt;/code&gt;时区的，不管你在输出之前设置的是什么时区，想想，这样其实也蛮好的，至少轻松的把大家的标准给统一了，再也不怕时区不对导致毫秒值的时间问题了。&lt;/p&gt;
&lt;p&gt;另外，一定要抽时间看一下&lt;code&gt;Golang&lt;/code&gt;中时间的模版设计的源码，据说设计很巧妙。&lt;/p&gt;
&lt;p&gt;声明：上面的两张图片引用自&lt;code&gt;HOTP和TOTP算法图解&lt;/code&gt;，链接在末尾。&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Time-based_One-time_Password_algorithm&#34;&gt;Time based one time password algorithm&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6238#section-4.1&#34;&gt;RFC 6238&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4226#section-5&#34;&gt;RFC 4226&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.jianshu.com/p/a7b900e8e50a&#34;&gt;HOTP和TOTP算法图解&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/rooobot/gotopt&#34;&gt;gotopt github repo&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/protocol/">protocol</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/golang/">Golang</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/totp/">TOTP</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/algorithm/">algorithm</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：接口隔离原则</title>
                <link>https://zhaoyang.me/posts/architecture-from-source-code-ood-isp/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/architecture-from-source-code-ood-isp/</guid>
                <pubDate>Sun, 05 Jul 2020 16:50:14 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;接口隔离原则（&lt;code&gt;ISP&lt;/code&gt;）： 不应该强迫客户依赖于它们不用的方法。&lt;/p&gt;
&lt;p&gt;这个原则用来拆分庞大臃肿的接口成为更小的和更具体的接口，这样使用者将会只需要知道他们感兴趣的方法。这种缩小的接口也被称为&lt;strong&gt;角色接口&lt;/strong&gt;。&lt;code&gt;ISP&lt;/code&gt;承认存在有一些对象，它们确实不需要内聚的接口，但是&lt;code&gt;ISP&lt;/code&gt;建议不应该把它们作为一个单一的类存在，相反，使用者看到的应该是多个具有内聚接口的抽象基类。&lt;/p&gt;
&lt;p&gt;接口隔离原则的目的是让系统解耦，从而更容易重构、更改和重新部署。&lt;/p&gt;
&lt;p&gt;考虑一个安全系统，在这个系统中，有一些&lt;code&gt;Door&lt;/code&gt;对象，可以被加锁和解锁，并且&lt;code&gt;Door&lt;/code&gt;对象知道自己是开着还是关着。现在，考虑一个这样的实现，&lt;code&gt;TimedDoor&lt;/code&gt;，如果门开着的时间过长，它就会发出警报声。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Door&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isDoorOpen&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果一个对象希望得到超时通知，它可以调用&lt;code&gt;Timer&lt;/code&gt;的&lt;code&gt;register&lt;/code&gt;函数。该函数有两个参数，一个是超时时间，另一个是指向&lt;code&gt;TimerClient&lt;/code&gt;对象的引用，该对象的&lt;code&gt;timeout&lt;/code&gt;函数会在超时到达时被调用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Timer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; timeout&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; TimerClient client&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TimerClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如何将&lt;code&gt;TimerClient&lt;/code&gt;类和&lt;code&gt;TimedDoor&lt;/code&gt;类联系起来，才能在超时时通知到&lt;code&gt;TimedDoor&lt;/code&gt;中相应的处理代码呢？下面是一个容易想到的解决方案：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15942019667414.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;Door&lt;/code&gt;继承了&lt;code&gt;TimerClient&lt;/code&gt;，因此&lt;code&gt;TimedDoor&lt;/code&gt;也就继承了&lt;code&gt;TimerClient&lt;/code&gt;。这就保证了&lt;code&gt;TimerClient&lt;/code&gt;可以把自己注册到&lt;code&gt;Timer&lt;/code&gt;中，并且可以接收&lt;code&gt;timeout&lt;/code&gt;消息。&lt;/p&gt;
&lt;p&gt;这个方案也不是没有问题，主要的问题是，现在&lt;code&gt;Door&lt;/code&gt;类依赖于&lt;code&gt;TimerClient&lt;/code&gt;了。可并不是所有种类的&lt;code&gt;Door&lt;/code&gt;都需要定时功能。实际上，最初的&lt;code&gt;Door&lt;/code&gt;抽象类和定时功能没有任何关系。如果创建了无需定时功能的&lt;code&gt;Door&lt;/code&gt;的派生类，那么在这些派生类中就必须要提供&lt;code&gt;timeout&lt;/code&gt;方法的退化实现（这就有可能违反了&lt;code&gt;LSP&lt;/code&gt;）。此外，使用这些派生类的应用程序即使不使用&lt;code&gt;TimerClient&lt;/code&gt;类的定义，也必须要引入它，这样就有了不必要的复杂性和不必要的耦合。&lt;/p&gt;
&lt;p&gt;上面的设计方案是一个典型的&lt;strong&gt;接口污染&lt;/strong&gt;的例子，&lt;code&gt;Door&lt;/code&gt;的接口被一个它不需要的方法污染了。在&lt;code&gt;Door&lt;/code&gt;的接口中加入这个方法只是为了能给它的一个子类带来好处。如果每次子类需要一个新方法时，这个方法就加到基类中去，这会进一步污染基类的接口。&lt;/p&gt;
&lt;p&gt;而且，每次基类中加入一个方法时，派生类中就必须要实现这个方法（或者定义一个缺省实现）。事实上，有一种特定的实践让我们可以使派生类无需实现这些方法，该实践的做法是把这些接口合并为一个基类，并在这个基类中提供接口中方法的退化方法。但是，这种实践违反了&lt;code&gt;LSP&lt;/code&gt;，带来了维护和重用方面的问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Door&lt;/code&gt;接口和&lt;code&gt;TimerClient&lt;/code&gt;接口是被完全不同的客户程序使用的。&lt;code&gt;Timer&lt;/code&gt;使用&lt;code&gt;TimerClient&lt;/code&gt;，而操作门的类使用&lt;code&gt;Door&lt;/code&gt;。既然客户程序是分离的，所以&lt;strong&gt;接口也应该保持分离&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为什么呢？&lt;/p&gt;
&lt;p&gt;我们在考虑软件中引起变化的原因时，&lt;strong&gt;通常考虑的都是接口的变化会怎样影响它们的使用者&lt;/strong&gt;。例如，如果&lt;code&gt;TimerClient&lt;/code&gt;的接口改变了，我们会去关心&lt;code&gt;TimerClient&lt;/code&gt;的所有使用者要做什么样的改变。&lt;/p&gt;
&lt;p&gt;然而，实际上也存在着反向的影响，&lt;strong&gt;有时，迫使接口改变的，正是它们的使用者&lt;/strong&gt;。例如，有些&lt;code&gt;Timer&lt;/code&gt;的使用者会注册多个超时通知请求。比如对于&lt;code&gt;TimerDoor&lt;/code&gt;来说，当它检测到门被打开时，会向&lt;code&gt;Timer&lt;/code&gt;发送一个&lt;code&gt;register&lt;/code&gt;消息，请求一个超时通知。可是，在超时到达前，门关上了，关闭一会儿后又被再次打开。这就导致在原先的超时到达前又注册了一个新的超时请求。最后，最初的超时到达，&lt;code&gt;TimedDoor&lt;/code&gt;的&lt;code&gt;timeout&lt;/code&gt;方法被调用，&lt;code&gt;Door&lt;/code&gt;错误地发出了警报。&lt;/p&gt;
&lt;p&gt;我们可以通过在注册时增加一个&lt;code&gt;timeOutID&lt;/code&gt;的唯一标识来改正上面情形中的错误。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Timer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; timeout&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; timeOutID&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; TimerClient client&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TimerClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; timeOutID&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显然，这个改变会影响到&lt;code&gt;TimerClient&lt;/code&gt;的所有使用者。对于上图中的设计，这个改变还会影响到&lt;code&gt;Door&lt;/code&gt;以及&lt;code&gt;Door&lt;/code&gt;的所有使用者，这不是我们所期望的。&lt;strong&gt;如果程序中一部分的更改会影响到程序中完全和它无关的其他部分，那么更改的代价和影响就变得不可预测，并且更改所附带的风险也会急剧增加&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果强迫客户程序依赖于那些它们不使用的方法，那么这些客户程序就面临着由于这些未使用方法的改变所带来的变更。因此，我们希望分离接口来尽可能的避免这种耦合。&lt;/p&gt;
&lt;p&gt;再考虑&lt;code&gt;TimedDoor&lt;/code&gt;的问题，这里有两个独立的接口，有两个独立的客户--&lt;code&gt;Timer&lt;/code&gt;以及&lt;code&gt;Door&lt;/code&gt;所使用的对象。因为实现这两个接口需要操作同样的数据，所以这两个接口必须在同一个对象中实现。那么怎样才能遵循&lt;code&gt;ISP&lt;/code&gt;呢？如何才能分离必须在一起实现的接口呢？&lt;/p&gt;
&lt;p&gt;该问题的答案是：&lt;strong&gt;一个对象的客户（使用者）不是必须通过该对象的接口去访问它，也可以通过委托或者通过该对象的基类去访问它&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一个解决方案就是创建一个派生自&lt;code&gt;TimerClient&lt;/code&gt;的对象，并把对该对象的请求委托给&lt;code&gt;TimedDoor&lt;/code&gt;。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15942035283520.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;TimedDoor&lt;/code&gt;想要向&lt;code&gt;Timer&lt;/code&gt;对象注册一个超时请求时，它就创建一个&lt;code&gt;DoorTimerAdapter&lt;/code&gt;并且把它注册给&lt;code&gt;Timer&lt;/code&gt;。当&lt;code&gt;Timer&lt;/code&gt;对象发送&lt;code&gt;timeout&lt;/code&gt;消息给&lt;code&gt;DoorTimerAdapter&lt;/code&gt;时，&lt;code&gt;DoorTimerAdapter&lt;/code&gt;把这个消息委托给&lt;code&gt;TimedDoor&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这个方案遵循&lt;code&gt;ISP&lt;/code&gt;原则，并且避免了&lt;code&gt;Door&lt;/code&gt;的客户程序和&lt;code&gt;Timer&lt;/code&gt;之间的耦合。同时，&lt;code&gt;Timer&lt;/code&gt;的变化不会影响到任何&lt;code&gt;Door&lt;/code&gt;的使用者。此外，&lt;code&gt;TimedDoor&lt;/code&gt;也不必具有和&lt;code&gt;TimerClient&lt;/code&gt;一样的接口。&lt;code&gt;DoorTimerAdapter&lt;/code&gt;会将&lt;code&gt;TimerClient&lt;/code&gt;接口转换成&lt;code&gt;TimedDoor&lt;/code&gt;接口。&lt;/p&gt;
&lt;p&gt;这个解决方案还是有些不够优雅，每次想去注册一个超时请求时，都要去创建一个新的对象。此外，委托处理会导致一些很小但仍然存在的运行时间和内存的开销，在某些应用领域，内存和运行时间都非常宝贵，以至于这种开销成了一个值得关注的问题。&lt;/p&gt;
&lt;p&gt;还有一种解决方案是通过分离接口来实现。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15942041056822.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这个模型中，&lt;code&gt;TimedDoor&lt;/code&gt;同时继承了&lt;code&gt;Door&lt;/code&gt;和&lt;code&gt;TimerClient&lt;/code&gt;。尽管这两个基类的使用者都可以使用&lt;code&gt;TimedDoor&lt;/code&gt;，但是实际上却都不再依赖于&lt;code&gt;TimedDoor&lt;/code&gt;类。这样，它们就通过分离的接口使用同一个对象。&lt;/p&gt;
&lt;p&gt;通常我们会优先选择这个解决方案。&lt;/p&gt;
&lt;p&gt;再看一个&lt;code&gt;ATM&lt;/code&gt;用户界面的例子：&lt;code&gt;ATM&lt;/code&gt;需要灵活的用户界面，它需要根据不同的操作显示不同的界面，比如输出信息需要能显示为多种语言等。显然，通过创建一个抽象基类把一些公共的逻辑封装起来，然后把每个&lt;code&gt;ATM&lt;/code&gt;能执行的不同操作封装为类&lt;code&gt;Transaction&lt;/code&gt;的派生类，这样我们可以得到类&lt;code&gt;DepositTransaction&lt;/code&gt;、&lt;code&gt;WithdrawalTransaction&lt;/code&gt;以及&lt;code&gt;TransferTransaction&lt;/code&gt;。每个类都调用&lt;code&gt;UI&lt;/code&gt;的方法，设计如下图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15942585373457.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15942585902962.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在我们用&lt;code&gt;OOD&lt;/code&gt;的设计原则来检验上面的设计，显然这个设计不符合&lt;code&gt;LSP&lt;/code&gt;原则。每个操作所使用的&lt;code&gt;UI&lt;/code&gt;的方法，其他的操作类都不会使用，因此，对于任何一个&lt;code&gt;Transaction&lt;/code&gt;的派生类的改动都会迫使对&lt;code&gt;UI&lt;/code&gt;的相应改动，同时也影响到了其他所有&lt;code&gt;Transaction&lt;/code&gt;的派生类及其他所有依赖于&lt;code&gt;UI&lt;/code&gt;接口的类，引入了依赖的传递性和不必要的耦合。&lt;/p&gt;
&lt;p&gt;例如，如果要增加一种操作&lt;code&gt;PayGasBillTransaction&lt;/code&gt;，为了处理该操作想要显示的特定消息，就必须要在&lt;code&gt;UI&lt;/code&gt;中加入新的方法。但由于&lt;code&gt;DepositTransaction&lt;/code&gt;、&lt;code&gt;WithdrawalTransaction&lt;/code&gt;以及&lt;code&gt;TransferTransaction&lt;/code&gt;全都依赖于&lt;code&gt;UI&lt;/code&gt;接口，所以它们都需要重新编译。更糟糕的是，如果这些操作是作为组件供其他组件使用的话，那么这些组件必须全部重新编译部署，但事实上它们的逻辑没有做过任何的改动。&lt;/p&gt;
&lt;p&gt;通过将&lt;code&gt;UI&lt;/code&gt;接口分解成&lt;code&gt;DepositUi&lt;/code&gt;、&lt;code&gt;WithdrawUI&lt;/code&gt;以及&lt;code&gt;TransferUI&lt;/code&gt;这样的单独的接口，可以避免这种不合适的耦合，最终的&lt;code&gt;UI&lt;/code&gt;接口可以去实现这些单独的接口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15942591846908.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;每次创建一个&lt;code&gt;Transaction&lt;/code&gt;类的新派生类时，抽象接口&lt;code&gt;UI&lt;/code&gt;就需要增加一个相应的基类，并且&lt;code&gt;UI&lt;/code&gt;接口以及所有它的派生类都必须改变。不过，这些类并没有被很多的组件使用，事实上，它们可能仅被&lt;code&gt;main&lt;/code&gt;程序或那些启动系统并创建具体&lt;code&gt;UI&lt;/code&gt;实例所使用，因此，增加新的&lt;code&gt;UI&lt;/code&gt;基类所带来的影响是可控的。&lt;/p&gt;
&lt;p&gt;臃肿的类（胖类）会导致它们的使用者之间产生不必要的耦合关系，当一个使用者要求胖类进行一个改动时，会影响到所有其他的使用者。因此，&lt;strong&gt;使用者应该仅仅依赖于它们实际调用的方法&lt;/strong&gt;。通过把胖类的接口分解为多个特定于使用者的接口，可以实现这个目标。每个特定于使用者的接口仅仅声明它的特定客户或者客户组调用的那些函数。接着，该胖类就可以继承所有特定于使用者的接口，并实现它们，这样就解除了使用者和它们没有调用的方法之间的依赖关系，并使使用者之间互不依赖。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OOD&lt;/code&gt;的每个原则在应用时都必须小心，不能过度使用它们。尤其是在一些复杂的场景中，需要结合实际的需求做出一些平衡。&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://book.douban.com/subject/1140457/&#34;&gt;敏捷软件开发&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Interface_segregation_principle&#34;&gt;Interface Segregation Principle&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/ood-principles/">ood principles</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/solid/">SOLID</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/ood-principles/">OOD Principles</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：依赖倒置原则</title>
                <link>https://zhaoyang.me/posts/architecture-from-source-code-ood-dip/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/architecture-from-source-code-ood-dip/</guid>
                <pubDate>Sat, 04 Jul 2020 12:03:20 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;依赖倒置原则（&lt;code&gt;DIP&lt;/code&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高层模块不应该依赖于低层模块，二者都应该依赖于抽象。&lt;/li&gt;
&lt;li&gt;抽象不应该依赖于细节，细节应该依赖于抽象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的倒置是什么意思？&lt;/p&gt;
&lt;p&gt;在传统的软件开发方法，比如结构化分析和设计中，总是倾向于创建一些高层模块依赖于低层模块、策略依赖于细节的软件结构。实际上这些方法的目的之一就是要定义子程序层次结构，该层次结构描述了高层模块怎样调用低层模块。一个设计良好的面向对象的程序，其依赖程序结构相对于编译的过程式方法设计的通常结构而言就是被倒置了。&lt;/p&gt;
&lt;p&gt;当高层模块依赖于低层模块时意味着什么呢？&lt;/p&gt;
&lt;p&gt;高层模块包含了一个应用程序中的重要的策略选择和业务模块。然而，如果这些高层模块依赖于低层模块，那么对低层模块的改动就会直接影响到高层模块，从而迫使它们依次做出改动。如果高层模块依赖于低层模块，那么在不同的上下文中重用高层模块就会变得非常困难。然而，如果高层模块独立于低层模块，那么高层模块就可以非常容易地被重用。这条原则是框架设计的核心原则。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有结构良好的面向对象架构都具有清晰的层次定义，每个层次通过一个定义良好的、受控的接口向外提供了一组内聚的服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对上面这句话，如果只是简单的理解可能会致使设计者设计出如下的的层次化方案：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15941918646294.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这种方案看起来似乎是正确的，然而它存在一个隐藏的错误特征：&lt;code&gt;Policy Layer&lt;/code&gt;对于其下一直到&lt;code&gt;Utility Layer&lt;/code&gt;的改动都是敏感的，这种依赖关系是传递的。&lt;/p&gt;
&lt;p&gt;一个更为合适的模型应该是这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15941920203566.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个较高层次都为它所需要的服务声明一个抽象接口，较低的层次实现了这些抽象接口，每个高层类都通过该抽象接口使用下一层，这样高层就不依赖于低层，低层反而依赖于在高层中声明的抽象服务接口。这样就完全解除了前面那张图片中各个层之间的传递依赖关系。&lt;/p&gt;
&lt;p&gt;这里的&lt;strong&gt;倒置不仅仅是依赖关系的倒置，也是接口所有权的倒置&lt;/strong&gt;。通常我们会认为工具库应该拥有它们自己的接口，但是当应用了&lt;code&gt;DIP&lt;/code&gt;时，我们发现，往往是客户拥有抽象接口，而它们的服务者则从这些抽象接口派生。&lt;/p&gt;
&lt;p&gt;这也是著名的&lt;code&gt;Hollywood&lt;/code&gt;原则：&lt;code&gt;Don&#39;t call us, we&#39;ll call you.&lt;/code&gt;。&lt;strong&gt;低层模块实现了在高层模块中声明并被高层模块调用的接口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DIP&lt;/code&gt;也可以简单的理解为：&lt;strong&gt;依赖于抽象&lt;/strong&gt;。即建议不应该依赖于具体类，程序中所有的依赖关系都应该终止于抽象类或接口。&lt;/p&gt;
&lt;p&gt;因此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何变量都不应该持有一个指向具体类的指针或者引用&lt;/li&gt;
&lt;li&gt;任何类都不应该从具体类派生&lt;/li&gt;
&lt;li&gt;任何方法都不应该覆写它的任何基类中的已经实现了的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，每个程序中都会有违反上述规则的情况。有时必须要创建具体类的实例，而创建这些实例的模块将会依赖于它们。另外，上述规则对于那些虽是具体但却稳定的类来说似乎不太合理，因为如果一个具体类不太会改变，并且也不会创建其他类似的派生类，那么依赖于它并不会造成损害。&lt;/p&gt;
&lt;p&gt;其实，前面讲的&lt;code&gt;SPI&lt;/code&gt;就是典型的&lt;code&gt;DIP&lt;/code&gt;的应用，&lt;code&gt;JDK&lt;/code&gt;的&lt;code&gt;JDBC&lt;/code&gt;声明了依赖：&lt;code&gt;Driver&lt;/code&gt;接口，具体的实现由数据库的厂商实现，&lt;code&gt;JDBC&lt;/code&gt;规范只依赖于接口，并不依赖于任何具体的数据库厂商的驱动的实现。同样，&lt;code&gt;Spring&lt;/code&gt;框架中的扩展点、&lt;code&gt;Dubbo&lt;/code&gt;中各层暴露的扩展点也是一样。&lt;/p&gt;
&lt;p&gt;假设有这样一个需求：&lt;/p&gt;
&lt;p&gt;有一个&lt;code&gt;Button&lt;/code&gt;对象可以感知外部环境的变化，当接收到&lt;code&gt;Poll&lt;/code&gt;消息时，它会判断按钮是否被按下。它不关心是通过什么样的机制去感知的。可能是一个物理开关，也可能是一个光感器，甚至可能是手机上的某个&lt;code&gt;app&lt;/code&gt;。&lt;code&gt;Button&lt;/code&gt;对象可以检测到用户激活或者关闭了它。&lt;/p&gt;
&lt;p&gt;同时有一个&lt;code&gt;Lamp&lt;/code&gt;对象会影响外部环境。当接收到&lt;code&gt;TurnOn&lt;/code&gt;消息时，它显示某种灯光。当接收到&lt;code&gt;TurnOff&lt;/code&gt;消息时，它把灯光熄灭。它可以是你家阳台上的彩灯，也可以是你家客厅的吊灯，甚至是小米的智能台灯。&lt;/p&gt;
&lt;p&gt;如何设计一个用&lt;code&gt;Button&lt;/code&gt;对象控制&lt;code&gt;Lamp&lt;/code&gt;对象的系统呢？&lt;/p&gt;
&lt;p&gt;最简单的实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15941949998826.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;考虑一下上面的这个模型的&lt;code&gt;Java&lt;/code&gt;实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Lamp lamp&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; isActivated&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Lamp lamp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lamp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lamp&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;isActivated&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            lamp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;turnOff&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            lamp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;turnOn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;activate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isActivated&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deactivate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isActivated&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Lamp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;turnOn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The lamp now is turn on.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;turnOff&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The lamp now is turn off.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的设计中，&lt;code&gt;Button&lt;/code&gt;类直接依赖了&lt;code&gt;Lamp&lt;/code&gt;类，当&lt;code&gt;Lamp&lt;/code&gt;类改变时，&lt;code&gt;Button&lt;/code&gt;类也会受到影响；此外，如果想要重用&lt;code&gt;Button&lt;/code&gt;来控制其它的对象，比如&lt;code&gt;Fan&lt;/code&gt;（风扇）对象是不可能的。也就是说，这个设计中，&lt;code&gt;Button&lt;/code&gt;控制着&lt;code&gt;Lamp&lt;/code&gt;对象，并且也只能控制&lt;code&gt;Lamp&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;这个设计明显的违反了&lt;code&gt;DIP&lt;/code&gt;原则。程序的高层策略没有和低层实现分离。抽象没有和具体细节分离。&lt;/p&gt;
&lt;p&gt;那什么是高层策略呢？&lt;/p&gt;
&lt;p&gt;它是应用背后的抽象，也就是那些不随具体细节的改变而改变的真理。在上面的&lt;code&gt;Button / Lamp&lt;/code&gt;的例子中，背后的抽象是检测用户的&lt;code&gt;激活/关闭&lt;/code&gt;指令，并将指令传给目标对象。具体用什么机制检测用户的指令呢？无关紧要；目标对象是什么？无关紧要；这些都是具体的细节，不会影响到我们的抽象。&lt;/p&gt;
&lt;p&gt;重新设计如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15941956129406.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;新的设计中，&lt;code&gt;Button&lt;/code&gt;控制的是那些愿意实现&lt;code&gt;Switchable&lt;/code&gt;接口的任何设备，这就意味着&lt;code&gt;Button&lt;/code&gt;对象能够控制还没有被创造出来的对象。&lt;/p&gt;
&lt;p&gt;通过倒置依赖关系的方向，使得&lt;code&gt;Lamp&lt;/code&gt;依赖于其他类而不是被其他类依赖。&lt;/p&gt;
&lt;p&gt;至此，我们看到使用传统的过程化程序设计所创建出来的依赖关系结构，策略是依赖于细节的。这样会使策略受到细节改变的影响。面向对象的程序设计倒置了依赖的关系结构，使得细节和策略依赖于抽象，并且常常是客户拥有服务接口。&lt;/p&gt;
&lt;p&gt;这种依赖关系的倒置正是好的面向对象设计的标志所在，如果程序的依赖关系是倒置的，它就是面向对象的设计；如果程序的依赖关系不是倒置的，它就是过程化的设计。&lt;/p&gt;
&lt;p&gt;依赖倒置原则是实现许多面向对象技术所宣称的好处的基本底层机制。它的正确应用对于创建可重用的框架来说是必须的。同时它对于构建在变化面前富有弹性的代码也是非常重要的。由于抽象和细节被分离，所以代码也非常容易维护。&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://book.douban.com/subject/1140457/&#34;&gt;敏捷软件开发&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_inversion_principle&#34;&gt;Dependency Inversion Principle&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/ood-principles/">ood principles</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/solid/">SOLID</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/ood-principles/">OOD Principles</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：单例模式</title>
                <link>https://zhaoyang.me/posts/architecture-from-source-code-design-pattern-singleton/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/architecture-from-source-code-design-pattern-singleton/</guid>
                <pubDate>Fri, 03 Jul 2020 17:36:44 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;本来关于设计模式是打算在面向对象的设计原则写完之后写的，因为训练营有一道题是手写单例模式，于是干脆就先把单例模式总结一下，其它的后面再继续写。&lt;/p&gt;
&lt;p&gt;什么是设计模式？&lt;/p&gt;
&lt;p&gt;总的来说，设计模式是一种可重复使用的解决方案。我们用设计模式来解决面向对象设计时碰到的问题，而解决问题的目标就是让我们的设计满足面向对象的设计原则，以提升设计的可扩展性。&lt;/p&gt;
&lt;p&gt;每一种设计模式都描述了一种问题的通用解决方案，且这种问题是反复地在我们的工作场景中出现的。&lt;/p&gt;
&lt;p&gt;一个设计模式分为四个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模式的名称：由少量的字组成的名称，有助于我们表达我们的设计；&lt;/li&gt;
&lt;li&gt;待解决问题：描述了何时需要运用这种模式，以及运用模式的环境（上下文）；&lt;/li&gt;
&lt;li&gt;解决方案：描述了组成设计的元素（类和对象）、它们的关系、职责以及合作。但这种解决方案是抽象的，它不代表具体的实现；&lt;/li&gt;
&lt;li&gt;结论：运用这种方案所带来的利弊。主要是指它对系统的弹性、扩展性和可移植性的影响；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些设计模式按不同的分类方式可以分为不同的类型：&lt;/p&gt;
&lt;p&gt;按功能来分可分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建模式：对类的实例化过程的抽象；&lt;/li&gt;
&lt;li&gt;结构模式：将类或者对象结合在一起形成更大的结构；&lt;/li&gt;
&lt;li&gt;行为模式：对在不同的对象之间划分责任和算法的抽象化；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按方式来分可分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类模式：以继承的方式实现模式，静态的；&lt;/li&gt;
&lt;li&gt;对象模式：以组合的方式实现模式，动态的；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;单例模式&#34;&gt;单例模式&lt;/h4&gt;
&lt;p&gt;一般，我们写单例，最容易写的是饿汉模式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Singleton INSTANCE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Singleton&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton &lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; INSTANCE&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种方式是没问题，但是挑剔的人会说，这里的&lt;code&gt;INSTANCE&lt;/code&gt;在初始化的时候初始化了，如果这样的类非常多，但是，只有少数几个才使用，那这里实例化的对象就白白的占用了很多的内存。&lt;/p&gt;
&lt;p&gt;这个时候，一般会想到&lt;code&gt;Lazy&lt;/code&gt;了，也就是懒汉模式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton &lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Singleton&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这份代码看上去是懒汉模式，但是其实是有问题的，在多线程环境下，如果两个线程同时进入到&lt;code&gt;if (instance == null)&lt;/code&gt;这里之后，&lt;code&gt;instance&lt;/code&gt;会被初始化两次，两个线程拿到的不是同一个对象，这就不是单例了。&lt;/p&gt;
&lt;p&gt;于是乎，首先想到的就是给&lt;code&gt;getInstance()&lt;/code&gt;方法加上&lt;code&gt;synchronized&lt;/code&gt;关键字：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; Singleton &lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Singleton&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这份代码虽然是解决了重复实例化的问题，但是同步的粒度比较大，并发线程比较多的时候，每个线程调用都要去做同步的操作，而单例模式的实例对象，一旦被实例化之后就不会再改变（除非重启应用），所以这个同步的粒度是可以优化的。&lt;/p&gt;
&lt;p&gt;于是乎，就出现了双重检查的懒汉模式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton &lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Singleton&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Singleton&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里对&lt;code&gt;instance&lt;/code&gt;的初始化做了两次检查，所以叫双重检查。双重检查完美的避免了上面的问题，只要&lt;code&gt;instance&lt;/code&gt;被实例化了就不再走同步的代码块。&lt;/p&gt;
&lt;p&gt;但是，上面的代码还是有问题的，问题点就在于&lt;code&gt;instance&lt;/code&gt;的实例化。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Java&lt;/code&gt;中，实例化一个对象分为三步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分配内存空间；&lt;/li&gt;
&lt;li&gt;初始化对象；&lt;/li&gt;
&lt;li&gt;将内存空间的地址赋值给对应的引用；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然而，现实是操作系统可以对指令进行重排序，所以上面的步骤可能会变成132，而不是123。所以，双重检查的懒汉模式需要给&lt;code&gt;instance&lt;/code&gt;的定义处，加上&lt;code&gt;volatile&lt;/code&gt;关键字，这个关键字在这里的作用是：禁止指令重排序优化。换句话说，就是&lt;code&gt;volatile&lt;/code&gt;修饰的变量的赋值操作后面会有一个内存屏障，读操作不会被重排序到内存屏障之前。&lt;/p&gt;
&lt;p&gt;所以，正确的代码应该是这样的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton &lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Singleton&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Singleton&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;双重检查（据说需要使用&lt;code&gt;JDK 1.5+&lt;/code&gt;，在此之前&lt;code&gt;JMM&lt;/code&gt;模型存在缺陷，我没有验证过）完成了，但是还是会有同步的操作存在，也就是说会有锁，而无锁肯定会优于无锁的方式，那有没有一种无锁的方式来实现这个单例呢？&lt;/p&gt;
&lt;p&gt;答案是有的。&lt;/p&gt;
&lt;p&gt;我最初看到这种方式实现的单例是在&lt;code&gt;apache commons utils&lt;/code&gt;的一个类的源码中，第一次看到时我是真的惊讶到了，一个被大家写滥和鄙视到不行的单例模式，居然可以写得这么优雅。&lt;/p&gt;
&lt;p&gt;具体代码如下，也是我交的作业1的答案：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton &lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; LazyHolder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;INSTANCE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LazyHolder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Singleton INSTANCE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Singleton&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这份代码没有锁，并且，&lt;code&gt;LazyHolder&lt;/code&gt;中的&lt;code&gt;INSTANCE&lt;/code&gt;实例在&lt;code&gt;Singleton#getInstance()&lt;/code&gt;方法调用之前是不会被实例化的，这就不会出现饿汉模式那种过早占用内存的情况；而且，上面的代码是使用静态嵌套类的方式实现的，所以，能绝对的保证&lt;code&gt;INSTANCE&lt;/code&gt;只会被实例化一次，因此，就不需要双重检查了。&lt;/p&gt;
&lt;p&gt;至此，我个人觉得，最美的单例模式已经产生了～～&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_design_pattern&#34;&gt;Software Design Pattern&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.zhihu.com/question/56606703&#34;&gt;java 单例模式中双重检查锁定 volatile 的作用？&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://stamwoo.github.io/766337335/&#34;&gt;单例模式–双重检验锁真的线程安全吗&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/design-pattern/">design pattern</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/design-pattern/">design pattern</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：一致性哈希</title>
                <link>https://zhaoyang.me/posts/consistent-hash-algorithm/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/consistent-hash-algorithm/</guid>
                <pubDate>Thu, 02 Jul 2020 10:14:54 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;TL;DR&lt;/p&gt;
&lt;p&gt;本来今天计划把面向对象设计原则剩下的几条原则写一写的，结果一大早看了架构师训练营的本周作业题：用你熟悉的编程语言实现一致性&lt;code&gt;hash&lt;/code&gt;算法，并编写测试用例测试这个算法，测试&lt;code&gt;100&lt;/code&gt;万&lt;code&gt;KV&lt;/code&gt;数据，&lt;code&gt;10&lt;/code&gt;个服务器节点的情况下，计算数据分布数量的标准差，评估算法的存储负载不均衡性。&lt;/p&gt;
&lt;p&gt;正好前阵子读协议的时候读过一致性哈希算法，正好，就着这个题目，可以深入的研究并实践一下了，于是，按耐不住内心的躁动，暂且先写这篇吧。&lt;/p&gt;
&lt;p&gt;以下是本文的大纲：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是一致性哈希&lt;/li&gt;
&lt;li&gt;解决了什么问题&lt;/li&gt;
&lt;li&gt;动手实现一致性哈希&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是正文开始。&lt;/p&gt;
&lt;h4 id=&#34;0x01-什么是一致性哈希&#34;&gt;0x01 什么是一致性哈希&lt;/h4&gt;
&lt;p&gt;维基百科上的定义：一致性哈希其实就是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数大小的改变平均只需要对$K/n$个关键字重新映射，其中$K$是关键字的数量，$n$是槽位的数量。然而在传统的哈希表中，添加或删除一个槽位几乎需要对所有关键字进行重新映射。&lt;/p&gt;
&lt;p&gt;这里的槽位你可以把它简单的想象成数组中的一个位置。&lt;/p&gt;
&lt;p&gt;上面的定义提到了传统的哈希表，也就是我们平时使用哈希的场景。比如，平常我们的哈希算法都是对服务器节点的数量或者是目标对象的数量之类的数值进行取模来计算哈希值，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15936731637623.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们这里假定了有四台服务器，八个&lt;code&gt;key&lt;/code&gt;值去映射取模，结果会均匀的分布到四台服务器的节点上。当我们增加一台服务器时，如下图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15937582400889.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;因为节点的总数量发生了变化，所以会导致大量的&lt;code&gt;key&lt;/code&gt;通过哈希函数取模的结果发生变化。同样，当有服务器发生故障下线时：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15936731842647.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样的道理，也会导致大量的&lt;code&gt;key&lt;/code&gt;通过哈希函数取模的结果发生变化。&lt;/p&gt;
&lt;p&gt;这个哈希函数对&lt;code&gt;key&lt;/code&gt;的计算结果（也就是哈希值）发生了变化会导致怎样的影响呢？&lt;/p&gt;
&lt;p&gt;如果是在分布式缓存的场景下，大量的哈希值取模的结果变化直接会导致大量缓存无法命中（因为同样的的键被映射到了不同的服务器上，而缓存的值还在原来的服务器上），直接穿透到&lt;code&gt;DB&lt;/code&gt;；同时原来缓存的值还在内存中，所以会浪费很多内存。&lt;/p&gt;
&lt;p&gt;如果是在负载均衡的场景下（假如是以用户&lt;code&gt;ID&lt;/code&gt;为&lt;code&gt;key&lt;/code&gt;），大量的哈希值取模的结果变化直接会导致大量用户新的请求会落到和之前不同的服务器上，如果正好你的应用会在服务器本地保存一些用户状态相关的数据的话，此时大量用户请求在新的服务器上，新的服务器又需要重新去获取或是计算来得到这些用户数据。（不过现在大多数情况下都会做无状态化设计，个别特殊的功能除外）&lt;/p&gt;
&lt;p&gt;无论是上面哪一种情况，结果都是不可接受的，因为在分布式场景下，服务的节点上线下线太平常不过了。一致性哈希就可以一定程序上来解决这些问题。&lt;/p&gt;
&lt;h4 id=&#34;0x02-解决了什么问题&#34;&gt;0x02 解决了什么问题&lt;/h4&gt;
&lt;p&gt;一致性哈希是对$2^{32}$进行取模来计算哈希值的。准确的说，一致性哈希的值范围是$[0,2^{32}-1)$，每一个值可以理解为是一个槽位（&lt;code&gt;slot&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;取模操作会使这里计算的哈希值形成一个环（哈希值到达右边界之后，下一个值又会从左边界处的值开始，图形化表示时就类似一个环形），所以我们也把这种哈希算法称为哈希环。&lt;/p&gt;
&lt;p&gt;哈希环的空间是按顺时针方向组织的，我们可以通过计算哈希算法的值来将节点映射到哈希环上：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15936721628734.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图就把三个节点（用蓝色小圆圈表示）映射到了哈希环上，当需要对某个指定的&lt;code&gt;key&lt;/code&gt;读写的时候，一般分为两步来操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步会将&lt;code&gt;key&lt;/code&gt;作为参数通过哈希函数来计算哈希值，以此来确定这个&lt;code&gt;key&lt;/code&gt;在哈希环上的位置；&lt;/li&gt;
&lt;li&gt;第二步是从这个计算出来的位置以顺时针方向沿哈希环行走，遇到的第一个节点就是&lt;code&gt;key&lt;/code&gt;对应的节点；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15936839460542.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从上面，我们可以看到，确定一个&lt;code&gt;key&lt;/code&gt;在哈希环的位置是通过哈希函数来计算的，所以这个哈希函数就是一致性哈希的核心。&lt;/p&gt;
&lt;p&gt;还有一种情况，有时候，我们的节点数量比较少的时候，通过哈希函数将节点映射到哈希环上之后，当有大量的&lt;code&gt;key&lt;/code&gt;进行哈希时，可能会出现大部分的哈希值通过哈希环所计算出来的节点比较集中在某个节点上，为了解决这个问题，有人就引入了虚拟节点的概念：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15936943267941.jpg&#34; alt=&#34;-w541&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，我们将前面第一张图中的三个节点，分别给每个节点映射成三个虚拟节点，这样，整个哈希环上就有了九个节点，相比较三个节点而言，九个节点（尽管最终还是映射到三个真实的节点）会让整个分布变得更加的均匀（均匀是相对的）。（还有一种做法是将真实的节点和虚拟节点一起映射到哈希环上）&lt;/p&gt;
&lt;p&gt;另外，前面讲到了传统哈希方式在分布式环境下的会带来大量数据迁移的问题，那一致性哈希如果解决这个问题呢？这一点维基百科中已经说明了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当删除一台节点机器时，这台机器上保存的所有对象都要移动到下一台机器。添加一台机器到圆环边上某个点时，这个点的下一台机器需要将这个节点前对应的对象移动到新机器上。 更改对象在节点机器上的分布可以通过调整节点机器的位置来实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到，无论是节点上线还是下线，只需要移动极小的一部分数据即可，尤其是与传统的哈希方式相比，一致性哈希带来的收益是非常可观的。&lt;/p&gt;
&lt;p&gt;对于哈希函数，我们需要关注哪些呢？&lt;/p&gt;
&lt;p&gt;我们用哈希函数来对&lt;code&gt;key&lt;/code&gt;求值，然后到哈希环上所查找映射的节点，所以我们需要哈希值的均匀程度；再者，哈希算法本身会有一个哈希碰撞的问题，这个碰撞率当然是越低越好；最后就是关注性能了，根据不同的使用场景，优先考虑需求的情况下再考虑较好的性能，不同哈希算法的算法复杂度也不一样。&lt;/p&gt;
&lt;p&gt;关于哈希函数的算法实现，根据不同的使用场景，维基百科上列出了几十种。&lt;/p&gt;
&lt;h4 id=&#34;0x03-动手实现一致性哈希&#34;&gt;0x03 动手实现一致性哈希&lt;/h4&gt;
&lt;p&gt;现在来解决本篇开头的那道题。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Guava&lt;/code&gt;中的哈希函数的实现列表如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15936948941296.jpg&#34; alt=&#34;-w786&#34;&gt;&lt;/p&gt;
&lt;p&gt;在负载均衡的场景下，哈希函数需要高性能、低碰撞率的特点，后来看到上图表格中的推荐实现中有两个&lt;code&gt;murmur3&lt;/code&gt;的实现，于是就去搜索了一下，搜索完发现这个&lt;code&gt;MurmurHash&lt;/code&gt;算法很不错，它是一种非密码学的哈希函数，相对来说性能比较好，安全性比较低，而且它还有碰撞率低的特点，正适合负载均衡这种场景；而且，在&lt;code&gt;Jedis&lt;/code&gt;、&lt;code&gt;Memcached&lt;/code&gt;、&lt;code&gt;Cassandra&lt;/code&gt;等等这些项目中都使用的是它。&lt;code&gt;MurmurHash&lt;/code&gt;发展到现在已经是第三版了，上图中实现的就是第三版的算法。&lt;/p&gt;
&lt;p&gt;下面的代码是&lt;code&gt;Jedis&lt;/code&gt;中&lt;code&gt;MurmurHash&lt;/code&gt;的实现（我看的是&lt;code&gt;Jedis 3.3.0&lt;/code&gt;的版本，实现的好像是&lt;code&gt;MurmurHash2&lt;/code&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * Hashes the bytes in a buffer from the current position to the limit.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * @param buf The bytes to hash.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * @param seed The seed for the hash.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * @return The 32 bit murmur hash of the bytes in the buffer.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ByteBuffer buf&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; seed&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// save byte order for later restoration
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ByteOrder byteOrder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ByteOrder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LITTLE_ENDIAN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x5bd1e995&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 24&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; seed &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remaining&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remaining&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; 4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

      k &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      k &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      k &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

      h &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      h &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remaining&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      ByteBuffer finish &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ByteBuffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;allocate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ByteOrder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LITTLE_ENDIAN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;// for big-endian version, use this first:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// finish.position(4-buf.remaining());
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      finish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;buf&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rewind&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
      h &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; finish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
      h &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    h &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 13&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    h &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    h &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 15&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;byteOrder&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我会先用&lt;code&gt;Jedis&lt;/code&gt;实现的&lt;code&gt;MurmurHash2&lt;/code&gt;来实现解决问题的代码，分别以不加入虚拟节点、&lt;code&gt;10&lt;/code&gt;个虚拟节点和&lt;code&gt;20&lt;/code&gt;个虚拟节点来分别测试&lt;code&gt;KV&lt;/code&gt;数据的分布情况和标准差。&lt;/p&gt;
&lt;p&gt;后面可以加入其它的一致性哈希算法的实现来进行比较。&lt;/p&gt;
&lt;p&gt;首先，声明一个哈希函数的接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HashFunction&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Calculate input key&amp;#39;s hash value.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param key key for calculated
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return hash value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String key&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们只关注给定一个指定的&lt;code&gt;key&lt;/code&gt;，返回哈希函数计算后的哈希值，所以只需要声明一个方法。&lt;/p&gt;
&lt;p&gt;基于&lt;code&gt;Jedis&lt;/code&gt;的&lt;code&gt;MurmurHash2&lt;/code&gt;的实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MurmurHash2Function&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; HashFunction &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;


    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Jedis&amp;#39;s implement for MurmurHash2.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param key key for calculated
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return hash value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String key&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        ByteBuffer buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ByteBuffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wrap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x1234ABCD&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        ByteOrder byteOrder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ByteOrder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LITTLE_ENDIAN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0xc6a4a7935bd1e995L&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 47&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; seed &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remaining&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remaining&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; 8&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getLong&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

            k &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            k &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            k &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

            h &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            h &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remaining&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            ByteBuffer finish &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ByteBuffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;allocate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                ByteOrder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LITTLE_ENDIAN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// for big-endian version, do this first:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// finish.position(8-buf.remaining());
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            finish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;buf&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rewind&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            h &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; finish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getLong&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            h &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        h &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        h &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        h &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;byteOrder&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;KV&lt;/code&gt;数据抽象为下面的接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KvData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;K&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;V&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * KV data&amp;#39;s key, it can be use to do mapping operation with hash ring.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return kv data&amp;#39;s key
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    K &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * KV data&amp;#39;s value.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * because we don&amp;#39;t concern about this value in the question,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * so implement by default with return null value.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return kv data&amp;#39;s value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; V &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;问题只需要知道&lt;code&gt;KV&lt;/code&gt;数据的分布和分布数量的标准差，不需要关注&lt;code&gt;KV&lt;/code&gt;数据的&lt;code&gt;value&lt;/code&gt;，所以接口中直接以默认的&lt;code&gt;value()&lt;/code&gt;方法实现。&lt;/p&gt;
&lt;p&gt;题目中指定了是&lt;code&gt;10&lt;/code&gt;台服务器，对于服务器节点，我们只需要关注它的唯一标识的&lt;code&gt;key&lt;/code&gt;即可，所以抽象为如下接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ServerNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Server node identify key for mapping to hash ring
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return node key value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    String &lt;span style=&#34;color:#a6e22e&#34;&gt;nodeKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;核心的接口已经齐了，需要编码实现一致性哈希的映射类了，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConsistentHashMapper&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; HashFunction hashFunction&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; virtualNodeNum&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; TreeMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; hashRing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TreeMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConsistentHashMapper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HashFunction hashFunction&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashFunction&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConsistentHashMapper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HashFunction hashFunction&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; virtualNodeNum&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtualNodeNum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; virtualNodeNum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 1000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtual node number must between 0 and 1000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hashFunction&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashFunction&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;virtualNodeNum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; virtualNodeNum&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Mapping kvData&amp;#39;s key to hash ring,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * and return the mapped ServerNode.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param nodeList ServerNode list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param kvData KvData for mapping
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return ServerNode mapped by kvData
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ServerNode &lt;span style=&#34;color:#a6e22e&#34;&gt;mapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodeList&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; KvData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; kvData&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nodeList &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nodeList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;node list can not be null or empty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;kvData &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; kvData&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;kvData&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kvData&amp;#39;s hashKey is null or empty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; hashValue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashFunction&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;kvData&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashRing &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; hashRing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            hashRing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buildHashRing&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nodeList&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; locate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashRing&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; hashValue&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Addressing for hashValue in hash ring, return the first mapped ServerNode.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * if not mapped util to the end, return the first ServerNode in the hash ring.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param hashRing hash ring with mapped ServerNode list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param hashValue hash value need to addressing
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return ServerNode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ServerNode &lt;span style=&#34;color:#a6e22e&#34;&gt;locate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TreeMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; hashRing&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; hashValue&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Entry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashRing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ceilingEntry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashValue&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;entry &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashRing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;firstEntry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; entry&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Build the hash ring with input ServerNode list if hash ring not be built.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * If #{code virtualNodeNum} larger than zero, the hash ring will build with virtual nodes.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * The result is a TreeMap&amp;lt;Long, ServerNode&amp;gt;,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * the map key is ServerNode&amp;#39;s #{code HashFunction.hash(ServerNode.nodeKey())},
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * and the map value is ServerNode.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param nodeList ServerNode list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return ServerNode mapping info map
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; TreeMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buildHashRing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodeList&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        TreeMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; virtualNodeMap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TreeMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// no virtual node number set, just add real node
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtualNodeNum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            addRealNodes&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtualNodeMap&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nodeList&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            addVirtualNodes&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtualNodeMap&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nodeList&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; virtualNodeMap&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addRealNodes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TreeMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; virtualNodeMap&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodeList&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ServerNode node &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; nodeList&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            virtualNodeMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashFunction&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nodeKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()),&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addVirtualNodes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TreeMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; virtualNodeMap&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodeList&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ServerNode node &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; nodeList&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; virtualNodeNum&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;// all mapped node is virtual node
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                virtualNodeMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashFunction&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nodeKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%03d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;前面说了，我们会对每种哈希函数的实现进行多组测试，所以&lt;code&gt;ConsistentHashMapper&lt;/code&gt;有一个&lt;code&gt;virtualNodeNum&lt;/code&gt;属性，用于指定虚拟节点的数量，默认为&lt;code&gt;0&lt;/code&gt;表示全部映射真实的节点。（我这里限定了一个&lt;code&gt;virtualNodeNum&lt;/code&gt;值的范围为&lt;code&gt;0~1000&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;哈希函数和虚拟节点的数量是通过&lt;code&gt;ConsistentHashMapper&lt;/code&gt;类的构造函数来指定的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ConsistentHashMapper#mapper()&lt;/code&gt;方法接受两个参数：服务器节点的列表，以及要寻址的&lt;code&gt;KV&lt;/code&gt;数据，返回的结果就是映射到的服务节点。&lt;/p&gt;
&lt;p&gt;另外，需要计算标准差，所以增加了&lt;code&gt;StatisticUtils&lt;/code&gt;类实现标准关的计算：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StatisticUtils&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Standard Deviation algorithm
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param dataArr data array
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return standard deviation result
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stdev&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; dataArr&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; numi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; dataArr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;dataArr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; dataArr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            numi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(((&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; mean&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;0D&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            num&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;numi&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;num&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;dataArr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;剩下就是测试用例了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestConsistentHashMapper&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Mock ServerNode list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodeList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Arrays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; newServerNodeKey&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; newServerNodeKey&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server02&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; newServerNodeKey&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server03&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; newServerNodeKey&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server04&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; newServerNodeKey&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server05&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; newServerNodeKey&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server06&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; newServerNodeKey&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server07&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; newServerNodeKey&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server08&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; newServerNodeKey&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server09&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; newServerNodeKey&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server10&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;newServerNodeKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        assertNotNull&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server name can not be null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initStatisticMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ServerNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodeList&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; statisticMap&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ServerNode node &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; nodeList&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            statisticMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nodeKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 0L&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;////  test MurmurHash2 start  ////
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testMurmurHash2WithoutVirtualNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MurmurHash2 with no virtual node: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        ConsistentHashMapper hashMapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConsistentHashMapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MurmurHash2Function&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        process&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testMurmurHash2With10VirtualNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MurmurHash2 with 10 virtual node: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        ConsistentHashMapper hashMapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConsistentHashMapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MurmurHash2Function&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 10&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        process&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testMurmurHash2With30VirtualNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MurmurHash2 with 30 virtual node: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        ConsistentHashMapper hashMapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConsistentHashMapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MurmurHash2Function&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 30&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        process&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testMurmurHash2With50VirtualNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MurmurHash2 with 50 virtual node: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        ConsistentHashMapper hashMapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConsistentHashMapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MurmurHash2Function&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 50&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        process&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testMurmurHash2With80VirtualNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MurmurHash2 with 80 virtual node: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        ConsistentHashMapper hashMapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConsistentHashMapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MurmurHash2Function&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 80&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        process&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testMurmurHash2With100VirtualNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MurmurHash2 with 100 virtual node: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        ConsistentHashMapper hashMapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConsistentHashMapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MurmurHash2Function&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 100&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        process&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testMurmurHash2With200VirtualNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MurmurHash2 with 200 virtual node: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        ConsistentHashMapper hashMapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConsistentHashMapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MurmurHash2Function&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 200&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        process&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testMurmurHash2With500VirtualNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MurmurHash2 with 500 virtual node: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        ConsistentHashMapper hashMapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConsistentHashMapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MurmurHash2Function&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 500&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        process&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testMurmurHash2With800VirtualNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MurmurHash2 with 800 virtual node: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        ConsistentHashMapper hashMapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConsistentHashMapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MurmurHash2Function&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 800&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        process&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testMurmurHash2With1000VirtualNode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MurmurHash2 with 1000 virtual node: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        ConsistentHashMapper hashMapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConsistentHashMapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MurmurHash2Function&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 1000&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        process&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;////  test MurmurHash2 end  ////
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConsistentHashMapper hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; statisticMap&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        initStatisticMap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nodeList&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; statisticMap&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        processMappingWithLoop&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; statisticMap&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1000000&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        prettyPrintStatisticMap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;statisticMap&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;processMappingWithLoop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConsistentHashMapper hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; statisticMap&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; timesOfLoop&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; timesOfLoop&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            ServerNode node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashMapper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nodeList&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; UUID&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;randomUUID&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
            statisticMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAndIncrement&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nodeKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prettyPrintStatisticMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AtomicLongMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; statisticMap&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        statisticMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;asMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;entrySet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sorted&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Entry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;comparingByValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;println&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard Deviation: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;StatisticUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stdev&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;statisticMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;asMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toArray&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Long&lt;span style=&#34;color:#f92672&#34;&gt;[]{})));&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;MurmurHash2 with no virtual node: 
server07=19330
server10=24227
server05=27170
server03=47946
server01=60284
server06=85404
server04=132435
server08=150064
server02=200011
server09=253129
Standard Deviation: 76852.16470601202

MurmurHash2 with 10 virtual node: 
server06=46931
server01=61209
server10=70729
server08=77613
server02=78922
server04=97173
server09=110561
server05=121380
server03=151153
server07=184329
Standard Deviation: 40531.410579944044

MurmurHash2 with 30 virtual node: 
server02=61015
server10=74404
server03=87075
server09=98883
server08=104283
server06=107033
server04=110190
server07=111261
server01=116286
server05=129570
Standard Deviation: 19445.72150885639

MurmurHash2 with 50 virtual node: 
server10=78045
server05=84007
server03=86165
server08=95638
server02=96407
server09=99109
server01=108940
server07=111621
server04=119266
server06=120802
Standard Deviation: 14074.121905113654

MurmurHash2 with 80 virtual node: 
server10=72738
server02=79641
server09=92611
server03=93406
server08=95787
server05=97055
server06=108303
server01=110413
server04=124253
server07=125793
Standard Deviation: 16471.37915294284

MurmurHash2 with 100 virtual node: 
server10=79154
server02=88888
server08=90075
server03=95174
server05=98625
server06=103063
server09=103299
server04=109429
server01=110451
server07=121842
Standard Deviation: 11735.359227565214

MurmurHash2 with 200 virtual node: 
server10=89203
server02=91204
server03=97569
server04=99208
server01=100367
server07=101756
server09=102103
server08=105518
server06=105586
server05=107486
Standard Deviation: 5708.017168859954

MurmurHash2 with 500 virtual node: 
server10=93869
server02=94568
server05=97026
server04=98421
server09=99816
server07=101706
server03=101958
server08=104029
server01=104300
server06=104307
Standard Deviation: 3721.3552370070774

MurmurHash2 with 800 virtual node: 
server02=92880
server05=95670
server07=98301
server06=98309
server08=99432
server01=100134
server10=100506
server04=101773
server03=104119
server09=108876
Standard Deviation: 4179.462453474131

MurmurHash2 with 1000 virtual node: 
server02=95820
server05=96008
server01=97176
server08=97304
server06=100933
server10=100962
server07=101764
server04=102557
server03=102675
server09=104801
Standard Deviation: 3005.045091175838
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的输出结果中，我把每组测试中，每个节点所映射到的&lt;code&gt;KV&lt;/code&gt;的数量按从小到大的顺序进行了输出，这样可以方便看最大值与最小值之间的差距。&lt;/p&gt;
&lt;p&gt;从由面的测试结果可以看出：&lt;strong&gt;增加虚拟节点可以有效的提升&lt;code&gt;MurmurHash2&lt;/code&gt;实现的哈希函数的分布的均匀性&lt;/strong&gt;。尤其是上面虚拟节点为&lt;code&gt;1000&lt;/code&gt;时，&lt;code&gt;10&lt;/code&gt;个节点的分布已经很均匀了（在&lt;code&gt;+/-0.005&lt;/code&gt;之间）。&lt;/p&gt;
&lt;p&gt;测试结果的标准差：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;test group&lt;/th&gt;
&lt;th&gt;Standard Deviation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MurmurHash2 no virtual node&lt;/td&gt;
&lt;td&gt;76852.16470601202&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MurmurHash2 10 virtual node&lt;/td&gt;
&lt;td&gt;40531.410579944044&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MurmurHash2 30 virtual node&lt;/td&gt;
&lt;td&gt;19445.72150885639&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MurmurHash2 50 virtual node&lt;/td&gt;
&lt;td&gt;14074.121905113654&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MurmurHash2 80 virtual node&lt;/td&gt;
&lt;td&gt;16471.37915294284&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MurmurHash2 100 virtual node&lt;/td&gt;
&lt;td&gt;11735.359227565214&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MurmurHash2 200 virtual node&lt;/td&gt;
&lt;td&gt;5708.017168859954&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MurmurHash2 500 virtual node&lt;/td&gt;
&lt;td&gt;3721.3552370070774&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MurmurHash2 800 virtual node&lt;/td&gt;
&lt;td&gt;4179.462453474131&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MurmurHash2 1000 virtual node&lt;/td&gt;
&lt;td&gt;3005.045091175838&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;标准差的结果越低表示效果越好。下图为标准差的拆线图，横轴为节点数量，纵轴为标准差的值：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15942612887676.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在示例代码中，还增加了&lt;code&gt;Md5&lt;/code&gt;、&lt;code&gt;sha256&lt;/code&gt;、&lt;code&gt;MurmurHash3&lt;/code&gt;等不同的实现。&lt;/p&gt;
&lt;h4 id=&#34;0x04-总结&#34;&gt;0x04 总结&lt;/h4&gt;
&lt;p&gt;本篇通过一道题目来深入了解了一致性哈希。&lt;/p&gt;
&lt;p&gt;一致性哈希在分布式环境下使用非常广泛，不同的场景使用的哈希函数的实现也各不相同。对于一个哈希函数，我们主要关注以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;算法的复杂度（时间、空间）&lt;/li&gt;
&lt;li&gt;哈希值的分布均匀情况&lt;/li&gt;
&lt;li&gt;哈希碰撞的概率&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选择哈希函数，以及实现一致性哈希需要结合具体的业务场景。&lt;/p&gt;
&lt;p&gt;比如，&lt;code&gt;Guava&lt;/code&gt;中的&lt;code&gt;Hashing#consistentHash()&lt;/code&gt;实现在减少桶（&lt;code&gt;bucket&lt;/code&gt;）的数量后，会导致所有的映射发生偏移，在某些场景下是无法接受的。&lt;/p&gt;
&lt;p&gt;再比如，上面的&lt;code&gt;MurmurHash2Function&lt;/code&gt;实现中，现在是直接将结果（&lt;code&gt;h&lt;/code&gt;）返回，但是，如果返回的&lt;code&gt;h &amp;amp; 0xffffffffL&lt;/code&gt;，在增加虚拟节点的情况下，映射的分布要比直接返回结果均匀很多。&lt;/p&gt;
&lt;p&gt;服务器节点的标识&lt;code&gt;key&lt;/code&gt;、数据的&lt;code&gt;key&lt;/code&gt;的设计与哈希函数的算法实现关系十分密切，虚拟节点的增加也能对映射的分布起到平衡的作用，但需要结合实际情况来测试虚拟节点的合适数值。&lt;/p&gt;
&lt;p&gt;本文到此就结束了，代码在示例仓库中，示例代码中实现了多种不同的哈希函数实现，可以横向比较，其中也包括&lt;code&gt;dubbo&lt;/code&gt;中的一致性哈希算法的实现，&lt;code&gt;Guava&lt;/code&gt;中的&lt;code&gt;MurmurHash3&lt;/code&gt;实现等等。&lt;/p&gt;
&lt;p&gt;欢迎各交流与反馈！&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Consistent_hashing&#34;&gt;Consistent Hashing&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_function&#34;&gt;Hash Function&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_hash_functions&#34;&gt;List of Hash Functions&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MurmurHash&#34;&gt;MurmurHash&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1_q2EVcxA2HjcrlVMbaqXwMj31h9M5-Bqj_m8vITOwwk/edit#gid=0&#34;&gt;Google Guava Hash Functions&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.acodersjourney.com/system-design-interview-consistent-hashing/&#34;&gt;System Design Interview Concepts - Consistent Hashing&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.cnkirito.moe/consistent-hash-lb/&#34;&gt;一致性哈希负载均衡算法的探讨&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.it-swarm.dev/zh/java/%E7%AE%80%E5%8D%95%E7%BB%9F%E8%AE%A1-%E7%94%A8%E4%BA%8E%E8%AE%A1%E7%AE%97%E5%9D%87%E5%80%BC%EF%BC%8C%E6%A0%87%E5%87%86%E5%B7%AE%E7%AD%89%E7%9A%84java%E5%8C%85/969011246/&#34;&gt;简单统计 - 用于计算均值，标准差等的Java包&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://blog.reverberate.org/2012/01/state-of-hash-functions-2012.html&#34;&gt;State of the hash functions, 2012&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/unclezhao/architecture-std&#34;&gt;示例代码仓库&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/protocol/">protocol</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/consistent-hash/">consistent hash</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/algorithm/">algorithm</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：里氏替换原则</title>
                <link>https://zhaoyang.me/posts/architecture-from-source-code-ood-lsp/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/architecture-from-source-code-ood-lsp/</guid>
                <pubDate>Wed, 01 Jul 2020 16:12:52 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;里氏替换原则（&lt;code&gt;LSP&lt;/code&gt;）：子类型必须能够替换掉它们的基类型。&lt;/p&gt;
&lt;p&gt;这条原则强调的是正确的使用抽象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OCP&lt;/code&gt;背后的主要机制是抽象和多态。在静态类型语言中（如&lt;code&gt;Java&lt;/code&gt;），支持抽象和多态的关键机制之一是继承，正是使用了继承，我们才可以基于抽象来封装公共逻辑，然后创建实现抽象基类中的抽象方法的子类。&lt;/p&gt;
&lt;p&gt;先看一个经典的例子，我们从小学开始，数学课上就教我们：正方形是特殊的长方形。那么，如果现在我们要对长方形和正方形建模的话，按照数学上的描述，正方形是继承自长方形的。所以，我们可能会这样来设计：&lt;/p&gt;
&lt;p&gt;长方形类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Rectangle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; height&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getWidth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setWidth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getHeight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; height&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setHeight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; height&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; height&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;area&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; width &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; height&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着是正方形：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Square&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Rectangle &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setWidth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setWidth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;width&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setHeight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;width&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setHeight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; height&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setWidth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;height&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setHeight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;height&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为正方形的四条边长相同，所以，我们需要在&lt;code&gt;setWidth()&lt;/code&gt;方法和&lt;code&gt;setHeight()&lt;/code&gt;方法中，分别同时对&lt;code&gt;width&lt;/code&gt;和&lt;code&gt;height&lt;/code&gt;进行赋值操作。&lt;/p&gt;
&lt;p&gt;好了，我们现在对我们的设计编写测试用例，分别测试计算长方形和正方形的面积：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testRectangleArea&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Rectangle rec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Rectangle&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        rec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setWidth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        rec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setHeight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        assertEquals&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 20&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; rec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;area&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testSquareArea&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Rectangle rec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Square&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        rec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setWidth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        rec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setHeight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        assertEquals&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 20&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; rec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;area&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两个测试用例，结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15941696262614.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AssertionError&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 
Expected &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;20
Actual   &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;16
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Click to see difference&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;testSquareArea()&lt;/code&gt;测试用例没通过，期望值是&lt;code&gt;20&lt;/code&gt;，实际值是&lt;code&gt;16&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们来看一下测试用例的内容，这里的&lt;code&gt;Rectangle&lt;/code&gt;是使用的&lt;code&gt;Square&lt;/code&gt;来实例化的，先是设置了&lt;code&gt;Rectangle&lt;/code&gt;的宽，然后再设置了它的长，最后断言面积的值。从数学的定义上来分析：我先设置长方形的长为&lt;code&gt;5&lt;/code&gt;，然后设置长方形的宽为&lt;code&gt;4&lt;/code&gt;，然后判断长方形的面积为&lt;code&gt;20&lt;/code&gt;，没有哪里有问题啊？&lt;/p&gt;
&lt;p&gt;这个测试用例不通过的根本原因在于测试用例做了一个假设：改变&lt;code&gt;Rectangle&lt;/code&gt;的宽不会导致其长发生变化。&lt;/p&gt;
&lt;p&gt;很显然，改变一个长方形的宽不会影响它的长的假设是合理的。但是，并不是所有可以作为&lt;code&gt;Rectangle&lt;/code&gt;传递的对象都满足这个假设，例如这里的&lt;code&gt;Square&lt;/code&gt;类。所以这里的&lt;code&gt;Square&lt;/code&gt;和&lt;code&gt;Rectangle&lt;/code&gt;之间的关系是违反&lt;code&gt;LSP&lt;/code&gt;的。&lt;/p&gt;
&lt;p&gt;这个测试用例本身是没有问题的，长方形的宽和长是可以独立变化的，所以以上面的逻辑进行断言没有问题。问题在于&lt;code&gt;Square&lt;/code&gt;类的实现，违反了长和宽可以独立变化这条规则。&lt;/p&gt;
&lt;p&gt;到这里，&lt;code&gt;LSP&lt;/code&gt;让我们明白了一个非常重要的结论：&lt;strong&gt;一个模型，如果孤立地看，并不内有真正意义上的有效性，模型的有效性只能通过它的客户程序来表现&lt;/strong&gt;。在评估一个特定的设计是否恰当时，不能完全孤立地看这个解决方案，必须要根据该设计的使用者所做出的合理假设来审视它。&lt;/p&gt;
&lt;p&gt;就像上面的&lt;code&gt;Rectangle&lt;/code&gt;和&lt;code&gt;Square&lt;/code&gt;两个类，孤立地看，两个类都没有问题，也符合数学意义上的长方形和正方形。但是，在使用者使用时（测试用例）却不能按预期正常地工作。&lt;/p&gt;
&lt;p&gt;那前面说的正方形是特殊的长方形不对吗？&lt;/p&gt;
&lt;p&gt;正方形可以是长方形（&lt;code&gt;IS-A&lt;/code&gt;），但是，从测试用例的角度来看，&lt;code&gt;Square&lt;/code&gt;对象不是&lt;code&gt;Rectangle&lt;/code&gt;对象。因为&lt;code&gt;Square&lt;/code&gt;对象的行为方式和测试用例所期望的&lt;code&gt;Rectangle&lt;/code&gt;对象的行为方式不相容、不正确。而我们&lt;strong&gt;做为软件设计者，对象的行为方式才是我们真正所关注的问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;从上面的例子，我们可以看到&lt;code&gt;LSP&lt;/code&gt;强调并指出，&lt;code&gt;OOD&lt;/code&gt;中&lt;code&gt;IS-A&lt;/code&gt;的关系是针对行为方式而言的，并且，行为方式是可以进行合理假设的，也是客户端程序（调用方、使用者）所依赖的。&lt;/p&gt;
&lt;p&gt;这里提到了&lt;strong&gt;合理假设&lt;/strong&gt;，这个合理假设是对客户需求的合理假设，那怎样才能知道客户真正的要求呢？那就是**基于契约设计（&lt;code&gt;DBC&lt;/code&gt;）**了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用DBC，类的编写者显式地规定针对该类的契约。客户代码的编写者可以通过该契约获悉可以依赖的行为方式。契约是通过为每个方法声明的前置条件（&lt;code&gt;preconditions&lt;/code&gt;）和后置条件（&lt;code&gt;postconditions&lt;/code&gt;）来指定的。要使一个方法得以执行，前置条件必须要为真。执行完毕后，该方法要保证后置条件为真。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在重新声明派生类中的例程（&lt;code&gt;routine&lt;/code&gt;）时，只能使用相等或者更弱的前置条件来替换原始的前置条件，只能使用相等或者更强的后置条件来替换原始的后置条件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，当通过基类的接口使用对象时，用户只知道基类的前置条件和后置条件。因此，派生类对象不能期望这些用户遵从比基类更强的前置条件。也即是，派生类必须接受基类可以接受的一切。同时，派生类必须和基类的所有后置条件一致。也即是，派生类的行为方式和输出不能违反基类已经确立的任何限制。基类的用户不应该被派生类的输出扰乱。&lt;/p&gt;
&lt;p&gt;再看回上面的例子，&lt;code&gt;Rectangle#setWidth(int w)&lt;/code&gt;的后置条件可以看作是：&lt;code&gt;assertTrue(width == w &amp;amp;&amp;amp; height == old.height)&lt;/code&gt;，这里的&lt;code&gt;old&lt;/code&gt;是&lt;code&gt;setWidth&lt;/code&gt;被调用之前&lt;code&gt;Rectangle&lt;/code&gt;的值。&lt;/p&gt;
&lt;p&gt;显然，&lt;code&gt;Square#setWidth(int w)&lt;/code&gt;的后置条件比&lt;code&gt;Rectangle#setWidth(int w)&lt;/code&gt;的后置条件弱，因为它不满足&lt;code&gt;height == old.height&lt;/code&gt;这条约束。因此，&lt;code&gt;Square&lt;/code&gt;的&lt;code&gt;setWidth&lt;/code&gt;方法违反了基类订下的契约。&lt;/p&gt;
&lt;p&gt;此外，我们也可以通过编写单元测试的方式来指定契约，单元测试通过彻底的测试一个类的行为来使该类的行为更加清晰。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;LSP&lt;/code&gt;，提取公共部分是个很好的设计工具（基于继承关系时）。关于提取公共部分，大师们提出：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一组类都支持一个公共的职责，那么它们应该从一个公共的超类继承该职责。如果公共的超类还不存在，那么就创建一个，并把公共的职责放入其中。毕竟，这样一个类的有用性是确定无疑的--你已经展示了一些类会继承这些职责。然后稍后对系统的扩展也许会加入一个新的子类，该子类很可能会以新的方式来支持同样的职责。此时，这个新创建的超类可能会是一个抽象类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;总是保证子类可以代替它的基类是一个有效的管理复杂性的方法&lt;/strong&gt;。一旦放弃了这一点，就必须要单独的来考虑每个类。&lt;/p&gt;
&lt;p&gt;在实际的开发中，我们常常使用如下两种方式来违反&lt;code&gt;LSP&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;派生类中的退化函数：派生类的编写者认为某个函数在该派生类中没有用处，所以就将该函数的实现退化（空实现）。在派生类中存在退化函数并不一定表示违反了&lt;code&gt;LSP&lt;/code&gt;，但是当出现这种情况时，还是值得注意一下。&lt;/li&gt;
&lt;li&gt;从派生类中抛出异常：在派生类的方法中添加了其基类不会抛出的异常。如果基类的使用者不期望这些异常，那么把它们添加到派生类的方法中就会导致不可替换性。此时要遵循&lt;code&gt;LSP&lt;/code&gt;，要么就必须 改变使用者的期望，要么派生类就不应该抛出这些异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;OCP&lt;/code&gt;是&lt;code&gt;OOD&lt;/code&gt;中很多原则的核心，如果这个原则应用得有效，应用程序就会具有更好的可维护性、可重用性及健壮性。&lt;code&gt;LSP&lt;/code&gt;是使&lt;code&gt;OCP&lt;/code&gt;成为可能的主要原则之一。正是子类型的可替换性才使得使用基类类型的模块在无需修改的情况下就可以扩展。这种可替换性必须是开发人员可以隐式依赖的东西。因此，如果没有显式地强制基类类型的契约，那么代码就必须良好并且明显地表达出这一点。&lt;/p&gt;
&lt;p&gt;我们通常所说的&lt;code&gt;IS-A&lt;/code&gt;的含义可于宽泛，&lt;strong&gt;不能作为子类型的定义&lt;/strong&gt;。子类型的正确定义是&lt;strong&gt;可替换性的&lt;/strong&gt;，这里的可替换性可以通过显式或者隐式的契约来定义。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LSP&lt;/code&gt;引出了&lt;strong&gt;基于契约设计&lt;/strong&gt;，这里的契约我们通常是通过单元测试来实现的，基于单元测试来实现我们的设计意图，以确保满足用户（使用者）的真正的需求。用户可以通过验收测试来验证设计的有效性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LSP&lt;/code&gt;在&lt;code&gt;Spring&lt;/code&gt;框架和&lt;code&gt;Dubbo&lt;/code&gt;框架的使用随处可见，比如&lt;code&gt;Spring&lt;/code&gt;框架中的&lt;code&gt;AbstractXmlApplicationContext&lt;/code&gt;，又比如&lt;code&gt;Dubbo&lt;/code&gt;框架中的&lt;code&gt;AbstractLoadBalance&lt;/code&gt;等等，太多了，毕竟，&lt;code&gt;LSP&lt;/code&gt;是&lt;code&gt;OOD&lt;/code&gt;原则实现的基石。&lt;/p&gt;
&lt;p&gt;题外话：&lt;/p&gt;
&lt;p&gt;其实，再次学习&lt;code&gt;LSP&lt;/code&gt;之后，结合软件开发设计的发展，现在才明白以前学习的&lt;code&gt;TDD&lt;/code&gt;中的测试其实和单元测试并不能完全等同。&lt;/p&gt;
&lt;p&gt;单元测试可以在写完代码之后再写测试用例，测试用例的目的是测试设计的意图和目标，每个测试用例是以能被隔离测试的最小独立行为的单元；&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;TDD&lt;/code&gt;中的测试是先于代码的，即所谓的代码未写测试先行，这里的测试本质上是设计的契约，测试驱动开发本质上是契约在驱动，以确保我们的设计符合预期。&lt;code&gt;TDD&lt;/code&gt;中的测试可能有单元测试，还可以有功能测试等，其核心在于&lt;strong&gt;驱动&lt;/strong&gt;，也就是说，通过一个测试来告诉你下一步该做什么。&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://book.douban.com/subject/1140457/&#34;&gt;敏捷软件开发&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/LSP&#34;&gt;LSP&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://docs.oracle.com/cd/E19683-01/806-7930/assert-13/index.html&#34;&gt;Preconditions, Postconditions, and Class Invariants&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/ood-principles/">ood principles</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/solid/">SOLID</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/ood-principles/">OOD Principles</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：开放封闭原则</title>
                <link>https://zhaoyang.me/posts/architecture-from-source-code-ood-ocp/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/architecture-from-source-code-ood-ocp/</guid>
                <pubDate>Mon, 29 Jun 2020 12:21:14 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h4 id=&#34;0x01-定义&#34;&gt;0x01 定义&lt;/h4&gt;
&lt;p&gt;开放封闭原则（&lt;code&gt;OCP&lt;/code&gt;）：软件实体（类、模块、函数等）应该是可以扩展的，但是不可修改的。&lt;/p&gt;
&lt;p&gt;这条原则强调的是设计在面对需求的改变时可以保持相对的稳定性。&lt;/p&gt;
&lt;p&gt;遵循开闭原则设计出的模块具有两个主要的特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于扩展是开放的：即意味着模块的行为是可以扩展的。&lt;/li&gt;
&lt;li&gt;对于修改是封闭的：对模块行为进行扩展时，不必发动模块的源代码或者二进制代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那如何做到这两点呢？核心的关键就是&lt;strong&gt;抽象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在模块设计层面，前面&lt;code&gt;SPI&lt;/code&gt;篇的文章已经明确的分析了模块设计时如何操持良好的扩展性，因此&lt;code&gt;SPI&lt;/code&gt;模式是遵循开闭原则的。尤其是&lt;code&gt;Dubbo&lt;/code&gt;框架的设计，每一层的实现都暴露出扩展点来，让用户可以自行扩展。&lt;/p&gt;
&lt;p&gt;在代码设计层面，有两种方法来实现开闭原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种是将直接依赖修改为接口，在未来进行扩展时只需要新实现一个实现类即可；&lt;/li&gt;
&lt;li&gt;另一种是使用模版方法模式，用抽象来封装好通用的逻辑部分，将实现细节清晰的分离出来供不同的子类实现；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于此，也可以看到，&lt;code&gt;OCP&lt;/code&gt;强调通过新增代码来实现扩展，反对通过修改来实现扩展。这也很容易理解，谁也不能保证修改不会破坏之前封装好的正确的行为或逻辑。&lt;/p&gt;
&lt;h4 id=&#34;0x02-示例&#34;&gt;0x02 示例&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;OCP&lt;/code&gt;在模块层面的实现我们这里就不做示例了，框架的设计中，&lt;code&gt;SPI&lt;/code&gt;已经完美的诠释了&lt;code&gt;OCP&lt;/code&gt;在模块设计时的应用，我们这里以代码层面的&lt;code&gt;OCP&lt;/code&gt;来做示例。&lt;/p&gt;
&lt;p&gt;代码层面的&lt;code&gt;OCP&lt;/code&gt;有两种实现，一种是基于接口的实现，另一种是基于抽象类的实现。&lt;/p&gt;
&lt;p&gt;在前一篇&lt;code&gt;SRP&lt;/code&gt;中，关于&lt;code&gt;Book&lt;/code&gt;类的打印功能和下载功能的设计，我们在保证&lt;code&gt;Book&lt;/code&gt;类的单一职责时，分别使用了&lt;code&gt;Printable&lt;/code&gt;和&lt;code&gt;Downloadable&lt;/code&gt;来实现打印与下载的功能，以支持不同方式的打印和不同格式的下载，其实这就是基于接口的&lt;code&gt;OCP&lt;/code&gt;的实现了。&lt;/p&gt;
&lt;p&gt;试想一下，现在如果想增加一种&lt;code&gt;html&lt;/code&gt;的下载方式，我们需要怎么做？&lt;/p&gt;
&lt;p&gt;我们只需要基于&lt;code&gt;Downloadable&lt;/code&gt;接口，重新实现这种下载的逻辑即可，不需要对&lt;code&gt;Book&lt;/code&gt;或是其它的下载实现类做任何的修改，这不正好就是&lt;code&gt;OCP&lt;/code&gt;所强调的：通过新增来实现扩展吗？&lt;/p&gt;
&lt;p&gt;因此，这里就不再重复介绍基于接口方式来实现&lt;code&gt;OCP&lt;/code&gt;了，下面介绍一下以抽象类的方式来实现&lt;code&gt;OCP&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;假设有这样一个需求，我们要实现下面这样一个窗口程序：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15935865783548.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;窗口组件的树形结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15935866258612.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;程序最后的输出要是这样：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;print WinForm(WINDOW窗口)
print Picture(LOGO图片)
print Button(登录)
print Button(注册)
print Frame(FRAME1)
print Label(用户名)
print TextBox(用户名文本框)
print Label(密码)
print PasswordBox(密码框)
print CheckBox(复选框)
print TextBox(记住用户名)
print LinkLabel(忘记密码)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们应当怎样来设计这个程序呢？&lt;/p&gt;
&lt;p&gt;通过上面的需求，我们能看到，每个控制都能输出自己的信息，有些控件还能容纳一些其它的控件，控件可以组装成一个整体的程序。&lt;/p&gt;
&lt;p&gt;作为控件来说，它有自己的一些属性，如&lt;code&gt;name&lt;/code&gt;等，还有一些自己的行为，如获取自己的名称信息等、输出显示信息等。&lt;/p&gt;
&lt;p&gt;再看上面的两张图片，控件分很多种不同的类型，不同的控制既有相同的行为又有不同的行为，因此，我们需要使用抽象将控件的公共行为进行封装。如果只是一个抽象类，那么某些能容纳其它控件的控件在维护它的子控件时，就需要关联一抽象类本身，而本质上，它只关注自己容纳的子控件的行为（如下面的&lt;code&gt;Frame&lt;/code&gt;控件，&lt;code&gt;WinForm&lt;/code&gt;控件），所以，我们可以用一个&lt;code&gt;Component&lt;/code&gt;接口将组件的行为分离出来，并且由抽象类来实现这个接口。&lt;/p&gt;
&lt;p&gt;具体的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Gui component&amp;#39;s name
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return name
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    String &lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Display detail info
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AbstractComponent&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Component &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AbstractComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;AbstractComponent&lt;/code&gt;抽象类封装了控件的公共属性&lt;code&gt;name&lt;/code&gt;和公共行为&lt;code&gt;getName()&lt;/code&gt;方法以及&lt;code&gt;display()&lt;/code&gt;方法，&lt;code&gt;getName()&lt;/code&gt;方法的逻辑是公共的，而&lt;code&gt;display()&lt;/code&gt;方法的逻辑是与具体的不同控件相关的，所以是抽象方法。&lt;/p&gt;
&lt;p&gt;以下为各具体控件的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractComponent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print Button(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; getName&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CheckBox&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractComponent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CheckBox&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print CheckBox(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; getName&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Frame&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractComponent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Component&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; subComponents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Frame&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print Frame(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; getName&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Component sub &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; subComponents&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            sub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Frame &lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Component component&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;subComponents&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;component&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Label&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractComponent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Label&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print Label(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; getName&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LinkLabel&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractComponent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LinkLabel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print LinkLabel(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; getName&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PasswordBox&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractComponent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PasswordBox&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print PasswordBox(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; getName&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Picture&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractComponent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Picture&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print Picture(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; getName&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TextBox&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractComponent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TextBox&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print TextBox(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; getName&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WinForm&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractComponent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Component&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; subComponents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WinForm&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print WinForm(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; getName&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Component sub &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; subComponents&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            sub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; WinForm &lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Component component&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;subComponents&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;component&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上为具体的控件的代码，下面是&lt;code&gt;main()&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// build WinForm
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        WinForm winForm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WinForm&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WINDOW窗口&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        winForm
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Picture&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LOGO图片&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// build Picture
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Button&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;登录&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// build Login Button
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Button&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;注册&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// build Register Button
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// build Frame
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        Frame frame &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Frame&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FRAME1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        winForm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;frame&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        frame
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Label&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;用户名&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// build username Label
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TextBox&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;用户名文本框&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// build username TextBox
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Label&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;密码&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;// build password Label
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PasswordBox&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;密码框&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// build PasswordBox
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CheckBox&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;复选框&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// build CheckBox
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TextBox&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;记住用户名&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// build remember username CheckBox
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addSubComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkLabel&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;忘记密码&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// build forget password LinkLabel
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// display window
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        winForm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行后的输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;3:10:26 下午: Executing task &#39;App.main()&#39;...

&amp;gt; Task :compileJava
&amp;gt; Task :processResources UP-TO-DATE
&amp;gt; Task :classes

&amp;gt; Task :App.main()
print WinForm(WINDOW窗口)
print Picture(LOGO图片)
print Button(登录)
print Button(注册)
print Frame(FRAME1)
print Label(用户名)
print TextBox(用户名文本框)
print Label(密码)
print PasswordBox(密码框)
print CheckBox(复选框)
print TextBox(记住用户名)
print LinkLabel(忘记密码)

BUILD SUCCESSFUL in 1s
3 actionable tasks: 2 executed, 1 up-to-date
3:10:27 下午: Task execution finished &#39;App.main()&#39;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的示例，我们用&lt;code&gt;AbstractComponent&lt;/code&gt;来封装了不同控件的公共行为和属性，分离出&lt;code&gt;Component&lt;/code&gt;接口是因为对于&lt;code&gt;Frame&lt;/code&gt;、&lt;code&gt;WinForm&lt;/code&gt;这种能容纳其它子控件的控件而言，它们关注的仅仅是子控件的行为，并不关注它们的具体实现，所以，通过&lt;code&gt;Component&lt;/code&gt;接口将控件的行为单独分离出来，这样在&lt;code&gt;Frame&lt;/code&gt;、&lt;code&gt;WinForm&lt;/code&gt;中就不用耦合&lt;code&gt;AbstractComponent&lt;/code&gt;类，而只需要依赖于&lt;code&gt;Component&lt;/code&gt;接口即可。（分离&lt;code&gt;Component&lt;/code&gt;接口纯属我个人的思考）&lt;/p&gt;
&lt;h4 id=&#34;0x03-总结&#34;&gt;0x03 总结&lt;/h4&gt;
&lt;p&gt;本篇介绍的是开闭原则（&lt;code&gt;OCP&lt;/code&gt;），它可以应用于不同的维度，如模块、类、函数等。&lt;/p&gt;
&lt;p&gt;基于模块维度的实现在前面的&lt;code&gt;SPI&lt;/code&gt;篇中已经完美的诠释了&lt;code&gt;OCP&lt;/code&gt;的应用。&lt;/p&gt;
&lt;p&gt;基于类的实现也有两种方式：基于接口和基于抽象类。&lt;/p&gt;
&lt;p&gt;基于接口的实现在&lt;code&gt;SRP&lt;/code&gt;篇中的示例也已经演示过了，我们这里主要是演示了基于抽象类的实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OCP&lt;/code&gt;是面向对象设计的核心，遵循这个原则可以带来更好的灵活性、可重用性及可维护性。但是，我们也不能滥用抽象，对程序中的每个部分者肆意的进行抽象是不行的；正确的做法是应该仅仅对程序中呈现出频繁变化的那些部分做出抽象。&lt;/p&gt;
&lt;p&gt;另外，关于使用接口进行抽象还是使用抽象类使用抽象的问题：&lt;/p&gt;
&lt;p&gt;接口定义的是一组相关的行为契约，用来在不同的类、模块或是系统间交互；而抽象类更像是一个模块。接口的不同实现类更松散，只需要满足接口中方法定义的契约即可，调用方只按契约调用；而抽象类一般会定义好类的主要逻辑或是流程，只是将一些更细致的细节部分定义为抽象方法给子类实现，调用方在调用时还是要遵循抽象类定义的逻辑或流程，甚至很多时候，调用方根本就不会直接调用子类所实现的抽象方法，而是通过抽象类定义好的业务方法来回调到子类的实现。&lt;/p&gt;
&lt;p&gt;最后，我个人认为在实际开发中，抽象类封装的可能还有一些&lt;code&gt;public&lt;/code&gt;方法，我们通过接口来屏蔽掉抽象类中不希望被错误调用的方法，这样更能提升内聚性，这仅仅只是我个人的想法。&lt;/p&gt;
&lt;p&gt;欢迎各种交流与反馈！&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://book.douban.com/subject/1140457/&#34;&gt;敏捷软件开发&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle&#34;&gt;Open Closed Principle&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://medium.com/better-programming/choosing-between-interface-and-abstract-class-7a078551b914&#34;&gt;Choosing Between an Interface and an Abstract Class&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/unclezhao/architecture-std&#34;&gt;示例代码仓库&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/ood-principles/">ood principles</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/solid/">SOLID</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/ood-principles/">OOD Principles</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：单一职责原则</title>
                <link>https://zhaoyang.me/posts/architecture-from-source-code-ood-srp/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/architecture-from-source-code-ood-srp/</guid>
                <pubDate>Sat, 27 Jun 2020 16:14:32 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h4 id=&#34;0x01-定义&#34;&gt;0x01 定义&lt;/h4&gt;
&lt;p&gt;单一职责原则（&lt;code&gt;SRP&lt;/code&gt;）：&lt;strong&gt;就一个类而言，应该仅有一个引起它变化的原因&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这里强调了仅有一个引起变化的原因，但是为什么只能有一个原因呢？&lt;/p&gt;
&lt;p&gt;如果一个类承担的职责过多，一方面就相当于把这些职责耦合在了一起（面向对象设计的目标就是高内聚低耦合），另一方面，当某一个职责发生变化时，由于类承担了多个职责，所以一个职责的变化是有可能会抑制这个类对其他职责的实现能力的；同时，当变化发生时，可能会破坏我们的设计。&lt;/p&gt;
&lt;p&gt;这条原则本质上强调内聚性的，内聚性本身的定义为：一个模块的组成元素之间的功能相关性。单一职责原则对内聚性的理解可以扩展为：把内聚性和引起一个模块或者类改变的作用力联系起来。&lt;/p&gt;
&lt;p&gt;那到底什么是职责？&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;SRP&lt;/code&gt;中，职责被定义为：变化的原因（&lt;code&gt;a reason for change&lt;/code&gt;）。如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责。但往往，我们很难注意到这一点，因为我们习惯于以组的形式去考虑职责。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Uncle Bob&lt;/code&gt;对职责的描述有两句原话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So a responsibility is a family of functions that serves one particular actor.（职责就是为某一个特定角色服务的一系列功能。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;An actor for a responsibility is the single source of change for that responsibility.（职责的参与者是该职责发生变化的唯一来源。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;ApplicationContext&lt;/code&gt;接口为例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15935644725524.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图是&lt;code&gt;Spring&lt;/code&gt;框架中&lt;code&gt;ApplicationContext&lt;/code&gt;接口的继承层级关系。&lt;/p&gt;
&lt;p&gt;从图中可以看到，&lt;code&gt;ApplicationContext&lt;/code&gt;继承了六个接口，其中有两个又是继承自&lt;code&gt;BeanFactory&lt;/code&gt;，一个继承自&lt;code&gt;ResourceLoader&lt;/code&gt;。这些不同的接口各自承担着不同的职责：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ApplicationEventPublisher&lt;/code&gt;：事件派发；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BeanFactory&lt;/code&gt;：&lt;code&gt;IoC&lt;/code&gt;的核心接口；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MessageSource&lt;/code&gt;：国际化消息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ResourceLoader&lt;/code&gt;：资源加载；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EnvironmentCapable&lt;/code&gt;：关联运行环境；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合&lt;code&gt;Uncle Bob&lt;/code&gt;的那两句话看&lt;code&gt;ApplicationContext&lt;/code&gt;的继承关系：上面的接口各自定义了一组组不同的功能（每一组功能对应于一个角色），而&lt;code&gt;ApplicationContext&lt;/code&gt;就是这些职责的参与者（同时会充当多个角色），&lt;code&gt;ApplicationContext&lt;/code&gt;作为某一种角色使用某一组功能时，如果功能发生了变化时，这种变化就会反映到对应定义功能的接口上去，让对应的接口也做出相应的改变。&lt;/p&gt;
&lt;h4 id=&#34;0x02-示例&#34;&gt;0x02 示例&lt;/h4&gt;
&lt;p&gt;假设有一个&lt;code&gt;Book&lt;/code&gt;类，它封装了自己的一些属性和功能，如标题、作者、总页数，以及翻页功能，同时还能打印当前页：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Book&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String title&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String author&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Integer totalPage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; title&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;author&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; author&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;totalPage&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; totalPage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String title&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String author&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer totalPage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer currPage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getTitle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; title&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getAuthor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; author&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prevPage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Integer prevPage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;currPage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;prevPage &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            prevPage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        turnToPage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;prevPage&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextPage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Integer nextPage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;currPage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nextPage &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; totalPage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            nextPage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; totalPage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        turnToPage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nextPage&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;turnToPage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer toPage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        currPage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; toPage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrentPage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current page &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; currPage &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; content&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printCurrentPage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;getCurrentPage&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码将所有的属性和功能全部定义在了&lt;code&gt;Book&lt;/code&gt;类中，我们按上面的定义来诊断这个类的封装，作为&lt;code&gt;Book&lt;/code&gt;，属性和翻页相关的方法都没有问题，这些都属于&lt;code&gt;Book&lt;/code&gt;本身的职责，也就是说，这些属性和相关的功能发生变化时，理所当然的需要修改&lt;code&gt;Book&lt;/code&gt;；但是打印这个功能有没有问题呢？&lt;/p&gt;
&lt;p&gt;比如，如果用户希望使用不同的格式打印时，我们不得不修改&lt;code&gt;Book&lt;/code&gt;类，将&lt;code&gt;Book&lt;/code&gt;类与打印的一些细节信息耦合在一起，由此可知除了&lt;code&gt;Book&lt;/code&gt;本身的属性和功能变化会导致&lt;code&gt;Book&lt;/code&gt;类的修改时，打印细节的调整也会导致&lt;code&gt;Book&lt;/code&gt;类的修改，显然，这就不符合单一职责原则了。&lt;/p&gt;
&lt;p&gt;我们应当将打印相关的操作抽取出来，封装成一个&lt;code&gt;Printable&lt;/code&gt;接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Printable&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String content&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该接口只有一个&lt;code&gt;print&lt;/code&gt;方法，参数就是要打印的内容。对于不同的格式，定义不同的实现类即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HtmlPrinter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Printable &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String content&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;html&amp;gt; %s &amp;lt;/html&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; content&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PlainTextPrinter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Printable &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String content&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;content&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过抽取&lt;code&gt;Printable&lt;/code&gt;接口，我们将打印相关的职责从&lt;code&gt;Book&lt;/code&gt;类中分离了出来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Book&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String title&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String author&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Integer totalPage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; title&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;author&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; author&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;totalPage&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; totalPage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String title&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String author&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer totalPage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer currPage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getTitle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; title&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getAuthor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; author&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prevPage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Integer prevPage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;currPage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;prevPage &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            prevPage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        turnToPage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;prevPage&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextPage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Integer nextPage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;currPage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nextPage &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; totalPage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            nextPage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; totalPage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        turnToPage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nextPage&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;turnToPage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer toPage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        currPage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; toPage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrentPage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current page &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; currPage &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; content&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Book&lt;/code&gt;类简单的调整一下。这样调整之后，打印角色的参与者自行决定要使用什么格式进行打印，它只关注使用什么格式打印传入的内容；&lt;code&gt;Book&lt;/code&gt;类角色的参与者只需要翻到需要打印的页面，再返回要页面的内容即可，它只关注你要翻到哪一页。各自职责清晰明了。&lt;/p&gt;
&lt;p&gt;更进一步，假如，我们希望能支持用户以不同的格式来将&lt;code&gt;Book&lt;/code&gt;保存到本地。同样的，如果我们将保存的功能放到&lt;code&gt;Book&lt;/code&gt;类中，又会引起同样的问题，&lt;code&gt;Book&lt;/code&gt;类需要关注到保存的细节了，保存的细节发生变化时，又会导致&lt;code&gt;Book&lt;/code&gt;类需要做出修改。因此，我们需要单独建立一个保存的接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Downloadable&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;download&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Book book&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体的格式以不同的实现类来实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EpubFormatDownloader&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Downloadable &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;download&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Book book&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Book %s download with format EPUB&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getTitle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MobiFormatDownloader&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Downloadable &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;download&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Book book&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Book %s download with format MOBI&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getTitle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们用同样的方式新建了一个&lt;code&gt;Downloadable&lt;/code&gt;接口来将下载功能分离出来。其实，这个下载功能和我们平时使用的持久化功能很相似，我们在开发时，对于持久化功能，始终会使用一层接口将具体持久化的细节隔离开，这样做最大的好处在于开发测试时，我们可以使用内存数据库来进行开发测试，实际上线时使用关系数据库或是&lt;code&gt;NoSQL&lt;/code&gt;等其它类型的数据库进行数据的持久化。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;Book&lt;/code&gt;类更像是&lt;code&gt;DDD&lt;/code&gt;中的领域对象了，将自己的属性和功能封装在一起，让自己保持高度的内聚性。&lt;/p&gt;
&lt;h4 id=&#34;0x03-总结&#34;&gt;0x03 总结&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;SRP&lt;/code&gt;是所有原则中最简单的原则之一，但也最难用好。我们早已习惯于把职责耦合在一起，用&lt;code&gt;Uncle Bob&lt;/code&gt;的话说：&lt;strong&gt;软件设计真正要做的许多内容就是发现职责并把那些职责相互分离&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其实，分离也会带来其它的问题，一个典型的问题就是代码的复杂性，看看上面的&lt;code&gt;ApplicationContext&lt;/code&gt;的继承关系图，还算比较清晰，如果下探到更具体的一些子类，如&lt;code&gt;XmlWebApplicationContext&lt;/code&gt;的继承关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15935712956046.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个继承关系已经有二十多个对象了，复杂性可想而知。&lt;/p&gt;
&lt;p&gt;在前一篇，我们已经知道这些设计原则是用来诊断我们的设计的，所以，对于&lt;code&gt;SRP&lt;/code&gt;，我们要学习去判断类的职责；职责的定义是指引起类变化的原因。有时候，我们可能会碰到一种情况：我们通过职责分离的方式分离出了两个接口，而应用程序的变化方式总是会导致这两个职责同时发生变化，这种情况下，&lt;code&gt;Uncle Bob&lt;/code&gt;的建议是不必分离，因为分离后会带来不必要的复杂性。我个人的理解就是结合具体的使用场景来权衡，不做过度设计，不做超前设计。&lt;/p&gt;
&lt;p&gt;欢迎各种交流与反馈！&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://book.douban.com/subject/1140457/&#34;&gt;敏捷软件开发&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Single-responsibility_principle&#34;&gt;Single Responsibility Principle&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://code.tutsplus.com/tutorials/solid-part-1-the-single-responsibility-principle--net-36074&#34;&gt;The Single Responsibility Principle&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/unclezhao/architecture-std&#34;&gt;示例代码仓库&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/ood-principles/">ood principles</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/solid/">SOLID</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/ood-principles/">OOD Principles</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：面向对象设计的原则</title>
                <link>https://zhaoyang.me/posts/architecture-from-source-code-ood-solid/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/architecture-from-source-code-ood-solid/</guid>
                <pubDate>Thu, 25 Jun 2020 16:06:24 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;这一篇开始会探讨一下面向对象的设计原则，这些原则是大师们多年经验的总结，这些总结乍看上去非常简单，但是如果你的功力不够你是无法理解这背后想表达的思想，如果你能理解，那可能也是经历过痛的领悟吧。对这些大师们经验成果的总结，首先需要保证正确的理解，希望我的理解没有偏离得太远。&lt;/p&gt;
&lt;p&gt;本文大纲：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写在前面的废话&lt;/li&gt;
&lt;li&gt;敏捷实践原则&lt;/li&gt;
&lt;li&gt;软件设计拙劣的表现&lt;/li&gt;
&lt;li&gt;面向对象设计的原则&lt;/li&gt;
&lt;li&gt;关于软件设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;0x01-写在前面的废话&#34;&gt;0x01 写在前面的废话&lt;/h4&gt;
&lt;p&gt;其实在最初计划写这个系列的时候，关于面向对象设计的原则就有考虑在内，最初时，自己对这几篇的内容也没有什么信心，因为我觉得自己对这些原则的理解就不够深，并且，对于理论性的知识，每个人的理解和思考都会不一样。尽管如此，我还是想挑战一下自己，计划针对这几大原则各输出一篇文章，目的是希望在输出的过程中，能够让自己对这些经典的设计原则有更加深刻的理解。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;SPI&lt;/code&gt;的几篇写完之后，为了准备这几篇，我又重新去找&lt;code&gt;Uncle Bob&lt;/code&gt;关于这几大原则的相关视频，但是挺遗憾的是，所有找到的视频都只有一部分，并没有涉及到全部的五大原则。&lt;/p&gt;
&lt;p&gt;同时，我想起了书柜里十年前购买的那本&lt;code&gt;Uncle Bob&lt;/code&gt;的大作《敏捷软件开发：原则、模式与实践》，于是便拿起这本书重读。当年之所以会购买这本书是因为入行之后头几年，几乎每天都会泡在&lt;code&gt;javaeye&lt;/code&gt;的论坛中，论坛中的大部分栏目下的文章列表都被我从头至尾的读过，包括所有参与的讨论，那几年的&lt;code&gt;javaeye&lt;/code&gt;技术氛围特别好，里面聚焦了一批业内的高手，讨论了很多前言的话题，也是在那里我头一次看到有人用&lt;code&gt;C&lt;/code&gt;通过自己的封装之后，尝试以&lt;code&gt;OO&lt;/code&gt;的方式用&lt;code&gt;C&lt;/code&gt;语言编程，直到后面两三年后，我在学习&lt;code&gt;Golang&lt;/code&gt;的时候，在云风的博客中看到云风大佬在尝试了&lt;code&gt;Golang&lt;/code&gt;之后写的一篇文章，我才知道，当年在&lt;code&gt;javaeye&lt;/code&gt;那个用&lt;code&gt;C&lt;/code&gt;语言尝试面向对象编程的就是他。&lt;/p&gt;
&lt;p&gt;扯远了，回到&lt;code&gt;Uncle Bob&lt;/code&gt;的这本书。当年买回来后，我断断续续的看过几回，因为自己的功力不够，每次拿起没多久就放下了，后面的一些年里也偶尔拿起来过，但也没有认真的看过。严格的说，也不算是没有认真看，而是当年的我，入行还浅，当面对各种新鲜的名词：敏捷、&lt;code&gt;XP&lt;/code&gt;、&lt;code&gt;Scrum&lt;/code&gt;、结对编程、测试驱动开发、充血模型、持续集成等等的时候，自己的注意力全在这些术上了，因为自己的功力太浅，没办法拨开云雾去关注这些名词背后的道。&lt;/p&gt;
&lt;p&gt;这交拿起这本书的时候，读着读着，感觉自己有了一些不一样的感受。以前看到敏捷实践的那些原则，根本没办法明白到底是在说什么，现在看到这些原则，读到每一条的时候，脑海里似乎都能闪现出一些这些年所经历过的一些反面教材的画面，似乎现在明白了为什么要总结出这些原则。&lt;/p&gt;
&lt;p&gt;同时，对于每一条面向对象设计的原则，以前读过不知道多少次的东西，这次阅读时似乎感受不太一样了。&lt;/p&gt;
&lt;p&gt;经典的书每次读都会有不同的感受，接下来的几篇权当记录一下到今天为止我个人对面向对象的五大设计原则的浅薄理解吧。&lt;/p&gt;
&lt;h4 id=&#34;0x02-敏捷实践原则&#34;&gt;0x02 敏捷实践原则&lt;/h4&gt;
&lt;p&gt;敏捷开发倡导以微小增量的方式构建软件，在每次迭代中，团队改进系统设计，使设计尽可能适合于当前系统，并使它尽可能地好。&lt;/p&gt;
&lt;p&gt;敏捷实践的&lt;code&gt;12&lt;/code&gt;条原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们最优先要做的是通过尽早的、持续的交付有价值的软件来使客户满意。&lt;/li&gt;
&lt;li&gt;即使到了开发的后期，也欢迎改变需求。敏捷过程利用变化来为客户创造竞争优势。&lt;/li&gt;
&lt;li&gt;经常性地交付可以工作的软件，交付的间隔可以从几周到几个月，交付的时间间隔越短越好。&lt;/li&gt;
&lt;li&gt;在整个项目开发期间，业务人员和开发人员必须天天都在一起工作。&lt;/li&gt;
&lt;li&gt;围绕被激励起来的个人来构建项目。给他们提供所需要的环境和支持，并且信任他们能够完成工作。&lt;/li&gt;
&lt;li&gt;在团队内部，最具有效果并且富有效率的传递信息的方法，就是面对面的交谈。&lt;/li&gt;
&lt;li&gt;工作的软件是首要的进度度量标准。&lt;/li&gt;
&lt;li&gt;敏捷过程提供可持续的开发速度。责任人、开发者和用户应该能够保持一个长期的、恒定的开发速度。&lt;/li&gt;
&lt;li&gt;不断地关注优秀的技能和好的设计会增强敏捷能力。&lt;/li&gt;
&lt;li&gt;简单--使未完成的工作最大化的艺术--是根本的。&lt;/li&gt;
&lt;li&gt;最好的架构、需求和设计出自于自组织的团队。&lt;/li&gt;
&lt;li&gt;每隔一定时间，团队会在如何才能更有效地工作方面进行反省，然后相应地对自己的行为进行调整。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里提到自组织的团队，那什么是自组织的团队？&lt;/p&gt;
&lt;p&gt;敏捷团队就是自组织的团队，任务不是从外部分配给单个团队成员，而是分配给整个团队，然后再由团队来确定完成任务的最好方法。团队的成员共同来解决项目中所有方面的问题。每一个成员都具有项目中所有方面的参与权力。不存在单一的团队成员对系统架构、需求或者测试负责的情况。整个团队共同承担那些责任，每一个团队成员都能够影响它们。&lt;/p&gt;
&lt;p&gt;我个人觉得这些原则从一个简洁但比较全面的角度去描述了如何去做好一个项目的项目管理工作。我从这些原则里读到了：项目目标、需求变更、持续交付、持续验收、团队协作、面对面沟通、快速迭代、简单设计、过程改进等等。按照这些原则可以让我们的开发工作呈螺旋式上升，避免与正确的目标渐行渐远。&lt;/p&gt;
&lt;h4 id=&#34;0x03-软件设计拙劣的表现&#34;&gt;0x03 软件设计拙劣的表现&lt;/h4&gt;
&lt;p&gt;软件腐化（设计拙劣）的表现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;僵化性（&lt;code&gt;Rigidity&lt;/code&gt;）：很难对系统进行改动，因为每个改动都会迫使许多对系统其他部分的其他改动；&lt;/li&gt;
&lt;li&gt;脆弱性（&lt;code&gt;Fragility&lt;/code&gt;）：对系统的改动会导致系统中和改动的地方在概念上无关的许多地方出现问题；&lt;/li&gt;
&lt;li&gt;牢固性（&lt;code&gt;Immobility&lt;/code&gt;）：很难解开系统的纠结，使之成为一些可在其他系统中重用的组件；&lt;/li&gt;
&lt;li&gt;粘滞性（&lt;code&gt;Viscosity&lt;/code&gt;）：做正确的事情比做错误的事情要困难；&lt;/li&gt;
&lt;li&gt;不必要的复杂性（&lt;code&gt;Needless Complexity&lt;/code&gt;）：设计中包含有不具任何直接好处的基础结构；&lt;/li&gt;
&lt;li&gt;不必要的重复（&lt;code&gt;Needless Repetition&lt;/code&gt;）：设计中包含有重复的结构，而该重复的结构本可以使用单一的抽象进行统一；&lt;/li&gt;
&lt;li&gt;晦涩性（&lt;code&gt;Opacity&lt;/code&gt;）：很难阅读、理解，没有很好地表现出意图；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些翻译过来的名词有些晦涩难懂，但可以通过后面的解释来理解它们所表达的意思。它们主要是描述一些不好的软件设计的表现，这些表现意味着设计出的软件推动了灵活性、可维护性以及可重用性。&lt;/p&gt;
&lt;h4 id=&#34;0x04-面向对象设计的原则&#34;&gt;0x04 面向对象设计的原则&lt;/h4&gt;
&lt;p&gt;面向对象设计的原则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一职责原则（&lt;code&gt;SRP&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;开放-封闭原则（&lt;code&gt;OCP&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;里氏替换原则（&lt;code&gt;LSP&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;依赖倒置原则（&lt;code&gt;DIP&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;接口隔离原则（&lt;code&gt;ISP&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些原则是软件工程数十年的经验成果。面向对象设计的原则有助于开发人员去诊断设计中的问题，并为当前的需求构建出最好的设计。&lt;/p&gt;
&lt;p&gt;但是，同时也要明白，仅仅因为是一个原则就无条件的去遵循它的做法也是错误的，过分遵循这些原则会导致不必要的复杂性。&lt;/p&gt;
&lt;h4 id=&#34;0x05-关于软件设计&#34;&gt;0x05 关于软件设计&lt;/h4&gt;
&lt;p&gt;什么是软件设计？&lt;/p&gt;
&lt;p&gt;通常，我们可能以为设计就是一级和代码分离的&lt;code&gt;UML&lt;/code&gt;图。一组&lt;code&gt;UML&lt;/code&gt;图也许描绘了设计的一部分，但是它不是设计。软件项目的设计是一个抽象的概念，它和程序的概貌、结构以及每一个模块、类和方法的详细结构有关。我们可以使用许多不同的媒介（如&lt;code&gt;UML&lt;/code&gt;、文档等）去描绘它，但是它最终体现为源代码。即：&lt;strong&gt;源代码就是设计&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;敏捷团队依靠变化来获取活力，团队几乎不进行预先设计，因此，不需要一个成熟的初始设计。他们更愿意&lt;strong&gt;保持系统设计尽可能的干净、简单，并使用许多单元测试和验收测试作为支援&lt;/strong&gt;。这&lt;strong&gt;保持了设计的灵活性、易于理解性&lt;/strong&gt;。团队利用这种灵活性，&lt;strong&gt;持续地改进设计&lt;/strong&gt;，以便于&lt;strong&gt;每次迭代结束所生成的系统都具有最适合于那次迭代中需求的设计&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;敏捷开发人员致力于保持设计尽可能地适当、干净。这不是一个随便的或者暂时性的承诺。敏捷开发人员不是每几周才清洁他们的设计。而是每天、每小时、甚至每分钟都要保持软件尽可能地干净、简单并富有表现力。&lt;/p&gt;
&lt;p&gt;设计必须要保持干净、简单，并且由于&lt;strong&gt;源代码是设计最重要的表示&lt;/strong&gt;，所以它同样要保持干净。作为软件开发人员，不能忍受代码腐化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;敏捷设计是一个过程&lt;/strong&gt;，不是一个事件。它&lt;strong&gt;是一个持续的应用原则、模式以及实践来改进软件的结构和可读性的过程&lt;/strong&gt;。它&lt;strong&gt;致力于保持系统设计在任何时间都尽可能的简单、干净以及富有表现力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;作为开发人员，我们应当：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遵循敏捷实践去发现问题；&lt;/li&gt;
&lt;li&gt;应用设计原则去诊断问题；&lt;/li&gt;
&lt;li&gt;应用适当的设计模式去解决问题；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;软件开发的这三个方面间的相互作用就是设计。&lt;/p&gt;
&lt;h4 id=&#34;0x06-总结&#34;&gt;0x06 总结&lt;/h4&gt;
&lt;p&gt;对我个人而言，上面的三点要求让我有种菩提灌顶的感觉。&lt;/p&gt;
&lt;p&gt;回顾这些年下来，对于敏捷实践的原则一直尽量在项目开发的过程中去做到这些，但内心一直有一种有形无神的感觉。包括这些年经历过的一些号称敏捷开发的团队也是一样，多数情况下都是使用了一些敏捷开发的工具或手段，本质上都有形无实。反思可能的原因：没有思考过为什么要使用敏捷开发实践。比如，为什么要持续交付且尽可能早的交付？为什么要迭代开发？为什么要过程改进？为什么要单元测试和验收测试？它们各解决什么问题？因为践行这些敏捷实践的原则可以帮助我们快速发现问题。&lt;/p&gt;
&lt;p&gt;再看面向对象设计的原则，这五条原则这些年可以说不知道看过多少次，偶尔回看的时候会有些许的感悟，但一直只是肤浅的去从表面去理解这些设计原则，上面要求的第二点明确的告诉我们，这些设计原则是用来诊断我们设计中的问题的，真是一语惊醒梦中人。明白了它们的用途，再回头看这些原则，比如单一职责原则，反问自己真的理解单一职责原则吗？什么是职责？如何理解这里的单一？在设计时如何去平衡避免过度设计？&lt;/p&gt;
&lt;p&gt;还有设计模式，最早的《&lt;code&gt;Java&lt;/code&gt;与模式》那本比砖头还厚的书（我从头至尾看过一遍）以及后面其他一些关于设计模式的书，书看过不少，代码也写过不少，从最早的为了模式而使用设计模式，到后面的心中无模式，真正把设计模式用好的时候不多。反思原因：每种不同的设计模式都是用来解决一些特定的问题的，要解决问题首先就要识别出问题，那如何正确的识别出问题呢？这就要用到前面的设计原则了。如果都不能正确的识别出问题，那能用好设计模式吗？&lt;/p&gt;
&lt;p&gt;之所以说前面的三点要求让我感觉茅塞顿开，对我而言，过去都是从单个的角度去看去理解敏捷开发、设计原则和设计模式，没有从根本上真正的理解它们的用途，更没有思考过这三者之间的关系。&lt;/p&gt;
&lt;p&gt;接下来会针对五大设计原则逐条的分析理解。&lt;/p&gt;
&lt;p&gt;期待各种交流与反馈！&lt;/p&gt;
&lt;h5 id=&#34;reference&#34;&gt;Reference:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://book.douban.com/subject/1140457/&#34;&gt;敏捷软件开发&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://blog.codingnow.com/2010/03/object_oriented_programming_in_c.html&#34;&gt;云风：我所偏爱的C语言面向对象编程范式&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/ood-principles/">ood principles</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/solid/">SOLID</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/ood-principles/">OOD Principles</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：SPI之Dubbo实现</title>
                <link>https://zhaoyang.me/posts/architecture-from-source-code-dubbo-spi/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/architecture-from-source-code-dubbo-spi/</guid>
                <pubDate>Mon, 22 Jun 2020 16:06:24 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;TL;DR&lt;/p&gt;
&lt;p&gt;前面两篇已经分析了&lt;code&gt;JDK&lt;/code&gt;和&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;的实现，今天将分析著名的&lt;code&gt;RPC&lt;/code&gt;框架&lt;code&gt;Dubbo&lt;/code&gt;中的&lt;code&gt;SPI&lt;/code&gt;实现机制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dubbo&lt;/code&gt;的实现博两家之长，并在实现上更进一步改进，并且基于此，&lt;code&gt;Dubbo&lt;/code&gt;框架对开发者十分的友好，几乎所有的组件都给开发者预留出了扩展点，方便开发者自行实现不同的扩展，真正的实现了微内核+插件机制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dubbo&lt;/code&gt;框架的架构设计非常之美，本篇是读源码学架构设计之&lt;code&gt;SPI&lt;/code&gt;分析的最后一篇，后面我会从架构设计的其它方面来进一步分析&lt;code&gt;Spring&lt;/code&gt;和&lt;code&gt;Dubbo&lt;/code&gt;，以及&lt;code&gt;Mybatis&lt;/code&gt;等框架的源码，尽可能的全方位去感悟这些框架中的优秀设计。&lt;/p&gt;
&lt;p&gt;本篇内容大纲：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Dubbo&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;实现&lt;/li&gt;
&lt;li&gt;与&lt;code&gt;JDK&lt;/code&gt;和&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;的差异&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dubbo&lt;/code&gt;中&lt;code&gt;SPI&lt;/code&gt;的应用&lt;/li&gt;
&lt;li&gt;基于&lt;code&gt;SPI&lt;/code&gt;实现&lt;code&gt;Dubbo&lt;/code&gt;扩展&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;0x01-dubbo的spi实现&#34;&gt;0x01 Dubbo的SPI实现&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Dubbo&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;实现，服务的定义必须是用注解&lt;code&gt;@SPI&lt;/code&gt;标注的类，该注解可以接收一个&lt;code&gt;String&lt;/code&gt;类型的参数，用于指定该服务的默认实现。&lt;/p&gt;
&lt;p&gt;服务加载器是&lt;code&gt;ExtensionLoader&amp;lt;T&amp;gt;.class&lt;/code&gt;，它默认会从三个路径下加载资源文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;META-INF/services/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;META-INF/dubbo/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;META-INF/dubbo/internal/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;资源文件的命名与&lt;code&gt;JDK&lt;/code&gt;中&lt;code&gt;SPI&lt;/code&gt;的命名规则相同，必须是服务接口类的全路径类名，内容为&lt;code&gt;key=value&lt;/code&gt;的形式，其中&lt;code&gt;key&lt;/code&gt;是配置名（就是&lt;code&gt;@SPI&lt;/code&gt;注解可以接收的那个参数值），&lt;code&gt;value&lt;/code&gt;是扩展实现类的全路径类名，同一个文件中可以有多个实现，每行定义一个。&lt;/p&gt;
&lt;p&gt;例如，&lt;code&gt;dubbo-common&lt;/code&gt;模块下，&lt;code&gt;com.alibaba.dubbo.common.compiler.Compiler&lt;/code&gt;服务的资源文件的内容为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;adaptive=com.alibaba.dubbo.common.compiler.support.AdaptiveCompiler
jdk=com.alibaba.dubbo.common.compiler.support.JdkCompiler
javassist=com.alibaba.dubbo.common.compiler.support.JavassistCompiler
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里定义了三个实现，其中&lt;code&gt;adaptive&lt;/code&gt;、&lt;code&gt;jdk&lt;/code&gt;、&lt;code&gt;javassist&lt;/code&gt;分别为配置名，对应的值为实现类的全路径类名。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Compiler&lt;/code&gt;接口的定义中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Compiler. (SPI, Singleton, ThreadSafe)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@SPI&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javassist&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Compiler&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Compile java source code.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param code        Java source code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param classLoader classloader
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return Compiled class
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; compile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String code&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ClassLoader classLoader&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;@SPI&lt;/code&gt;注解指定了参数&lt;code&gt;javassist&lt;/code&gt;，即，默认的实现为&lt;code&gt;com.alibaba.dubbo.common.compiler.support.JavassistCompiler&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;现在，&lt;code&gt;SPI&lt;/code&gt;需要的四个角色已经齐了。&lt;/p&gt;
&lt;p&gt;除了&lt;code&gt;@SPI&lt;/code&gt;注解，&lt;code&gt;Dubbo&lt;/code&gt;还提供了另外两个注解：&lt;code&gt;@Adaptive&lt;/code&gt;和&lt;code&gt;@Activate&lt;/code&gt;，这三个注解的用途分别是什么呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@SPI&lt;/code&gt;：主要用于接口上。扩展接口的标识注解，接收默认实现的配置名参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Adaptive&lt;/code&gt;：主要用于方法上。用于指定哪个目标扩展会被注入，目标扩展的名称取决于&lt;code&gt;URL&lt;/code&gt;的参数值和这个注解的参数中指定的参数值。如果没有找到指定的参数，则会使用默认的扩展来注入（在&lt;code&gt;@SPI&lt;/code&gt;中指定）。如果配置了多个参数，则会按配置的参数名的顺序依次从&lt;code&gt;URL&lt;/code&gt;中查找对应的参数值，一旦找到就会停止查找并进行注入，如果全部找完都没有找到，则会抛出异常。如果服务定义接口的注解&lt;code&gt;@SPI&lt;/code&gt;中没有指定默认的配置名，则会按一定的规则自动生成一个（具体的规则是：将类名按大写字母做切分，然后转为全小写，再用&lt;code&gt;.&lt;/code&gt;号将切分后转为小写的字符按之前的顺序连接起来，如&lt;code&gt;YyyInvokerWrapper&lt;/code&gt;则会转为&lt;code&gt;yyy.invoker.wrapper&lt;/code&gt;），并且会用这个名称作为参数名去从&lt;code&gt;URL&lt;/code&gt;中查找参数值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Activate&lt;/code&gt;：主要用于扩展实现类上。用于根据给定的条件自动激活确定的扩展，具体的条件通过注解的参数来指定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Dubbo&lt;/code&gt;的服务提供者&lt;code&gt;ExtensionLoader&lt;/code&gt;结合这三个注解，极大的增强了&lt;code&gt;SPI&lt;/code&gt;的功能。具体来说，&lt;code&gt;Dubbo&lt;/code&gt;中的扩展点有以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩展点自动包装&lt;/li&gt;
&lt;li&gt;扩展点自动装配&lt;/li&gt;
&lt;li&gt;扩展点自适应&lt;/li&gt;
&lt;li&gt;扩展点自动激活&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们一个一个分析&lt;code&gt;Dubbo&lt;/code&gt;是如何来实现这些功能的。&lt;/p&gt;
&lt;p&gt;因为这些特性是在扩展伴随着扩展的加载过程而体现出来的，&lt;code&gt;Dubbo&lt;/code&gt;提供了三个注解，对应于三个加载的方法，我们逐个分析对应于每一个注解的扩展加载方法，来看看在这些过程中，&lt;code&gt;Dubbo&lt;/code&gt;是如何实现上面这些特性的。&lt;/p&gt;
&lt;p&gt;对应于三个注解的三个扩展加载方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getExtension(String name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getAdaptiveExtension()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getActivateExtension(URL url, String key)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三个方法都定义在&lt;code&gt;ExtensionLoader&lt;/code&gt;类中，这个类是一个泛型类，构造方法被&lt;code&gt;private&lt;/code&gt;修饰掉，工厂方法为&lt;code&gt;getExtensionLoader(Class&amp;lt;T&amp;gt; type)&lt;/code&gt;，具体实现如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15929612715481.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从上面的代码可以看到，&lt;code&gt;Dubbo&lt;/code&gt;中扩展的定义必须是接口，同时，服务接口必须使用&lt;code&gt;SPI&lt;/code&gt;注解标注，否则会抛出异常。&lt;/p&gt;
&lt;p&gt;接下来会看到，对于所有的&lt;code&gt;Class&amp;lt;T&amp;gt; type&lt;/code&gt;，都会首先从本地缓存中去查找是否已经创建过&lt;code&gt;ExtensionLoader&amp;lt;T&amp;gt;&lt;/code&gt;，如果没有，才会新创建，并且会通过&lt;code&gt;CAS&lt;/code&gt;操作放入到本地缓存（&lt;code&gt;ConcurrentMap&lt;/code&gt;）中。&lt;/p&gt;
&lt;h5 id=&#34;getextensionstring-name分析&#34;&gt;getExtension(String name)分析&lt;/h5&gt;
&lt;p&gt;现在来分析前面的三个方法，首先看第一个：&lt;code&gt;getExtension(String name)&lt;/code&gt;，这个方法是用来根据传入的&lt;code&gt;name&lt;/code&gt;名称查找扩展的，如果没有找到会抛出异常。具体实现如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15929609310773.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;name&lt;/code&gt;查找扩展时，首先也会从本地缓存&lt;code&gt;cachedInstances&lt;/code&gt;中查找，缓存中存放时会使用&lt;code&gt;Holder&lt;/code&gt;类进行装饰，默认没有查找到时，会创建一个新的&lt;code&gt;Holder&lt;/code&gt;对象，并以当前的&lt;code&gt;name&lt;/code&gt;为&lt;code&gt;key&lt;/code&gt;，新创建的&lt;code&gt;Holder&lt;/code&gt;对象为&lt;code&gt;value&lt;/code&gt;，组成键值对通过&lt;code&gt;CAS&lt;/code&gt;的方式保存到本地缓存中。&lt;/p&gt;
&lt;p&gt;然后接下来就从&lt;code&gt;holder&lt;/code&gt;中去拿对应&lt;code&gt;name&lt;/code&gt;的扩展，如果没有，则通过双重检查的方式来创建（类似于双重检查方式的单例模式，但要注意的是，局部变量的引用需要用&lt;code&gt;volatile&lt;/code&gt;修饰，来保证对象创建的过程中，不会发生指令重排序），这里同步的是&lt;code&gt;holder&lt;/code&gt;对象，我们查看&lt;code&gt;Holder&lt;/code&gt;类的代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15929622720718.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意这里的&lt;code&gt;value&lt;/code&gt;被&lt;code&gt;volatile&lt;/code&gt;修饰，所以上面的双重检查方式可以确保只会创建一次，且创建对象的过程不会发生指令重排序。&lt;/p&gt;
&lt;p&gt;接着看&lt;code&gt;createExtension&lt;/code&gt;方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15929626363613.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先调用&lt;code&gt;getExtensionClasses()&lt;/code&gt;方法来获取扩展类的&lt;code&gt;Class&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15929628265248.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里又是同样的套路，将&lt;code&gt;Class&lt;/code&gt;缓存到本地的&lt;code&gt;cachedClassed&lt;/code&gt;缓存中，同样是双重检查（注意&lt;code&gt;cachedClasses&lt;/code&gt;的类型，也是一个&lt;code&gt;Holder&lt;/code&gt;类型），继续看&lt;code&gt;loadExtensionClasses()&lt;/code&gt;方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15929629433380.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里会通过反射去查看当前类型的&lt;code&gt;ExtensionLoader&lt;/code&gt;（在&lt;code&gt;getExtensionLoader()&lt;/code&gt;方法中传入的参数的类型）是否使用了&lt;code&gt;SPI&lt;/code&gt;注解标注，并且会判断是否指定了默认值（即指定默认的配置名，这个配置名就是资源文件中配置的键值对的键）；然后会从三个目录路径去查找扩展的实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;loadDirectory&lt;/code&gt;方法的具体实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15929632125699.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;查找到匹配的文件之后，会进一步进行解析，即&lt;code&gt;loadResource()&lt;/code&gt;方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15929633276278.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里会对每个文件按照先前定义的规则进行解析，找到了配置的扩展实现类时，就会调用&lt;code&gt;loadClass()&lt;/code&gt;方法进行处理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loadClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; extensionClasses&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt; resourceURL&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; clazz&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; NoSuchMethodException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;type&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAssignableFrom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clazz&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error when load extension class(interface: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    type &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, class line: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; clazz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;), class &amp;#34;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; clazz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is not subtype of interface.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clazz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAnnotationPresent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Adaptive&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cachedAdaptiveClass &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                cachedAdaptiveClass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clazz&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;cachedAdaptiveClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clazz&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;More than 1 adaptive class found: &amp;#34;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cachedAdaptiveClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; clazz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;isWrapperClass&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clazz&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            Set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; wrappers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cachedWrapperClasses&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;wrappers &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                cachedWrapperClasses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConcurrentHashSet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;();&lt;/span&gt;
                wrappers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cachedWrapperClasses&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            wrappers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clazz&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            clazz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getConstructor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findAnnotationName&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clazz&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No such extension name for the class &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; clazz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; in the config &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; resourceURL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NAME_SEPARATOR&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;names &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                Activate activate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clazz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAnnotation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Activate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;activate &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    cachedActivates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;names&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;],&lt;/span&gt; activate&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; names&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;cachedNames&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;containsKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clazz&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        cachedNames&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clazz&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                    Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; extensionClasses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        extensionClasses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; clazz&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; clazz&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Duplicate extension &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; type&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; name &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; on &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; and &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; clazz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先会判断有没有实现扩展接口，然后会检查是否使用&lt;code&gt;@Adaptive&lt;/code&gt;注解标注，如果有，还会进一步判断&lt;code&gt;cachedAdaptiveClass&lt;/code&gt;有没有赋值，如果已经赋值，说明检测到了多个默认实现，此时会抛出异常，否则会将默认实现保存在&lt;code&gt;cachedAdaptiveClass&lt;/code&gt;变量中。&lt;/p&gt;
&lt;p&gt;如果没有使用&lt;code&gt;@Adaptive&lt;/code&gt;注解标注，则会进一步判断实现类是不是扩展接口的包装类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isWrapperClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; clazz&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            clazz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getConstructor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;type&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NoSuchMethodException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;判断的标准就是实现类有没有定义针对扩展接口的构造函数，如果有，则会被定义会包装类，否则就不是包装类。&lt;/p&gt;
&lt;p&gt;如果判断结果是包装类，则会缓存到本地缓存&lt;code&gt;cachedWrapperClasses&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;如果也不是包装类，则继续走最后的&lt;code&gt;else&lt;/code&gt;分支。&lt;/p&gt;
&lt;p&gt;这里首先会对配置名（资源文件中定义的键值对的键）进行空判断，里面兼容了过期的注解&lt;code&gt;@Extension&lt;/code&gt;；接着，会对配置名按逗号进行分割（这也就是说资源文件中配置扩展的实现类时，配置名可以配置多个，用逗号隔开即可），当配置名存在时，还会先检查实现类有没有被&lt;code&gt;@Activate&lt;/code&gt;注解标注，如果有，则会将分割后的第一个配置名和&lt;code&gt;@Activate&lt;/code&gt;注解信息作为键值对，缓存在本地缓存&lt;code&gt;cachedActivates&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;接着，对分割后的配置名列表循环处理，首先判断扩展实现类的配置名有没有缓存在本地缓存中，如果没有，则缓存到本地缓存&lt;code&gt;cachedNames&lt;/code&gt;中（这里也只会缓存第一个）；然后如果实现类和配置名还没有存入&lt;code&gt;loadDirectory()&lt;/code&gt;方法传入的&lt;code&gt;Map&lt;/code&gt;对象的话，就将解析到的配置名和实现类的&lt;code&gt;Class&lt;/code&gt;作为键值对，放入这个&lt;code&gt;Map&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;到这里，对于当前&lt;code&gt;ExtensionLoader&amp;lt;T&amp;gt;&lt;/code&gt;类型的所有扩展实现已经解析完成，我们回到&lt;code&gt;createExtension()&lt;/code&gt;方法的第一行：&lt;code&gt;getExtensionClasses().get(name)&lt;/code&gt;，这里会从上面解析的结果&lt;code&gt;Map&lt;/code&gt;中按传入的配置名进行查找对应的实现类的&lt;code&gt;Class&lt;/code&gt;，如果没有找到就会抛出异常。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; T &lt;span style=&#34;color:#a6e22e&#34;&gt;createExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; clazz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getExtensionClasses&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clazz &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; findException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            T instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; EXTENSION_INSTANCES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clazz&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                EXTENSION_INSTANCES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;putIfAbsent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clazz&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; clazz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
                instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; EXTENSION_INSTANCES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clazz&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            injectExtension&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            Set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; wrapperClasses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cachedWrapperClasses&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;wrapperClasses &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;wrapperClasses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; wrapperClass &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; wrapperClasses&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; injectExtension&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; wrapperClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getConstructor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;type&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Throwable t&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Extension instance(name: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, class: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    type &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)  could not be instantiated: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果找到了，接下来又是从本地缓存中去查找扩展实例对象，没有找到缓存才通过&lt;code&gt;CAS&lt;/code&gt;方式使用&lt;code&gt;class.newInstance()&lt;/code&gt;来创建新的实例，同时缓存到本地。接下来有一行调用：&lt;code&gt;injectExtension(instance)&lt;/code&gt;，具体实现为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; T &lt;span style=&#34;color:#a6e22e&#34;&gt;injectExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;T instance&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;objectFactory &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Method method &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMethods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;startsWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;set&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameterTypes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 1
                            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; Modifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isPublic&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getModifiers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                         * Check {@link DisableInject} to see if we need auto injection for this property
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                         */&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAnnotation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DisableInject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                        Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; pt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameterTypes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            String property &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 3 &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;substring&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 4&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toLowerCase&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;substring&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                            Object object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; objectFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pt&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; property&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;object &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                                method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;invoke&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; object&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fail to inject via method &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
                                    &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; of interface &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; type&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先对&lt;code&gt;objectFactory&lt;/code&gt;进行了为空判断，这个变量是在&lt;code&gt;ExtensionLoader&lt;/code&gt;的构造方法中初始化的，只要&lt;code&gt;getExtensionLoader(Class&amp;lt;T&amp;gt;)&lt;/code&gt;方法传入的类型不是&lt;code&gt;ExtensionFactory&lt;/code&gt;类型，则会调用&lt;code&gt;ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension())&lt;/code&gt;来初始化，具体过程我们稍后再分析，这个方法也是我们前面要分析的三个方法之一。&lt;/p&gt;
&lt;p&gt;我们回到&lt;code&gt;injectExtension()&lt;/code&gt;方法，&lt;code&gt;objectFactory&lt;/code&gt;不为空时，会反射获取传入的对象实例的所有方法列表，然后判断所有以&lt;code&gt;set&lt;/code&gt;开头（即&lt;code&gt;setter&lt;/code&gt;方法），且只有一个参数，同时是使用&lt;code&gt;public&lt;/code&gt;修饰的方法；找到后，继续判断，要求方法没有被&lt;code&gt;@DisableInject&lt;/code&gt;注解标注，然后将找到的方法的参数类型取出来，通过分割&lt;code&gt;setter&lt;/code&gt;方法，找到具体的属性名&lt;code&gt;property&lt;/code&gt;，然后使用参数类型和属性名去&lt;code&gt;objectFactory&lt;/code&gt;中查找有没有对应的扩展对象，如果有，则反射调用&lt;code&gt;setter&lt;/code&gt;方法进行注入，&lt;strong&gt;这个过程就是&lt;code&gt;Dubbo&lt;/code&gt;框架对扩展的自动装配的实现&lt;/strong&gt;。（&lt;code&gt;objectFactory&lt;/code&gt;对象初始化时，也是通过服务加载器&lt;code&gt;ExtensionLoader&lt;/code&gt;来加载的，所以，对于查找到的扩展实现会缓存在对应的&lt;code&gt;ExtensionLoader&lt;/code&gt;实例中）&lt;/p&gt;
&lt;p&gt;继续回到&lt;code&gt;createExtension()&lt;/code&gt;方法，接下来，如果之前解析时，找到的当前类型的&lt;code&gt;Wrapper&lt;/code&gt;集合不为空，则会循环对&lt;code&gt;Wrapper&lt;/code&gt;类进行注入并实例化，这里要注意循环中的包装实例化代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; wrapperClass &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; wrapperClasses&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; injectExtension&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; wrapperClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getConstructor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;type&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里包装时，&lt;strong&gt;传入的参数是&lt;code&gt;instance&lt;/code&gt;，包装实例化完成后又重新赋值给了&lt;code&gt;instance&lt;/code&gt;进行下一次包装，直到所有的包装类全部包装完成&lt;/strong&gt;，最后把所有包装类包装后的实例化对象作为结果返回出去。&lt;strong&gt;这也是&lt;code&gt;Dubbo&lt;/code&gt;框架对扩展的自动包装的实现&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;createExtension()&lt;/code&gt;方法的执行就到此结束了，我们再转回到&lt;code&gt;getExtension(String name)&lt;/code&gt;方法，在创建了扩展实例后，将实例放到了之前创建的空&lt;code&gt;Holder&lt;/code&gt;对象中，到这里&lt;code&gt;getExtension(String name)&lt;/code&gt;方法就处理完成了。&lt;/p&gt;
&lt;p&gt;接下来分析&lt;code&gt;getAdaptiveExtension()&lt;/code&gt;方法。&lt;/p&gt;
&lt;h5 id=&#34;getadaptiveextension分析&#34;&gt;getAdaptiveExtension()分析&lt;/h5&gt;
&lt;p&gt;方法的具体实现如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T &lt;span style=&#34;color:#a6e22e&#34;&gt;getAdaptiveExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Object instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cachedAdaptiveInstance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;createAdaptiveInstanceError &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cachedAdaptiveInstance&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cachedAdaptiveInstance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; createAdaptiveExtension&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                            cachedAdaptiveInstance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Throwable t&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                            createAdaptiveInstanceError &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fail to create adaptive instance: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fail to create adaptive instance: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; createAdaptiveInstanceError&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; createAdaptiveInstanceError&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样是&lt;code&gt;Holder&lt;/code&gt;包装的本地缓存&lt;code&gt;cachedAdaptiveInstance&lt;/code&gt;配合双重检查的方式创建&lt;code&gt;Adaptive&lt;/code&gt;扩展，我们直接看&lt;code&gt;createAdaptiveExtension()&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; T &lt;span style=&#34;color:#a6e22e&#34;&gt;createAdaptiveExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; injectExtension&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; getAdaptiveExtensionClass&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can not create adaptive extension &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; type &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, cause: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该方法直接对&lt;code&gt;getAdaptiveExtensionClass()&lt;/code&gt;创建的实例对象进行包装并返回，我们进一步看&lt;code&gt;getAdaptiveExtensionClass()&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; getAdaptiveExtensionClass&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        getExtensionClasses&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cachedAdaptiveClass &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cachedAdaptiveClass&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cachedAdaptiveClass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; createAdaptiveExtensionClass&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;getExtensionClasses()&lt;/code&gt;方法前面已经分析过，会查找并解析所有的扩展实现类，并将查找到的结果缓存到本地。接着就是判断&lt;code&gt;cachedAdaptiveClass&lt;/code&gt;是否为&lt;code&gt;null&lt;/code&gt;，这个&lt;code&gt;cachedAdaptiveClass&lt;/code&gt;我们在前面分析&lt;code&gt;loadClass()&lt;/code&gt;方法时，有一个条件分支就是判断扩展实现类是否有被&lt;code&gt;@Adaptive&lt;/code&gt;注解标注的，有的话会赋值给&lt;code&gt;cachedAdaptiveClass&lt;/code&gt;变量，有多个会抛出异常。在这里，如果前面已经检测到了，就会直接返回这个结果，如果没有，则继续调用&lt;code&gt;createAdaptiveExtensionClass()&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;这个方法的代码很长，就不贴上来了，首先，它会获取当前&lt;code&gt;ExtensionLoader&amp;lt;T&amp;gt;&lt;/code&gt;绑定的类型的所有方法列表，依次判断方法有没有被&lt;code&gt;@Adaptive&lt;/code&gt;注解标注，如果有，则会给它生成一个&lt;code&gt;Adaptive&lt;/code&gt;类，使用一个&lt;code&gt;StringBuilder&lt;/code&gt;类来存放该类的代码，最后将生成的&lt;code&gt;Adaptive&lt;/code&gt;类的代码以&lt;code&gt;String&lt;/code&gt;类型返回。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;createAdaptiveExtensionClass()&lt;/code&gt;方法在拿到了生成的类的代码后，使用&lt;code&gt;ExtensionLoader&lt;/code&gt;的&lt;code&gt;classLoader&lt;/code&gt;对象和&lt;code&gt;Compiler.class&lt;/code&gt;扩展的默认实现&lt;code&gt;JavassistCompiler&lt;/code&gt;在内存中对生成的类代码进行编译，得到对应的&lt;code&gt;Class&lt;/code&gt;文件的内容。&lt;/p&gt;
&lt;p&gt;回到&lt;code&gt;createAdaptiveExtension()&lt;/code&gt;方法，拿到了&lt;code&gt;Adaptive&lt;/code&gt;类的&lt;code&gt;Class&lt;/code&gt;后，通过反射生成了该类的实例，然后将该实例对象作为参数传给&lt;code&gt;injectExtension()&lt;/code&gt;方法进行依赖注入。&lt;strong&gt;这个处理过程就是&lt;code&gt;Dubbo&lt;/code&gt;框架对扩展的自适应的实现&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getAdaptiveExtension()&lt;/code&gt;的作用就是利用装饰模式对&lt;code&gt;extension&lt;/code&gt;接口&lt;code&gt;class&lt;/code&gt;进行包装，然后生成一个以&lt;code&gt;$Adaptive&lt;/code&gt;结尾的装饰类，该类会实现用&lt;code&gt;@Adaptive&lt;/code&gt;注解标注的方法，在方法中动态的根据&lt;code&gt;url&lt;/code&gt;传入的参数来动态的调用不同的的接口实现类来处理逻辑。&lt;/p&gt;
&lt;p&gt;还有一种情况的&lt;code&gt;Adaptive&lt;/code&gt;类不是动态生成的，比如&lt;code&gt;Compiler.class&lt;/code&gt;接口的&lt;code&gt;AdaptiveCompiler.class&lt;/code&gt;类，是本来就实现好的，它会判断&lt;code&gt;ApplicationConfig&lt;/code&gt;在配置时是否有指定默认的&lt;code&gt;Compiler&lt;/code&gt;，没有的话就获取默认的扩展实现。本质上还是装饰模式的应用。&lt;/p&gt;
&lt;p&gt;下面的代码是运行时动态生成的&lt;code&gt;Protocol$Adaptive&lt;/code&gt;类的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.alibaba.dubbo.rpc&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.URL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.common.extension.ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.rpc.Exporter&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.rpc.Invoker&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.rpc.Protocol&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.alibaba.dubbo.rpc.RpcException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Protocol$Adaptive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Protocol &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Invoker &lt;span style=&#34;color:#a6e22e&#34;&gt;refer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Class class_&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; URL uRL&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; RpcException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String string&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        URL uRL2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        String string2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProtocol&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProtocol&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) use keys([protocol])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        Protocol protocol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Protocol&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; protocol&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;refer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;class_&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Exporter &lt;span style=&#34;color:#a6e22e&#34;&gt;export&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Invoker invoker&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; RpcException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String string&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invoker &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.alibaba.dubbo.rpc.Invoker argument == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invoker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.alibaba.dubbo.rpc.Invoker argument getUrl() == null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        URL uRL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; invoker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        String string2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProtocol&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; uRL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProtocol&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uRL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) use keys([protocol])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        Protocol protocol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExtensionLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Protocol&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; protocol&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;export&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invoker&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;destroy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getDefaultPort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到这里&lt;code&gt;getAdaptiveExtension()&lt;/code&gt;方法的实现就分析完成了，接下来分析最后一个方法&lt;code&gt;getActivateExtension()&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&#34;getactivateextension分析&#34;&gt;getActivateExtension()分析&lt;/h5&gt;
&lt;p&gt;经过对前面两个方法的分析，已经清楚了前面提到的&lt;code&gt;Dubbo&lt;/code&gt;框架对扩展实现的四个特性中的三个，现在还有最后一个关于自适应的特性，我们先来看&lt;code&gt;getActivateExtension()&lt;/code&gt;的处理过程：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Get activate extensions.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param url    url
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param values extension point names
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param group  group
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return extension list which are activated
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @see com.alibaba.dubbo.common.extension.Activate
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getActivateExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;URL url&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; values&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String group&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; exts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;();&lt;/span&gt;
        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; values &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Arrays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Constants&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;REMOVE_VALUE_PREFIX&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Constants&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DEFAULT_KEY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            getExtensionClasses&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Entry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Activate&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; entry &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; cachedActivates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;entrySet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                String name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; entry&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                Activate activate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; entry&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;isMatchGroup&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;group&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; activate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;group&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    T ext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getExtension&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Constants&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;REMOVE_VALUE_PREFIX&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; isActive&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;activate&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; url&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        exts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ext&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;exts&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ActivateComparator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;COMPARATOR&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; usrs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            String name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;startsWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Constants&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;REMOVE_VALUE_PREFIX&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Constants&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;REMOVE_VALUE_PREFIX&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Constants&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DEFAULT_KEY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;usrs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        exts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; usrs&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                        usrs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    T ext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getExtension&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                    usrs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ext&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;usrs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            exts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;usrs&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; exts&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在方法的重载调用中，会将&lt;code&gt;URL&lt;/code&gt;中&lt;code&gt;key&lt;/code&gt;的值取出来，并以逗号分割成一个数组，然后会判断传入的值里面有没有&lt;code&gt;-default&lt;/code&gt;配置，如果没有，就会调用前面分析过的&lt;code&gt;getExtensionClasses()&lt;/code&gt;方法（该方法会调用到&lt;code&gt;loadClass()&lt;/code&gt;方法，它里面的最后一个分支处理时，就有缓存配置名和对应的&lt;code&gt;@Activate&lt;/code&gt;注解标注过的实现类的键值对到&lt;code&gt;cachedActivates&lt;/code&gt;中），然后循环处理&lt;code&gt;cachedActivates&lt;/code&gt;中的键值对。&lt;/p&gt;
&lt;p&gt;在处理&lt;code&gt;cachedActivates&lt;/code&gt;中的键值对时，会取出&lt;code&gt;@Activate&lt;/code&gt;注解的&lt;code&gt;group&lt;/code&gt;参数信息进行比较，如果匹配上了，就会查找对应配置名的扩展实现（这里要注意一下匹配的方法&lt;code&gt;isMatchGroup()&lt;/code&gt;，&lt;code&gt;group&lt;/code&gt;参数为&lt;code&gt;null&lt;/code&gt;或&lt;code&gt;@Activate&lt;/code&gt;没有配置&lt;code&gt;group&lt;/code&gt;参数时，都会返回&lt;code&gt;true&lt;/code&gt;），然后再进一步判断&lt;code&gt;URL&lt;/code&gt;参数中传入的配置名是否在&lt;code&gt;cachedActivates&lt;/code&gt;中，是否有配置&lt;code&gt;-name&lt;/code&gt;格式的配置名，&lt;code&gt;URL&lt;/code&gt;中是否有对应配置名为参数的值（包括以&lt;code&gt;.配置名&lt;/code&gt;结尾的参数的值，如果匹配到了就会返回&lt;code&gt;true&lt;/code&gt;，同时，如果&lt;code&gt;@Activate&lt;/code&gt;注解没有配置&lt;code&gt;value&lt;/code&gt;参数，默认也会返回&lt;code&gt;true&lt;/code&gt;；对于判断结果为&lt;code&gt;true&lt;/code&gt;的配置名，会将刚刚查找到的扩展实现加入到&lt;code&gt;List&lt;/code&gt;中（这个&lt;code&gt;List&lt;/code&gt;是最终的返回结果），然后对列表按&lt;code&gt;ActivateComparator.COMPARATOR&lt;/code&gt;定义的排序规则进行排序。&lt;/p&gt;
&lt;p&gt;接着，还会进一步对传入的配置名列表进行判断，只要传入的配置名不是以&lt;code&gt;-&lt;/code&gt;开头，并且没有传入&lt;code&gt;-name&lt;/code&gt;格式的配置名，就会查找该配置的扩展实现，并加入到一个&lt;code&gt;List&lt;/code&gt;中，处理完之后，将这个&lt;code&gt;List&lt;/code&gt;中的值全部添加到前面那个最终返回的&lt;code&gt;List&lt;/code&gt;列表中。&lt;/p&gt;
&lt;p&gt;有点绕，简单点说，&lt;code&gt;getActivateExtension()&lt;/code&gt;方法就是根据默认规则和配置的参数去判断需要返回哪些要激活的扩展实现，然后把激活的扩展列表返回给调用方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个方法的处理逻辑就是&lt;code&gt;Dubbo&lt;/code&gt;框架对框架的自动激活的处理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;到这里，我们把三个注解对应的三个处理方法都分析了一篇，同时清楚了&lt;code&gt;Dubbo&lt;/code&gt;框架对扩展点所做的四种特性的处理，也清楚了&lt;code&gt;Dubbo&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;实现机制。&lt;/p&gt;
&lt;p&gt;接下来，就与前面分析过的&lt;code&gt;JDK&lt;/code&gt;和&lt;code&gt;Spring&lt;/code&gt;中的&lt;code&gt;SPI&lt;/code&gt;实现比较一下。&lt;/p&gt;
&lt;h4 id=&#34;0x02-与jdk和spring的spi的差异&#34;&gt;0x02 与JDK和Spring的SPI的差异&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;JDK&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;最简单直接，&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;实现也很简单清晰，只是在&lt;code&gt;JDK&lt;/code&gt;实现的基础上，对资源文件文件名和内容的规范上做出了一些修改，同时，服务加载器中增加了一个方法。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;Dubbo&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;使用了三个注解来实现，并且，对整个&lt;code&gt;SPI&lt;/code&gt;实现的处理流程有自己的规范，在&lt;code&gt;JDK&lt;/code&gt;和&lt;code&gt;Spring&lt;/code&gt;的实现基础上，增加了四种特性，并且在处理流程的每个级别上，能使用缓存的地方都使用了缓存，另外，还有内存动态编译等等，这些特性极大的提高了&lt;code&gt;Dubbo&lt;/code&gt;框架的扩展性，尤其是在框架已经实现好的基础上，可以通过不修改代码，直接修改配置参数的方式来实现动态的装配不同的组件实现。&lt;/p&gt;
&lt;p&gt;三种实现各有优劣，功能强大就对应着实现的复杂性也更大，不同的场景有不同的选择，永远都是那句话：合适的才是最好的。&lt;/p&gt;
&lt;p&gt;接下来，我们看一下&lt;code&gt;Dubbo&lt;/code&gt;中是如何使用&lt;code&gt;SPI&lt;/code&gt;的。&lt;/p&gt;
&lt;h4 id=&#34;0x03-dubbo中spi的应用&#34;&gt;0x03 Dubbo中SPI的应用&lt;/h4&gt;
&lt;p&gt;其实上面的分析过程中，已经有多处使用了自身的&lt;code&gt;SPI&lt;/code&gt;机制来加载扩展实现了。比如&lt;code&gt;ExtensionLoader&lt;/code&gt;中的&lt;code&gt;objectFactory&lt;/code&gt;属性的初始化，又比如动态编译生成的&lt;code&gt;$Adaptive&lt;/code&gt;类的源代码时，查找&lt;code&gt;com.alibaba.dubbo.common.compiler.Compiler.class&lt;/code&gt;服务的默认实现，这两个地方都是通过&lt;code&gt;Dubbo&lt;/code&gt;自身的&lt;code&gt;SPI&lt;/code&gt;机制来实现的。&lt;/p&gt;
&lt;p&gt;我们就以&lt;code&gt;Compiler.class&lt;/code&gt;为例来看看如何使用&lt;code&gt;Dubbo&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;吧，这里只是一种基本的使用方式，更完整的使用方式，我们后续从其它角度分析&lt;code&gt;Dubbo&lt;/code&gt;源码时再看。&lt;/p&gt;
&lt;p&gt;首先找到&lt;code&gt;Compiler.class&lt;/code&gt;服务的定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Compiler. (SPI, Singleton, ThreadSafe)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@SPI&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javassist&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Compiler&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Compile java source code.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param code        Java source code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param classLoader classloader
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return Compiled class
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; compile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String code&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ClassLoader classLoader&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该接口使用了&lt;code&gt;SPI&lt;/code&gt;标注，并且&lt;code&gt;SPI&lt;/code&gt;注解指定了参数值&lt;code&gt;javassist&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们再看具体的实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15929767639760.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到有三个具体的实现，分别是&lt;code&gt;AdaptiveCompiler&lt;/code&gt;、&lt;code&gt;JavassistCompiler&lt;/code&gt;和&lt;code&gt;JdkCompiler&lt;/code&gt;，&lt;code&gt;AbstractCompiler&lt;/code&gt;是抽象类，封装了通用逻辑，定义了&lt;code&gt;doCompile()&lt;/code&gt;抽象方法，不是具体实现类。&lt;/p&gt;
&lt;p&gt;再找到资源文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15929768911578.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;资源文件内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;adaptive=com.alibaba.dubbo.common.compiler.support.AdaptiveCompiler
jdk=com.alibaba.dubbo.common.compiler.support.JdkCompiler
javassist=com.alibaba.dubbo.common.compiler.support.JavassistCompiler
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以键值对的形式配置了上面的三种实现。&lt;/p&gt;
&lt;p&gt;调用时的代码：&lt;code&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;前面已经分析过了&lt;code&gt;getAdaptiveExtension()&lt;/code&gt;方法的逻辑，因为&lt;code&gt;Compiler.java&lt;/code&gt;接口上已经指定了默认配置名，所以，&lt;code&gt;Dubbo&lt;/code&gt;在加载&lt;code&gt;Compiler.class&lt;/code&gt;服务时会去资源文件中查找&lt;code&gt;javassist&lt;/code&gt;对应的实现，也就是&lt;code&gt;JavassistCompiler&lt;/code&gt;实现。&lt;/p&gt;
&lt;h4 id=&#34;0x04-基于spi实现dubbo扩展&#34;&gt;0x04 基于SPI实现Dubbo扩展&lt;/h4&gt;
&lt;p&gt;接下来，我们开始动手实现一个&lt;code&gt;Dubbo&lt;/code&gt;的序列化扩展，基于&lt;code&gt;protostuff&lt;/code&gt;的实现。&lt;/p&gt;
&lt;p&gt;首先找到&lt;code&gt;com.alibaba.dubbo.common.serialize.Serialization.class&lt;/code&gt;服务的定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Serialization. (SPI, Singleton, ThreadSafe)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@SPI&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hessian2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Serialization&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * get content type id
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return content type id
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getContentTypeId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * get content type
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return content type
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    String &lt;span style=&#34;color:#a6e22e&#34;&gt;getContentType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * create serializer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param url
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param output
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return serializer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @throws IOException
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Adaptive&lt;/span&gt;
    ObjectOutput &lt;span style=&#34;color:#a6e22e&#34;&gt;serialize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;URL url&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; OutputStream output&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * create deserializer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param url
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param input
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return deserializer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @throws IOException
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Adaptive&lt;/span&gt;
    ObjectInput &lt;span style=&#34;color:#a6e22e&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;URL url&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; InputStream input&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该接口使用了&lt;code&gt;SPI&lt;/code&gt;标注，并且&lt;code&gt;SPI&lt;/code&gt;注解指定了参数值&lt;code&gt;hessian2&lt;/code&gt;，也就是说&lt;code&gt;Dubbo&lt;/code&gt;默认使用&lt;code&gt;hessian2&lt;/code&gt;的实现来序列化对象，现在我们实现一个&lt;code&gt;protostuff&lt;/code&gt;的实现，并通过实例来验证。&lt;/p&gt;
&lt;p&gt;首先是新建&lt;code&gt;dubbo-serialization-protostuff&lt;/code&gt;工程，引入&lt;code&gt;dubbo-serialization-api&lt;/code&gt;和&lt;code&gt;protostuff&lt;/code&gt;相关的依赖，然后创建&lt;code&gt;ProtostuffSerialization&lt;/code&gt;类，实现&lt;code&gt;com.alibaba.dubbo.common.serialize.Serialization&lt;/code&gt;接口，具体代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author zhaoyang on 2020-06-24.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProtostuffSerialization&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Serialization &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; PROTOSTUFF_SERIALIZATION_ID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 12&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProtostuffSerialization&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;protostuff serialization initialized&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getContentTypeId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; PROTOSTUFF_SERIALIZATION_ID&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getContentType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x-application/protostuff&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ObjectOutput &lt;span style=&#34;color:#a6e22e&#34;&gt;serialize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;URL url&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; OutputStream output&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProtostuffObjectOutput&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;output&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ObjectInput &lt;span style=&#34;color:#a6e22e&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;URL url&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; InputStream input&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProtostuffObjectInput&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;input&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其它相关的源文件请参考示例工程（这里的实现代码参考了&lt;code&gt;Dubbo 2.7.x&lt;/code&gt;的&lt;code&gt;dubbo-serialization-protostuff&lt;/code&gt;实现）。&lt;/p&gt;
&lt;p&gt;创建&lt;code&gt;META-INF/dubbo/com.alibaba.dubbo.common.serialize.Serialization&lt;/code&gt;资源文件，内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;protostuff=me.zy.std.dubbo.serialization.protostuff.ProtostuffSerialization
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后新建一个&lt;code&gt;dubbo-spi-api&lt;/code&gt;的接口工程，定义&lt;code&gt;EchoService&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author zhaoyang on 2020-06-24.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EchoService&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    String &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String message&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新建&lt;code&gt;dubbo-spi-provider&lt;/code&gt;工程，实现服务接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author zhaoyang on 2020-06-24.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EchoServiceImpl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; EchoService &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String message&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SimpleDateFormat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HH:mm:ss&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; now &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;] Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; message
            &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, request from consumer: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; RpcContext&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getContext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRemoteAddress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; message&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并创建&lt;code&gt;EchoProvider&lt;/code&gt;类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author zhaoyang on 2020-06-24.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EchoProvider&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        ServiceConfig&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;EchoServiceImpl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ServiceConfig&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setInterface&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EchoService&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setRef&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EchoServiceImpl&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setApplication&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ApplicationConfig&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo-provider&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setRegistry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegistryConfig&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setSerialization&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;protostuff&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;export&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dubbo service started&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CountDownLatch&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，创建&lt;code&gt;dubbo-spi-consumer&lt;/code&gt;工程，并创建&lt;code&gt;EchoConsumer&lt;/code&gt;类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author zhaoyang on 2020-06-24.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EchoConsumer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        ReferenceConfig&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;EchoService&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; reference &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ReferenceConfig&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        reference&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setApplication&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ApplicationConfig&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo-service&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        reference&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setRegistry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegistryConfig&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        reference&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setInterface&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EchoService&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        EchoService service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reference&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        String message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;message&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在运行示例之前，需要在父工程目录下执行&lt;code&gt;mvn install&lt;/code&gt;将&lt;code&gt;dubbo-spi-api&lt;/code&gt;包和&lt;code&gt;dubbo-serialization-protostuff&lt;/code&gt;包安装到本地，然后启动&lt;code&gt;zookeeper&lt;/code&gt;服务，注意版本（我使用的&lt;code&gt;Dubbo&lt;/code&gt;版本为&lt;code&gt;2.6.8&lt;/code&gt;，对应的&lt;code&gt;zookeeper&lt;/code&gt;的版本为&lt;code&gt;3.4.x&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;准备工作完成后，先运行&lt;code&gt;EchoProvider&lt;/code&gt;类，输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;[24/06/20 11:28:52:052 CST] main  INFO logger.LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[24/06/20 11:28:52:052 CST] main ERROR common.Version:  [DUBBO] Duplicate class com/alibaba/dubbo/common/Version.class in 2 jar [file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo-common/2.6.8/dubbo-common-2.6.8.jar!/com/alibaba/dubbo/common/Version.class, file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo/2.6.8/dubbo-2.6.8.jar!/com/alibaba/dubbo/common/Version.class], dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:52:052 CST] main  WARN extension.SpringExtensionFactory:  [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:52:052 CST] main  WARN extension.SpringExtensionFactory:  [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:53:053 CST] main  INFO config.AbstractConfig:  [DUBBO] Export dubbo service me.zy.std.dubbo.spi.api.EchoService to local registry, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:53:053 CST] main  INFO config.AbstractConfig:  [DUBBO] Export dubbo service me.zy.std.dubbo.spi.api.EchoService to url dubbo://192.168.0.108:20880/me.zy.std.dubbo.spi.api.EchoService?anyhost=true&amp;amp;application=echo-provider&amp;amp;bind.ip=192.168.0.108&amp;amp;bind.port=20880&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=56070&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33333&amp;amp;serialization=protostuff&amp;amp;side=provider&amp;amp;timestamp=1593012533112, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:53:053 CST] main  INFO config.AbstractConfig:  [DUBBO] Register dubbo service me.zy.std.dubbo.spi.api.EchoService url dubbo://192.168.0.108:20880/me.zy.std.dubbo.spi.api.EchoService?anyhost=true&amp;amp;application=echo-provider&amp;amp;bind.ip=192.168.0.108&amp;amp;bind.port=20880&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=56070&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33333&amp;amp;serialization=protostuff&amp;amp;side=provider&amp;amp;timestamp=1593012533112 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=echo-provider&amp;amp;dubbo=2.0.2&amp;amp;pid=56070&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33333&amp;amp;registry=zookeeper&amp;amp;timestamp=1593012533095, dubbo version: 2.6.8, current host: 192.168.0.108
SLF4J: Failed to load class &amp;quot;org.slf4j.impl.StaticLoggerBinder&amp;quot;.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
[24/06/20 11:28:53:053 CST] main  INFO server.Server:  [DUBBO] qos-server bind localhost:33333, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:53:053 CST] main ERROR common.Version:  [DUBBO] Duplicate class com/alibaba/dubbo/remoting/exchange/Exchangers.class in 2 jar [file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo/2.6.8/dubbo-2.6.8.jar!/com/alibaba/dubbo/remoting/exchange/Exchangers.class, file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo-remoting-api/2.6.8/dubbo-remoting-api-2.6.8.jar!/com/alibaba/dubbo/remoting/exchange/Exchangers.class], dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:53:053 CST] main ERROR common.Version:  [DUBBO] Duplicate class com/alibaba/dubbo/remoting/Transporters.class in 2 jar [file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo-remoting-api/2.6.8/dubbo-remoting-api-2.6.8.jar!/com/alibaba/dubbo/remoting/Transporters.class, file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo/2.6.8/dubbo-2.6.8.jar!/com/alibaba/dubbo/remoting/Transporters.class], dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:53:053 CST] main ERROR common.Version:  [DUBBO] Duplicate class com/alibaba/dubbo/remoting/RemotingException.class in 2 jar [file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo/2.6.8/dubbo-2.6.8.jar!/com/alibaba/dubbo/remoting/RemotingException.class, file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo-remoting-api/2.6.8/dubbo-remoting-api-2.6.8.jar!/com/alibaba/dubbo/remoting/RemotingException.class], dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:53:053 CST] main  INFO transport.AbstractServer:  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.0.108:20880, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:54:054 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Load registry store file /Users/unclezhao/.dubbo/dubbo-registry-echo-provider-127.0.0.1:2181.cache, data: {me.zy.std.dubbo.spi.api.EchoService=empty://192.168.0.108:20880/me.zy.std.dubbo.spi.api.EchoService?anyhost=true&amp;amp;application=echo-provider&amp;amp;category=configurators&amp;amp;check=false&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=55396&amp;amp;serialization=protostuff&amp;amp;side=provider&amp;amp;timestamp=1593011993807, com.alibaba.dubbo.samples.echo.api.EchoService=empty://192.168.3.151:20880/com.alibaba.dubbo.samples.echo.api.EchoService?anyhost=true&amp;amp;application=echo-provider&amp;amp;bean.name=com.alibaba.dubbo.samples.echo.api.EchoService&amp;amp;category=configurators&amp;amp;check=false&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;interface=com.alibaba.dubbo.samples.echo.api.EchoService&amp;amp;methods=echo&amp;amp;pid=27439&amp;amp;side=provider&amp;amp;timestamp=1591923292603}, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:54:054 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Register: dubbo://192.168.0.108:20880/me.zy.std.dubbo.spi.api.EchoService?anyhost=true&amp;amp;application=echo-provider&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=56070&amp;amp;serialization=protostuff&amp;amp;side=provider&amp;amp;timestamp=1593012533112, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:54:054 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Subscribe: provider://192.168.0.108:20880/me.zy.std.dubbo.spi.api.EchoService?anyhost=true&amp;amp;application=echo-provider&amp;amp;category=configurators&amp;amp;check=false&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=56070&amp;amp;serialization=protostuff&amp;amp;side=provider&amp;amp;timestamp=1593012533112, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:28:54:054 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Notify urls for subscribe url provider://192.168.0.108:20880/me.zy.std.dubbo.spi.api.EchoService?anyhost=true&amp;amp;application=echo-provider&amp;amp;category=configurators&amp;amp;check=false&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=56070&amp;amp;serialization=protostuff&amp;amp;side=provider&amp;amp;timestamp=1593012533112, urls: [empty://192.168.0.108:20880/me.zy.std.dubbo.spi.api.EchoService?anyhost=true&amp;amp;application=echo-provider&amp;amp;category=configurators&amp;amp;check=false&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=56070&amp;amp;serialization=protostuff&amp;amp;side=provider&amp;amp;timestamp=1593012533112], dubbo version: 2.6.8, current host: 192.168.0.108
dubbo service started
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再运行&lt;code&gt;EchoConsumer&lt;/code&gt;类，输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/bin/java &amp;quot;-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=58442:/Applications/IntelliJ IDEA.app/Contents/bin&amp;quot; -Dfile.encoding=UTF-8 -classpath /Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/lib/tools.jar:/Users/unclezhao/Raymond/work/workspaces/stdspaces/architecture-std/dubbo-spi-consumer/target/classes:/Users/unclezhao/.m2/repository/com/alibaba/dubbo/2.6.8/dubbo-2.6.8.jar:/Users/unclezhao/.m2/repository/org/springframework/spring-context/5.2.3.RELEASE/spring-context-5.2.3.RELEASE.jar:/Users/unclezhao/.m2/repository/org/springframework/spring-aop/5.2.3.RELEASE/spring-aop-5.2.3.RELEASE.jar:/Users/unclezhao/.m2/repository/org/springframework/spring-beans/5.2.3.RELEASE/spring-beans-5.2.3.RELEASE.jar:/Users/unclezhao/.m2/repository/org/springframework/spring-core/5.2.3.RELEASE/spring-core-5.2.3.RELEASE.jar:/Users/unclezhao/.m2/repository/org/springframework/spring-jcl/5.2.3.RELEASE/spring-jcl-5.2.3.RELEASE.jar:/Users/unclezhao/.m2/repository/org/springframework/spring-expression/5.2.3.RELEASE/spring-expression-5.2.3.RELEASE.jar:/Users/unclezhao/.m2/repository/org/javassist/javassist/3.20.0-GA/javassist-3.20.0-GA.jar:/Users/unclezhao/.m2/repository/org/jboss/netty/netty/3.2.5.Final/netty-3.2.5.Final.jar:/Users/unclezhao/.m2/repository/org/apache/curator/curator-framework/2.12.0/curator-framework-2.12.0.jar:/Users/unclezhao/.m2/repository/org/apache/curator/curator-client/2.12.0/curator-client-2.12.0.jar:/Users/unclezhao/.m2/repository/org/apache/zookeeper/zookeeper/3.4.8/zookeeper-3.4.8.jar:/Users/unclezhao/.m2/repository/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.jar:/Users/unclezhao/.m2/repository/log4j/log4j/1.2.16/log4j-1.2.16.jar:/Users/unclezhao/.m2/repository/jline/jline/0.9.94/jline-0.9.94.jar:/Users/unclezhao/.m2/repository/com/google/guava/guava/16.0.1/guava-16.0.1.jar:/Users/unclezhao/.m2/repository/com/alibaba/dubbo-remoting-netty4/2.6.8/dubbo-remoting-netty4-2.6.8.jar:/Users/unclezhao/.m2/repository/com/alibaba/dubbo-remoting-api/2.6.8/dubbo-remoting-api-2.6.8.jar:/Users/unclezhao/.m2/repository/com/alibaba/dubbo-common/2.6.8/dubbo-common-2.6.8.jar:/Users/unclezhao/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/Users/unclezhao/.m2/repository/com/alibaba/hessian-lite/3.2.5/hessian-lite-3.2.5.jar:/Users/unclezhao/.m2/repository/com/alibaba/fastjson/1.2.60/fastjson-1.2.60.jar:/Users/unclezhao/.m2/repository/com/esotericsoftware/kryo/4.0.1/kryo-4.0.1.jar:/Users/unclezhao/.m2/repository/com/esotericsoftware/reflectasm/1.11.3/reflectasm-1.11.3.jar:/Users/unclezhao/.m2/repository/org/ow2/asm/asm/5.0.4/asm-5.0.4.jar:/Users/unclezhao/.m2/repository/com/esotericsoftware/minlog/1.3.0/minlog-1.3.0.jar:/Users/unclezhao/.m2/repository/org/objenesis/objenesis/2.5.1/objenesis-2.5.1.jar:/Users/unclezhao/.m2/repository/de/javakaffee/kryo-serializers/0.42/kryo-serializers-0.42.jar:/Users/unclezhao/.m2/repository/de/ruedigermoeller/fst/2.48-jdk-6/fst-2.48-jdk-6.jar:/Users/unclezhao/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.10.2/jackson-core-2.10.2.jar:/Users/unclezhao/.m2/repository/com/cedarsoftware/java-util/1.9.0/java-util-1.9.0.jar:/Users/unclezhao/.m2/repository/com/cedarsoftware/json-io/2.5.1/json-io-2.5.1.jar:/Users/unclezhao/.m2/repository/com/alibaba/dubbo-serialization-api/2.6.8/dubbo-serialization-api-2.6.8.jar:/Users/unclezhao/.m2/repository/io/netty/netty-all/4.1.45.Final/netty-all-4.1.45.Final.jar:/Users/unclezhao/.m2/repository/io/protostuff/protostuff-core/1.7.2/protostuff-core-1.7.2.jar:/Users/unclezhao/.m2/repository/io/protostuff/protostuff-api/1.7.2/protostuff-api-1.7.2.jar:/Users/unclezhao/.m2/repository/io/protostuff/protostuff-runtime/1.7.2/protostuff-runtime-1.7.2.jar:/Users/unclezhao/.m2/repository/io/protostuff/protostuff-collectionschema/1.7.2/protostuff-collectionschema-1.7.2.jar:/Users/unclezhao/Raymond/work/workspaces/stdspaces/architecture-std/dubbo-serialization-protostuff/target/classes:/Users/unclezhao/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.8.6/jackson-core-2.8.6.jar:/Users/unclezhao/Raymond/work/workspaces/stdspaces/architecture-std/dubbo-spi-api/target/classes:/Users/unclezhao/.m2/repository/io/netty/netty-all/4.1.25.Final/netty-all-4.1.25.Final.jar me.zy.std.dubbo.spi.consumer.EchoConsumer
[24/06/20 11:44:50:050 CST] main  INFO logger.LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[24/06/20 11:44:50:050 CST] main ERROR common.Version:  [DUBBO] Duplicate class com/alibaba/dubbo/common/Version.class in 2 jar [file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo-common/2.6.8/dubbo-common-2.6.8.jar!/com/alibaba/dubbo/common/Version.class, file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo/2.6.8/dubbo-2.6.8.jar!/com/alibaba/dubbo/common/Version.class], dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:50:050 CST] main  WARN extension.SpringExtensionFactory:  [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:50:050 CST] main  WARN extension.SpringExtensionFactory:  [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.8, current host: 192.168.0.108
SLF4J: Failed to load class &amp;quot;org.slf4j.impl.StaticLoggerBinder&amp;quot;.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
[24/06/20 11:44:50:050 CST] main  INFO server.Server:  [DUBBO] qos-server bind localhost:33332, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:50:050 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Load registry store file /Users/unclezhao/.dubbo/dubbo-registry-echo-service-127.0.0.1:2181.cache, data: {me.zy.std.dubbo.spi.api.EchoService=empty://192.168.0.108/me.zy.std.dubbo.spi.api.EchoService?application=echo-service&amp;amp;category=configurators&amp;amp;dubbo=2.0.2&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=56089&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;side=consumer&amp;amp;timestamp=1593012543817 empty://192.168.0.108/me.zy.std.dubbo.spi.api.EchoService?application=echo-service&amp;amp;category=routers&amp;amp;dubbo=2.0.2&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=56089&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;side=consumer&amp;amp;timestamp=1593012543817 dubbo://192.168.0.108:20880/me.zy.std.dubbo.spi.api.EchoService?anyhost=true&amp;amp;application=echo-provider&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=56070&amp;amp;serialization=protostuff&amp;amp;side=provider&amp;amp;timestamp=1593012533112}, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:50:050 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Register: consumer://192.168.0.108/me.zy.std.dubbo.spi.api.EchoService?application=echo-service&amp;amp;category=consumers&amp;amp;check=false&amp;amp;dubbo=2.0.2&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;side=consumer&amp;amp;timestamp=1593013490461, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:50:050 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Subscribe: consumer://192.168.0.108/me.zy.std.dubbo.spi.api.EchoService?application=echo-service&amp;amp;category=providers,configurators,routers&amp;amp;dubbo=2.0.2&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;side=consumer&amp;amp;timestamp=1593013490461, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:50:050 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Notify urls for subscribe url consumer://192.168.0.108/me.zy.std.dubbo.spi.api.EchoService?application=echo-service&amp;amp;category=providers,configurators,routers&amp;amp;dubbo=2.0.2&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;side=consumer&amp;amp;timestamp=1593013490461, urls: [dubbo://192.168.0.108:20880/me.zy.std.dubbo.spi.api.EchoService?anyhost=true&amp;amp;application=echo-provider&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57093&amp;amp;serialization=protostuff&amp;amp;side=provider&amp;amp;timestamp=1593013422447, empty://192.168.0.108/me.zy.std.dubbo.spi.api.EchoService?application=echo-service&amp;amp;category=configurators&amp;amp;dubbo=2.0.2&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;side=consumer&amp;amp;timestamp=1593013490461, empty://192.168.0.108/me.zy.std.dubbo.spi.api.EchoService?application=echo-service&amp;amp;category=routers&amp;amp;dubbo=2.0.2&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;side=consumer&amp;amp;timestamp=1593013490461], dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:50:050 CST] main ERROR common.Version:  [DUBBO] Duplicate class com/alibaba/dubbo/remoting/exchange/Exchangers.class in 2 jar [file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo/2.6.8/dubbo-2.6.8.jar!/com/alibaba/dubbo/remoting/exchange/Exchangers.class, file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo-remoting-api/2.6.8/dubbo-remoting-api-2.6.8.jar!/com/alibaba/dubbo/remoting/exchange/Exchangers.class], dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:50:050 CST] main ERROR common.Version:  [DUBBO] Duplicate class com/alibaba/dubbo/remoting/Transporters.class in 2 jar [file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo-remoting-api/2.6.8/dubbo-remoting-api-2.6.8.jar!/com/alibaba/dubbo/remoting/Transporters.class, file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo/2.6.8/dubbo-2.6.8.jar!/com/alibaba/dubbo/remoting/Transporters.class], dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:50:050 CST] main ERROR common.Version:  [DUBBO] Duplicate class com/alibaba/dubbo/remoting/RemotingException.class in 2 jar [file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo/2.6.8/dubbo-2.6.8.jar!/com/alibaba/dubbo/remoting/RemotingException.class, file:/Users/unclezhao/.m2/repository/com/alibaba/dubbo-remoting-api/2.6.8/dubbo-remoting-api-2.6.8.jar!/com/alibaba/dubbo/remoting/RemotingException.class], dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] main  INFO transport.AbstractClient:  [DUBBO] Successed connect to server /192.168.0.108:20880 from NettyClient 192.168.0.108 using dubbo version 2.6.8, channel is NettyChannel [channel=[id: 0x8a287b71, L:/192.168.0.108:58449 - R:/192.168.0.108:20880]], dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] main  INFO transport.AbstractClient:  [DUBBO] Start NettyClient /192.168.0.108 connect to the server /192.168.0.108:20880, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] main  INFO config.AbstractConfig:  [DUBBO] Refer dubbo service me.zy.std.dubbo.spi.api.EchoService from url zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&amp;amp;application=echo-service&amp;amp;check=false&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;register.ip=192.168.0.108&amp;amp;remote.timestamp=1593013422447&amp;amp;serialization=protostuff&amp;amp;side=consumer&amp;amp;timestamp=1593013490461, dubbo version: 2.6.8, current host: 192.168.0.108
protostuff serialization initialized
dubbo
[24/06/20 11:44:51:051 CST] DubboShutdownHook  INFO config.DubboShutdownHook:  [DUBBO] Run shutdown hook now., dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] DubboShutdownHook  INFO support.AbstractRegistryFactory:  [DUBBO] Close all registries [zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=echo-service&amp;amp;dubbo=2.0.2&amp;amp;interface=com.alibaba.dubbo.registry.RegistryService&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;timestamp=1593013490516], dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] DubboShutdownHook  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Destroy registry:zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=echo-service&amp;amp;dubbo=2.0.2&amp;amp;interface=com.alibaba.dubbo.registry.RegistryService&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;timestamp=1593013490516, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] DubboShutdownHook  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Unregister: consumer://192.168.0.108/me.zy.std.dubbo.spi.api.EchoService?application=echo-service&amp;amp;category=consumers&amp;amp;check=false&amp;amp;dubbo=2.0.2&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;side=consumer&amp;amp;timestamp=1593013490461, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] DubboShutdownHook  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Destroy unregister url consumer://192.168.0.108/me.zy.std.dubbo.spi.api.EchoService?application=echo-service&amp;amp;category=consumers&amp;amp;check=false&amp;amp;dubbo=2.0.2&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;side=consumer&amp;amp;timestamp=1593013490461, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] DubboShutdownHook  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Unsubscribe: consumer://192.168.0.108/me.zy.std.dubbo.spi.api.EchoService?application=echo-service&amp;amp;category=providers,configurators,routers&amp;amp;dubbo=2.0.2&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;side=consumer&amp;amp;timestamp=1593013490461, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] DubboShutdownHook  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Destroy unsubscribe url consumer://192.168.0.108/me.zy.std.dubbo.spi.api.EchoService?application=echo-service&amp;amp;category=providers,configurators,routers&amp;amp;dubbo=2.0.2&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;side=consumer&amp;amp;timestamp=1593013490461, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] DubboShutdownHook  INFO dubbo.DubboProtocol:  [DUBBO] Close dubbo connect: /192.168.0.108:58449--&amp;gt;/192.168.0.108:20880, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] DubboShutdownHook  INFO netty4.NettyChannel:  [DUBBO] Close netty channel [id: 0x8a287b71, L:/192.168.0.108:58449 - R:/192.168.0.108:20880], dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] DubboShutdownHook  INFO dubbo.DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.0.108:0--&amp;gt;192.168.0.108:20880, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] DubboShutdownHook  INFO dubbo.DubboProtocol:  [DUBBO] Destroy reference: dubbo://192.168.0.108:20880/me.zy.std.dubbo.spi.api.EchoService?anyhost=true&amp;amp;application=echo-service&amp;amp;check=false&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57176&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33332&amp;amp;register.ip=192.168.0.108&amp;amp;remote.timestamp=1593013422447&amp;amp;serialization=protostuff&amp;amp;side=consumer&amp;amp;timestamp=1593013490461, dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] DubboShutdownHook  INFO server.Server:  [DUBBO] qos-server stopped., dubbo version: 2.6.8, current host: 192.168.0.108

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;EchoProvider&lt;/code&gt;的日志输出增加了：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;protostuff serialization initialized
[23:44:51] Hello dubbo, request from consumer: /192.168.0.108:58449
[24/06/20 11:44:51:051 CST] NettyServerWorker-5-1  WARN transport.AbstractServer:  [DUBBO] All clients has discontected from /192.168.0.108:20880. You can graceful shutdown now., dubbo version: 2.6.8, current host: 192.168.0.108
[24/06/20 11:44:51:051 CST] DubboServerHandler-192.168.0.108:20880-thread-3  INFO dubbo.DubboProtocol:  [DUBBO] disconnected from /192.168.0.108:58449,url:dubbo://192.168.0.108:20880/me.zy.std.dubbo.spi.api.EchoService?anyhost=true&amp;amp;application=echo-provider&amp;amp;bind.ip=192.168.0.108&amp;amp;bind.port=20880&amp;amp;channel.readonly.sent=true&amp;amp;codec=dubbo&amp;amp;dubbo=2.0.2&amp;amp;generic=false&amp;amp;heartbeat=60000&amp;amp;interface=me.zy.std.dubbo.spi.api.EchoService&amp;amp;methods=echo&amp;amp;pid=57093&amp;amp;qos.accept.foreign.ip=false&amp;amp;qos.enable=true&amp;amp;qos.port=33333&amp;amp;serialization=protostuff&amp;amp;side=provider&amp;amp;timestamp=1593013422447, dubbo version: 2.6.8, current host: 192.168.0.108
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由此可见，我们新实现的基于&lt;code&gt;protostuff&lt;/code&gt;的&lt;code&gt;Dubbo&lt;/code&gt;序列化扩展可以正常工作了。&lt;/p&gt;
&lt;h4 id=&#34;0x05-总结&#34;&gt;0x05 总结&lt;/h4&gt;
&lt;p&gt;至此，&lt;code&gt;Dubbo&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;实现就分析完成了，同时，也针对&lt;code&gt;JDK&lt;/code&gt;的实现和&lt;code&gt;Spring&lt;/code&gt;的实现进行了比较，并且，还动手基于&lt;code&gt;Dubbo&lt;/code&gt;的&lt;code&gt;Serialization&lt;/code&gt;扩展，实现了基于&lt;code&gt;protostuff&lt;/code&gt;的扩展实现。&lt;/p&gt;
&lt;p&gt;在整个分析的过程中，我们清楚了&lt;code&gt;Dubbo&lt;/code&gt;框架的整个扩展机制的规范，了解到了&lt;code&gt;SPI&lt;/code&gt;、&lt;code&gt;Adaptive&lt;/code&gt;和&lt;code&gt;Activate&lt;/code&gt;三个注解的作用，通过分析服务加载器类&lt;code&gt;ExtensionLoader&lt;/code&gt;的三个关键方法，明白了三个注解之间是如何协作来实现&lt;code&gt;Dubbo&lt;/code&gt;扩展的四大特性的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dubbo&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;是三者（&lt;code&gt;JDK&lt;/code&gt;、&lt;code&gt;Spring&lt;/code&gt;）中实现最复杂的，相对的，也是功能最强大，最灵活的。当然，&lt;code&gt;Dubbo&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;机制的规范还有一些细节这里没有覆盖到，我们后续针对&lt;code&gt;Dubbo&lt;/code&gt;源码的其它分析会覆盖到。&lt;/p&gt;
&lt;p&gt;通过分析这些优秀的框架，我们可以受到很大的启发，比如，当我们需要实现一套框架时，就可以借鉴&lt;code&gt;Dubbo&lt;/code&gt;的这种微内核+插件式的架构，这样可以保证框架有足够的扩展性（当然了，扩展性并不仅仅只是靠这一点来获得，合理的使用设计模式也是框架实现时保证扩展性的一种有效手段，以及贯穿面向对象设计的五大原则等等），借鉴并不是照搬，我们要吸取优秀的思想，再结合自己的需求进行裁剪和平衡做出合适的取舍。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPI&lt;/code&gt;机制的分析到此就结束了，欢迎各种反馈和交流！&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/apache/dubbo/tree/2.6.x&#34;&gt;Apache Dubbo&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;http://dubbo.apache.org/zh-cn/docs/dev/SPI.html&#34;&gt;Dubbo 文档&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/protostuff/protostuff&#34;&gt;Protostuff&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/unclezhao/architecture-std&#34;&gt;示例代码仓库&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/spi/">SPI</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/microkernel/">MicroKernel</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/dubbo/">Dubbo</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/spi/">SPI</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：SPI之Spring实现</title>
                <link>https://zhaoyang.me/posts/architecture-from-source-code-spring-spi/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/architecture-from-source-code-spring-spi/</guid>
                <pubDate>Thu, 18 Jun 2020 16:59:09 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;TL;DR&lt;/p&gt;
&lt;p&gt;前一篇详细介绍了&lt;code&gt;JDK&lt;/code&gt;中的&lt;code&gt;SPI&lt;/code&gt;机制，今天来看看&lt;code&gt;Spring&lt;/code&gt;框架中是如何使用&lt;code&gt;SPI&lt;/code&gt;来实现可扩展性的，然后与&lt;code&gt;JDK&lt;/code&gt;的实现进行一下对比，再看看&lt;code&gt;Spring&lt;/code&gt;是如何应用&lt;code&gt;SPI&lt;/code&gt;的，最后，我们基于&lt;code&gt;SPI&lt;/code&gt;来动手实现一个&lt;code&gt;Spring&lt;/code&gt;的扩展。&lt;/p&gt;
&lt;p&gt;本文大纲如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;实现&lt;/li&gt;
&lt;li&gt;与&lt;code&gt;JDK&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;的差异&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Spring&lt;/code&gt;中&lt;code&gt;SPI&lt;/code&gt;的应用&lt;/li&gt;
&lt;li&gt;基于&lt;code&gt;SPI&lt;/code&gt;实现&lt;code&gt;Spring&lt;/code&gt;扩展&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实，明白了&lt;code&gt;JDK&lt;/code&gt;中的&lt;code&gt;SPI&lt;/code&gt;，&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;实现原理是一样的，所以，本篇的内容会比较简单。&lt;/p&gt;
&lt;h4 id=&#34;0x01-spring的spi实现&#34;&gt;0x01 Spring的SPI实现&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;SPI&lt;/code&gt;分为多个角色：&lt;code&gt;Service&lt;/code&gt;、&lt;code&gt;Service Provider&lt;/code&gt;、&lt;code&gt;ServiceLoader&lt;/code&gt;和资源文件（&lt;code&gt;META-INF&lt;/code&gt;目录下）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;框架的&lt;code&gt;SPI&lt;/code&gt;实现也离不开这几个角色。&lt;/p&gt;
&lt;p&gt;首先，我们在&lt;code&gt;Spring&lt;/code&gt;框架的源代码（或&lt;code&gt;Spring Boot&lt;/code&gt;源代码）的资源文件目录下，可以找到&lt;code&gt;META-INF&lt;/code&gt;文件夹，里面可以找到&lt;code&gt;spring.factories&lt;/code&gt;文件，这个文件就是&lt;code&gt;Spring&lt;/code&gt;实现&lt;code&gt;SPI&lt;/code&gt;机制所需要的资源文件，里面会定义好一些扩展接口及实现类的信息，文件格式稍后再看。&lt;/p&gt;
&lt;p&gt;有了这个&lt;code&gt;spring.factories&lt;/code&gt;文件，那服务加载器肯定会读取这个路径，在源码中搜索字符串&lt;code&gt;spring.factories&lt;/code&gt;，即可定位到一个类：&lt;code&gt;SpringFactoriesLoader&lt;/code&gt;，这是一个用&lt;code&gt;final&lt;/code&gt;修饰的类，是不可以被继承的。它的注释中第一句就明确的说明了这个类是用于&lt;code&gt;Spring&lt;/code&gt;框架内部的一般用途的工厂加载机制的。主要有&lt;code&gt;loadFactories()&lt;/code&gt;和&lt;code&gt;loadFactoryNames()&lt;/code&gt;这两个公有方法，这两个方法的用途注释已经解释得很清楚了，第一个是加载和实例化资源文件（&lt;code&gt;META-INF/spring.factories&lt;/code&gt;）中的对应的工厂的实现类列表，另一个是加载资源文件中对应的工厂的实现类的全路径名称列表。&lt;/p&gt;
&lt;p&gt;按上面的描述，剩下的&lt;code&gt;Service&lt;/code&gt;和&lt;code&gt;Service Provider&lt;/code&gt;已经定义在资源文件中了，那我们现在看一下资源文件&lt;code&gt;spring.factories&lt;/code&gt;的具体内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928902591873.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图是&lt;code&gt;spring-boot&lt;/code&gt;项目&lt;code&gt;resources&lt;/code&gt;目录下的&lt;code&gt;META-INF/spring.factories&lt;/code&gt;文件的内容。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SpringFactoriesLoader&lt;/code&gt;类的注释中有对这个文件的格式做出相关的说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928903677630.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;即，&lt;code&gt;spring.factories&lt;/code&gt;文件的格式必须是&lt;code&gt;Properties&lt;/code&gt;的格式，也就是键值对的格式，其中键（也就是&lt;code&gt;key&lt;/code&gt;）是接口或抽象类的全路径名称，值（也就是&lt;code&gt;value&lt;/code&gt;）是逗号分隔的实现类名的列表，也必须是全路径名称。&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;spring-boot&lt;/code&gt;下的&lt;code&gt;spring.factories&lt;/code&gt;文件的第一个定义为例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# PropertySource Loaders
org.springframework.boot.env.PropertySourceLoader=\
org.springframework.boot.env.PropertiesPropertySourceLoader,\
org.springframework.boot.env.YamlPropertySourceLoader
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的&lt;code&gt;org.springframework.boot.env.PropertySourceLoader&lt;/code&gt;就是服务（即&lt;code&gt;SPI&lt;/code&gt;中的&lt;code&gt;Service&lt;/code&gt;角色）的定义，&lt;code&gt;org.springframework.boot.env.PropertiesPropertySourceLoader&lt;/code&gt;和&lt;code&gt;org.springframework.boot.env.YamlPropertySourceLoader&lt;/code&gt;就是服务提供者（即&lt;code&gt;SPI&lt;/code&gt;中的&lt;code&gt;Service Provider&lt;/code&gt;角色）的定义了。&lt;/p&gt;
&lt;p&gt;到这里，&lt;code&gt;SPI&lt;/code&gt;中的四种角色就齐了。&lt;/p&gt;
&lt;p&gt;那&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;如何使用的呢？&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;Spring Boot&lt;/code&gt;为例，我们启动程序的时候入口是&lt;code&gt;SpringApplication#run()&lt;/code&gt;方法，我们打开这个方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928915049250.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图就是&lt;code&gt;SpringApplication#run()&lt;/code&gt;方法的具体实现，其中有一行是调用了&lt;code&gt;getSpringFactoriesInstances()&lt;/code&gt;方法，我们再看一下该方法的实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928915633042.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;该方法里有一行调用&lt;code&gt;SpringFactoriesLoader.loadFactoryNames(type, classLoader)&lt;/code&gt;，它的结果直接作为了&lt;code&gt;LinkedHashSet&lt;/code&gt;的初始化参数。这一行实是在使用服务加载器&lt;code&gt;SpringFactoriesLoader&lt;/code&gt;来加载所有对应类型的实现了。&lt;/p&gt;
&lt;p&gt;现在我们清楚了&lt;code&gt;Spring&lt;/code&gt;中&lt;code&gt;SPI&lt;/code&gt;是怎么工作的了。&lt;/p&gt;
&lt;h4 id=&#34;0x02-与jdk的spi的差异&#34;&gt;0x02 与JDK的SPI的差异&lt;/h4&gt;
&lt;p&gt;其实明白了&lt;code&gt;JDK&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;实现，&lt;code&gt;Spring&lt;/code&gt;的实现几乎一样，唯一的差别就是资源文件的名称和内容了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JDK&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;对应的资源文件的名称必须是服务的全路径名称，而内容就是具体实现的类的全路径名称，可以有多个实现，但一行只能放一个实现；另外就是一个资源文件对于一个服务的定义；&lt;/p&gt;
&lt;p&gt;再看&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;对应的资源文件，该文件的名称是固定的，为&lt;code&gt;spring.factories&lt;/code&gt;，内容必须是&lt;code&gt;Properties&lt;/code&gt;格式，也可以有多组，但一个键值对应于一个服务的定义，如果一个服务有多个实现，可以在&lt;code&gt;value&lt;/code&gt;中用逗号将多个实现的全路径类名分隔开。如果需要换行的号，就像前面的截图那样，用&lt;code&gt;\&lt;/code&gt;结尾，以此表示下一行是当前行的续行。&lt;/p&gt;
&lt;p&gt;另外，就是根据使用场景的不同，两种实现的服务加载器中定义的方法不同，&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;实现支持更多的使用场景。&lt;/p&gt;
&lt;h4 id=&#34;0x03-spring中spi的应用&#34;&gt;0x03 Spring中SPI的应用&lt;/h4&gt;
&lt;p&gt;我们还是以上面的那个示例来看&lt;code&gt;SPI&lt;/code&gt;在&lt;code&gt;Spring&lt;/code&gt;中的应用。&lt;/p&gt;
&lt;p&gt;服务的定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Strategy interface located via {@link SpringFactoriesLoader} and used to load a
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * {@link PropertySource}.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author Dave Syer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author Phillip Webb
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @since 1.0.0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PropertySourceLoader&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Returns the file extensions that the loader supports (excluding the &amp;#39;.&amp;#39;).
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * @return the file extensions
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
	String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getFileExtensions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Load the resource into one or more property sources. Implementations may either
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * return a list containing a single source, or in the case of a multi-document format
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * such as yaml a source for each document in the resource.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * @param name the root name of the property source. If multiple documents are loaded
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * an additional suffix should be added to the name for each source loaded.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * @param resource the resource to load
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * @return a list property sources
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * @throws IOException if the source cannot be loaded
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
	List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PropertySource&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; load&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Resource resource&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;PropertiesPropertySourceLoader&lt;/code&gt;实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Strategy to load &amp;#39;.properties&amp;#39; files into a {@link PropertySource}.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author Dave Syer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author Phillip Webb
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author Madhura Bhave
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @since 1.0.0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PropertiesPropertySourceLoader&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; PropertySourceLoader &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String XML_FILE_EXTENSION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.xml&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getFileExtensions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PropertySource&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; load&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Resource resource&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&amp;gt;&lt;/span&gt; properties &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loadProperties&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;resource&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;properties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;emptyList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Collections
				&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singletonList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OriginTrackedMapPropertySource&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;unmodifiableMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;properties&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unchecked&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rawtypes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&amp;gt;&lt;/span&gt; loadProperties&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Resource resource&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		String filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getFilename&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;filename &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; filename&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;endsWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;XML_FILE_EXTENSION&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; PropertiesLoaderUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loadProperties&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;resource&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OriginTrackedPropertiesLoader&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;resource&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;YamlPropertySourceLoader&lt;/code&gt;实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Strategy to load &amp;#39;.yml&amp;#39; (or &amp;#39;.yaml&amp;#39;) files into a {@link PropertySource}.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author Dave Syer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author Phillip Webb
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author Andy Wilkinson
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @since 1.0.0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;YamlPropertySourceLoader&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; PropertySourceLoader &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getFileExtensions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yml&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yaml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PropertySource&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; load&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Resource resource&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;ClassUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isPresent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.yaml.snakeyaml.Yaml&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
					&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attempted to load &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; but snakeyaml was not found on the classpath&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; loaded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OriginTrackedYamlLoader&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;resource&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;loaded&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;emptyList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PropertySource&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; propertySources &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;loaded&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; loaded&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			String documentNumber &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;loaded&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; (document #&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
			propertySources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OriginTrackedMapPropertySource&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; documentNumber&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
					Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;unmodifiableMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;loaded&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; propertySources&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个服务是对&lt;code&gt;Spring&lt;/code&gt;的配置文件的格式定义的扩展，两个实现分别是基于&lt;code&gt;Properties&lt;/code&gt;格式的实现和&lt;code&gt;yaml&lt;/code&gt;格式的实现。&lt;/p&gt;
&lt;p&gt;上面的代码是服务的定义，以及两种服务的实现。具体来说就是&lt;code&gt;Spring Boot&lt;/code&gt;对默认配置文件的解析处理的定义。&lt;/p&gt;
&lt;p&gt;到这里，我们还不知道&lt;code&gt;Spring&lt;/code&gt;是什么时候，在哪里加载该服务的定义，然后去哪里读取&lt;code&gt;properties&lt;/code&gt;文件或&lt;code&gt;yml&lt;/code&gt;文件的。也就是说，整个流程还没有串联起来，流程不清晰。&lt;/p&gt;
&lt;p&gt;于是，我们继续看&lt;code&gt;SpringAppliction#run()&lt;/code&gt;方法，里面有一行调用&lt;code&gt;ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);&lt;/code&gt;，再进去看方法&lt;code&gt;prepareEnvironment&lt;/code&gt;的具体实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928934453821.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里首先会获取或创建环境对象，然后配置环境对象，我们看一下配置环境方法&lt;code&gt;configureEnvironment&lt;/code&gt;的具体实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928935321499.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个方法是委托实现&lt;code&gt;configurePropertySources()&lt;/code&gt;和&lt;code&gt;configureProfiles()&lt;/code&gt;方法的模版方法，我们看一下这一行调用&lt;code&gt;configurePropertySources(environment, args);&lt;/code&gt;，这里面通过环境去获取了&lt;code&gt;PropertySource&lt;/code&gt;列表，并判断了&lt;code&gt;defaultProperties&lt;/code&gt;和&lt;code&gt;addCommandLineProperties&lt;/code&gt;，这里并没有使用服务加载器的代码，所以继续看源码。&lt;/p&gt;
&lt;p&gt;回到&lt;code&gt;prepareEnvironment&lt;/code&gt;方法，接下来有一行调用&lt;code&gt;listeners.environmentPrepared(environment);&lt;/code&gt;，再后面就绑定环境对象了，即这一行的调用&lt;code&gt;bindToSpringApplication()&lt;/code&gt;，再后面就是配置与环境绑定的调用&lt;code&gt;ConfigurationPropertySources.attach(environment);&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;按道理，对配置文件的定位工作应该是在绑定到环境之前，因为就&lt;code&gt;Spring&lt;/code&gt;的使用经验来说，配置文件本身是可以分环境来进行命名和配置的，所以，对应到这里的代码，应该就是在绑定环境之前的那一行调用了，即：&lt;code&gt;listeners.environmentPrepared(environment);&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们进一步看这个方法的实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928940171798.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里是通知所有关注&lt;code&gt;ConfigurableEnvironment&lt;/code&gt;的监听器，我们看一下&lt;code&gt;listener.enviromentPrepared()&lt;/code&gt;方法的具体实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928940733887.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;原来是调用了&lt;code&gt;EventPublishingRunListener&lt;/code&gt;的事件发布方法，这里使用的是事件驱动的方式进行事件的派发。&lt;/p&gt;
&lt;p&gt;而且，这个&lt;code&gt;EventPublishingRunListener&lt;/code&gt;本身也是基于&lt;code&gt;SPI&lt;/code&gt;机制实现的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928941728992.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们接着看前面的事件派发，这里派发出去的事件类是&lt;code&gt;ApplicationEnvironmentPreparedEvent&lt;/code&gt;，如果你清楚事件驱动模式的调用的话，这里就简单了，因为所有的关注事件&lt;code&gt;ApplicationEnvironmentPreparedEvent&lt;/code&gt;的监听器都需要实现一个处理该事件的方法，所以，我们只需要去到该事件类，然后查看哪里监听器监听了该事件就可以定位到最终的目标了。&lt;/p&gt;
&lt;p&gt;我们继续打开类&lt;code&gt;ApplicationEnvironmentPreparedEvent&lt;/code&gt;，在&lt;code&gt;IDEA&lt;/code&gt;中，按住&lt;code&gt;ctrl&lt;/code&gt;再单击类名即可出现所有使用了该类的位置，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928943833724.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到，有一个&lt;code&gt;ConfigFileApplicationListener&lt;/code&gt;监听器，定义了方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;onApplicationEnvironmentPreparedEvent&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ApplicationEnvironmentPreparedEvent event&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看一下该方法的实现，第一行调用了&lt;code&gt;loadPostProcessors()&lt;/code&gt;方法，我们进去看一下具体的实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928944936802.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里加载了所有的&lt;code&gt;EnvironmentPostProcessor.class&lt;/code&gt;服务的实现，然后方法的第二行把当前对象也加到了&lt;code&gt;EnvironmentPostProcessor.class&lt;/code&gt;服务提供者的列表中，然后对找到的这些服务提供者循环调用进行后续环境处理操作。&lt;/p&gt;
&lt;p&gt;对这些实现一个个查找发现，当前类的处理方法的实现为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928946906770.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进一步跟进，发现它调用了内部类&lt;code&gt;Loader#load()&lt;/code&gt;方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928947195878.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们定位到这个&lt;code&gt;Loader&lt;/code&gt;内部类，发现它的构造方法中就使用服务加载器对&lt;code&gt;PropertySourceLoader.class&lt;/code&gt;服务进行了查找：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928947853820.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;前面的调用了&lt;code&gt;Loader#load()&lt;/code&gt;方法，我们再看这个方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928948313674.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进一步定位到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928948455580.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;再继续查看就是根据条件进行判断并使用不同的实现去解析不同的文件了。&lt;/p&gt;
&lt;p&gt;现在，我们回到&lt;code&gt;PropertySourceLoader.class&lt;/code&gt;服务的两个实现看一下（代码已经贴在前面了）。&lt;/p&gt;
&lt;p&gt;两个实现分别定义了各自所支持的不同的文件后缀，和上面的&lt;code&gt;load()&lt;/code&gt;方法里的判断是匹配的。&lt;/p&gt;
&lt;p&gt;那&lt;code&gt;Spring&lt;/code&gt;默认查找的是&lt;code&gt;application.properties&lt;/code&gt;（或&lt;code&gt;application.yaml&lt;/code&gt;），这个文件名&lt;code&gt;application&lt;/code&gt;是哪里定义的呢？&lt;/p&gt;
&lt;p&gt;其实这个文件名就定义在&lt;code&gt;ConfigFileApplicationListener&lt;/code&gt;类中，同时还定义了配置文件默认的路径，它还支持通过不同的参数来修改这个配置文件的路径和名称等，有兴趣可以自行查看该类的代码。&lt;/p&gt;
&lt;p&gt;现在我们再来回答前面的问题：&lt;code&gt;Spring&lt;/code&gt;是什么时候，在哪里加载该服务的定义，然后去哪里读取&lt;code&gt;properties&lt;/code&gt;文件或&lt;code&gt;yml&lt;/code&gt;文件的？&lt;/p&gt;
&lt;p&gt;答案就是&lt;code&gt;ConfigFileApplicationListener&lt;/code&gt;类了，&lt;code&gt;SpringApplication#run()&lt;/code&gt;方法在启动时，创建了环境对象之后，会通过事件派发的机制广播一系列的事件给一系列的&lt;code&gt;SpringApplicationRunListener&lt;/code&gt;实现者，它们会关注各自所关心的事件，并在接收到相应的事件后，做一些相应的处理。&lt;/p&gt;
&lt;h4 id=&#34;0x04-基于spi实现spring扩展&#34;&gt;0x04 基于SPI实现Spring扩展&lt;/h4&gt;
&lt;p&gt;现在我们以&lt;code&gt;PropertySourceLoader.class&lt;/code&gt;服务为例，结合&lt;code&gt;SpringApplication&lt;/code&gt;的启动过程分析了&lt;code&gt;Spring&lt;/code&gt;如何使用它的&lt;code&gt;SPI&lt;/code&gt;机制的。&lt;/p&gt;
&lt;p&gt;下面又是动手的环境，我们还是以这个服务为例，为&lt;code&gt;Spring&lt;/code&gt;实现一种新的配置文件格式的支持。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;toml&lt;/code&gt;是在&lt;code&gt;golang&lt;/code&gt;生态中广泛使用的一种配置文件格式，我们现在就动手为&lt;code&gt;Spring&lt;/code&gt;实现对&lt;code&gt;toml&lt;/code&gt;文件格式的支持吧。&lt;/p&gt;
&lt;p&gt;最新的&lt;code&gt;toml&lt;/code&gt;标准为&lt;code&gt;v1.0.0-rc&lt;/code&gt;，官方推荐的该版本的&lt;code&gt;Java&lt;/code&gt;实现为&lt;code&gt;https://github.com/tomlj/tomlj&lt;/code&gt;，我们就使用这个库来实现上面的扩展。&lt;/p&gt;
&lt;p&gt;首先定义服务提供者的类名&lt;code&gt;TomlPropertySourceLoader&lt;/code&gt;，并实现&lt;code&gt;PropertySourceLoader&lt;/code&gt;接口，然后实现对应的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Strategy to load &amp;#39;.tml&amp;#39; (or &amp;#39;.toml&amp;#39;) files into a {@link PropertySource}.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author zhaoyang.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TomlPropertySourceLoader&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; PropertySourceLoader &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getFileExtensions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tml&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;toml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PropertySource&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; load&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Resource resource&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;ClassUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isPresent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.tomlj.Toml&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attempted to load &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; but tomlj was not found on the classpath&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        TomlParseResult tomlParseResult &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Toml&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;resource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInputStream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; resultMap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tomlParseResult&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;resultMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;emptyList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singletonList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OriginTrackedMapPropertySource&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; resultMap&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除此之外，还要在&lt;code&gt;resources&lt;/code&gt;目录新建&lt;code&gt;META-INF&lt;/code&gt;目录，并在该目录下新建文件&lt;code&gt;spring.factories&lt;/code&gt;，文件内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;org.springframework.boot.env.PropertySourceLoader=\
me.zy.std.spi.spring.extension.TomlPropertySourceLoader
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，在&lt;code&gt;resources&lt;/code&gt;目录新建&lt;code&gt;application.toml&lt;/code&gt;文件，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 这是一个 TOML 文档。&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TOML 示例&amp;#34;&lt;/span&gt;

[&lt;span style=&#34;color:#a6e22e&#34;&gt;owner&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tom Preston-Werner&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;dob&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;1979-05-27T07:32:00-08:00&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 第一类日期时刻&lt;/span&gt;

[&lt;span style=&#34;color:#a6e22e&#34;&gt;database&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.1&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ports&lt;/span&gt; = [ &lt;span style=&#34;color:#ae81ff&#34;&gt;8001&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8001&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8002&lt;/span&gt; ]
&lt;span style=&#34;color:#a6e22e&#34;&gt;connection_max&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

[&lt;span style=&#34;color:#a6e22e&#34;&gt;servers&lt;/span&gt;]

  &lt;span style=&#34;color:#75715e&#34;&gt;# 允许缩进（制表符和/或空格），不过不是必要的&lt;/span&gt;
  [&lt;span style=&#34;color:#a6e22e&#34;&gt;servers&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;alpha&lt;/span&gt;]
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.0.0.1&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dc&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eqdc10&amp;#34;&lt;/span&gt;

  [&lt;span style=&#34;color:#a6e22e&#34;&gt;servers&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;beta&lt;/span&gt;]
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.0.0.2&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dc&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eqdc10&amp;#34;&lt;/span&gt;

[&lt;span style=&#34;color:#a6e22e&#34;&gt;clients&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; = [ [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gamma&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delta&amp;#34;&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] ]

&lt;span style=&#34;color:#75715e&#34;&gt;# 数组中是可以换行的&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;hosts&lt;/span&gt; = [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alpha&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;omega&amp;#34;&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，新建一个&lt;code&gt;Spring Boot&lt;/code&gt;程序的启动类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author zhaoyang.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SpringTomlTextApplication&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SpringTomlTextApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${title}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String title&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CommandLineRunner &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;args &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Server started...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n\n\n&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title = &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; title&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们从配置文件中，注入一个&lt;code&gt;title&lt;/code&gt;属性，并在应用启动后，将配置文件中配置的&lt;code&gt;title&lt;/code&gt;属性的值输出到配置文件。&lt;/p&gt;
&lt;p&gt;启动程序后，可以看到控制台的输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15928983498135.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功的从&lt;code&gt;application.toml&lt;/code&gt;配置文件中读取出了我们所配置的属性值。&lt;/p&gt;
&lt;p&gt;至此，基于&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;实现就分析完了。&lt;/p&gt;
&lt;h4 id=&#34;0x05-总结&#34;&gt;0x05 总结&lt;/h4&gt;
&lt;p&gt;这一篇我们分析了&lt;code&gt;Spring&lt;/code&gt;框架的&lt;code&gt;SPI&lt;/code&gt;扩展，我们仅以&lt;code&gt;PropertySourceLoader.class&lt;/code&gt;服务为例进行了分析，并动手为此服务实现了&lt;code&gt;toml&lt;/code&gt;的扩展。&lt;/p&gt;
&lt;p&gt;本质上，&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;与&lt;code&gt;Java&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;实现大同小异，但&lt;code&gt;Spring&lt;/code&gt;在资源文件方面做了优化，将多个服务所需要的多个资源配置文件优化为统一的文件&lt;code&gt;spring.factories&lt;/code&gt;，同时，文件的格式也是标准的&lt;code&gt;Properties&lt;/code&gt;格式，这样对开发者要友好很多。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Spring&lt;/code&gt;框架的源代码中，大量的都使用了&lt;code&gt;SPI&lt;/code&gt;机制进行扩展，有的扩展甚至有几十个之多，例如：&lt;code&gt;EnableAutoConfiguration.class&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPI&lt;/code&gt;机制带来的可扩展性是得到了业界的认可的。&lt;/p&gt;
&lt;p&gt;接下来会分析&lt;code&gt;Dubbo&lt;/code&gt;框架中的&lt;code&gt;SPI&lt;/code&gt;的实现，看看&lt;code&gt;Dubbo&lt;/code&gt;的实现又有什么区别。&lt;/p&gt;
&lt;p&gt;好了，这一篇的内容到此就结束了，欢迎各种反馈和交流！&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;Toml Lang&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/tomlj/tomlj&#34;&gt;Toml Lang v1.0.0-rc Java Implement&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/unclezhao/architecture-std&#34;&gt;示例代码仓库&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/spi/">SPI</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/microkernel/">MicroKernel</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/spring/">Spring</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/spi/">SPI</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：SPI之JDK实现</title>
                <link>https://zhaoyang.me/posts/architecture-from-source-code-jdk-spi/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/architecture-from-source-code-jdk-spi/</guid>
                <pubDate>Wed, 17 Jun 2020 11:48:53 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;TL;DR&lt;/p&gt;
&lt;p&gt;开篇提到了&lt;strong&gt;good design&lt;/strong&gt;，那如何评价一个设计是不是好的设计呢？其中很重要的一点就是：&lt;strong&gt;具有良好的扩展性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如何让自己的设计具有良好的扩展性呢？首先想到的就是插件机制了。没错，就是插件机制，像&lt;code&gt;Eclipse&lt;/code&gt;、&lt;code&gt;IntelliJ IDEA&lt;/code&gt;这些开发软件都支持大量的插件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;本身提供了一种叫&lt;code&gt;SPI&lt;/code&gt;（&lt;code&gt;Service Provider Interface&lt;/code&gt;）的插件机制，在&lt;code&gt;JDK&lt;/code&gt;中大量使用，如&lt;code&gt;JDBC&lt;/code&gt;、&lt;code&gt;JNDI&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;像&lt;code&gt;Spring&lt;/code&gt;、&lt;code&gt;Dubbo&lt;/code&gt;这些开源框架也是基于&lt;code&gt;SPI&lt;/code&gt;机制实现可扩展性，只不过，&lt;code&gt;Spring&lt;/code&gt;和&lt;code&gt;Dubbo&lt;/code&gt;框架自身的&lt;code&gt;SPI&lt;/code&gt;分别在&lt;code&gt;JDK&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;基础上进行了扩展，这些后续在对这两个框架的源码分析中会进行比较，这篇先分析&lt;code&gt;JDK&lt;/code&gt;提供的&lt;code&gt;SPI&lt;/code&gt;机制。&lt;/p&gt;
&lt;p&gt;本篇内容大纲如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是&lt;strong&gt;SPI&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SPI&lt;/strong&gt;解决了什么问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JDK&lt;/strong&gt;源码中如何使用&lt;strong&gt;SPI&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;基于&lt;strong&gt;SPI&lt;/strong&gt;机制的实现示例&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JDK&lt;/strong&gt;的&lt;strong&gt;SPI&lt;/strong&gt;有什么限制吗&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先我们需要了解下什么是&lt;code&gt;SPI&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;0x01-什么是spi&#34;&gt;0x01 什么是SPI？&lt;/h4&gt;
&lt;p&gt;维基百科对&lt;code&gt;SPI&lt;/code&gt;的定义是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Service Provider Interface (SPI) is an API intended to be implemented or extended by a third party. It can be used to enable framework extension and replaceable components.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单的说&lt;code&gt;SPI&lt;/code&gt;是提供给第三方用以实现或扩展的&lt;code&gt;API&lt;/code&gt;，它可以被用于框架暴露出扩展点实现组件的替换。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPI&lt;/code&gt;的定义中有&lt;code&gt;Service&lt;/code&gt;、&lt;code&gt;Provider&lt;/code&gt;、&lt;code&gt;Interface&lt;/code&gt;三个名词，那什么是&lt;code&gt;Service&lt;/code&gt;，什么是&lt;code&gt;Provider&lt;/code&gt;，接口的用途是什么呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Service&lt;/code&gt;（服务）：是指一组众所周知的接口或类（通常是抽象类）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Service Provider&lt;/code&gt;（服务提供者）：是指&lt;code&gt;Service&lt;/code&gt;的一个特定实现，服务提供者通常会实现服务接口（或继承服务抽象类）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实，除了服务和服务提供者，还有一个角色就是服务加载器（&lt;code&gt;Service Loader&lt;/code&gt;），它是专门负责加载某一类插件的，这个后面会介绍。&lt;/p&gt;
&lt;p&gt;服务提供者可以打成&lt;code&gt;jar&lt;/code&gt;包之后放到&lt;code&gt;Java&lt;/code&gt;平台的扩展目录下来进行安装，也可以放置到程序的&lt;code&gt;classpath&lt;/code&gt;下或其它一些特定于平台的方式来让服务提供者变得可用。（我们通常是通过&lt;code&gt;classpath&lt;/code&gt;的方式来使用）&lt;/p&gt;
&lt;p&gt;出于加载的目的，一个服务通常为一个接口或一个抽象类（非抽象类也可以使用，但不推荐）。一个服务提供者可以是一个或多个类，这些类之间相互协作来实现服务接口，以提供服务的能力。不同的服务提供者的具体实现细节不同，通常不同的服务提供者会提供差异化的服务。&lt;/p&gt;
&lt;p&gt;服务提供者的唯一要求就是&lt;strong&gt;必须要有无参构造函数&lt;/strong&gt;，这样才能在加载时被正常的实例化。&lt;/p&gt;
&lt;p&gt;既然可以有不同服务提供者，那系统如何识别多个不同的服务提供者呢？&lt;/p&gt;
&lt;p&gt;服务提供者是通过放置在资源目录&lt;code&gt;META-INF/services&lt;/code&gt;下的一个提供者配置文件来标识的。这个&lt;strong&gt;配置文件的名称是服务接口的全路径名称&lt;/strong&gt;（即：包名+类名），&lt;strong&gt;配置文件的内容是服务提供者的全路径名称的列表&lt;/strong&gt;，每行一个，其中空格、制表符和空行都会被忽略，注释的符号为&lt;code&gt;#&lt;/code&gt;，注释符号后面的所有内容都会被忽略；最后，文件的编码必须是&lt;strong&gt;UTF-8&lt;/strong&gt;格式。&lt;/p&gt;
&lt;p&gt;如果一个服务提供者在多个配置文件中配置，或是在同一个配置文件中配置了多次，重复的项会被忽略。&lt;/p&gt;
&lt;p&gt;另外，服务提供者的配置文件和二进制文件可以不在同一个&lt;code&gt;jar&lt;/code&gt;包中，只需要保证配置文件和二进制文件可以被同一个类加载器（&lt;code&gt;Class Loader&lt;/code&gt;）加载即可。&lt;/p&gt;
&lt;p&gt;服务加载器（&lt;code&gt;Service Loader&lt;/code&gt;）使用延迟加载的方式加载服务提供者，换句话说，只有在真正使用到某个具体的服务提供者时，该服务提供者才会被实例化。并且，实例化后的服务提供者实例会被缓存，服务加载器提供了&lt;code&gt;reload()&lt;/code&gt;方法来清除缓存。&lt;/p&gt;
&lt;h4 id=&#34;0x02-spi解决了什么问题&#34;&gt;0x02 SPI解决了什么问题&lt;/h4&gt;
&lt;p&gt;上面对服务（&lt;code&gt;Service&lt;/code&gt;）、服务提供者（&lt;code&gt;Service Provider&lt;/code&gt;）和服务加载器（&lt;code&gt;Service Loader&lt;/code&gt;）进行了介绍，我们知道服务提供者是真正的服务实现者，而且服务加载器可以加载各种实现了同一服务的不同的服务提供者。&lt;/p&gt;
&lt;p&gt;为什么要支持对一个服务支持不同的服务提供者呢？从面向对象设计原则的角度来看，它是符合了开闭原则（&lt;code&gt;OCP&lt;/code&gt;）的，框架的处理逻辑只依赖于一个抽象（&lt;code&gt;SPI&lt;/code&gt;这里可以是接口或抽象类），具体的实现变成了一种可拔插的方式，系统变得更松散，当系统需要支持某种服务的另一种实现时，不用修改系统本身，增加一种具体实现（服务提供者）即可，增强了系统的可扩展性。&lt;/p&gt;
&lt;p&gt;再看维基百科上对&lt;code&gt;SPI&lt;/code&gt;的定义中有一句话：被用于框架暴露出扩展点实现组件的替换。&lt;/p&gt;
&lt;p&gt;也就是说，&lt;code&gt;SPI&lt;/code&gt;一般用于把框架的扩展点暴露给开发者，让开发者可以实现组件的替换。但实际上并不只是局限于替换，也可以是扩展服务能力，具体取决于框架的逻辑实现，这个后面举例说明。&lt;/p&gt;
&lt;p&gt;无论是替换还是扩展，其实本质上就是让我们的系统更加的向面向对象的设计目标靠拢：高内聚，低耦合。通过满足开闭原则，提供框架本身的可扩展性，这就是&lt;code&gt;SPI&lt;/code&gt;本身想解决的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925485964882.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图是服务、服务提供者、服务加载器之间的关系图。&lt;/p&gt;
&lt;h4 id=&#34;0x03-jdk中如何使用spi&#34;&gt;0x03 JDK中如何使用SPI&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;JDK&lt;/code&gt;在很多地方都使用了&lt;code&gt;SPI&lt;/code&gt;机制来提升扩展能力，维基百科中列举的有下面这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java Database Connectivity&lt;/li&gt;
&lt;li&gt;Java Cryptography Extension&lt;/li&gt;
&lt;li&gt;Java Naming and Directory Interface&lt;/li&gt;
&lt;li&gt;Java API for XML Processing&lt;/li&gt;
&lt;li&gt;Java Business Integration&lt;/li&gt;
&lt;li&gt;Java Sound&lt;/li&gt;
&lt;li&gt;Java Image I/O&lt;/li&gt;
&lt;li&gt;Java File Systems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对我们而言，接触最多的当属第一个，也就是&lt;code&gt;JDBC&lt;/code&gt;了，我们就看一下&lt;code&gt;JDBC&lt;/code&gt;是如何使用&lt;code&gt;SPI&lt;/code&gt;的吧。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author zhaoyang
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestJdbcSpi&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Connection conn&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Before&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            Class&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;forName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.hsqldb.jdbcDriver&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DriverManager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getConnection&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jdbc:hsqldb:mem:test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sa&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            ScriptRunner sr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ScriptRunner&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            sr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setLogWriter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            sr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runScript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Resources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getResourceAsReader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;create-schema.sql&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
            sr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runScript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Resources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getResourceAsReader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;init-data.sql&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testJdbcSpiByHsqldb&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        SqlRunner sr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlRunner&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;selectAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from user&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            assertTrue&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user data not found&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SQLException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上图是使用&lt;code&gt;HSQLDB&lt;/code&gt;进行测试的例子。&lt;/p&gt;
&lt;p&gt;我们来分析一下这里哪里用到了&lt;code&gt;SPI&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Before&lt;/code&gt;标的方法是&lt;code&gt;junit&lt;/code&gt;运行测试方法的前置方法，它会在每个&lt;code&gt;@Test&lt;/code&gt;测试运行之前运行一次，我们这里只有一个&lt;code&gt;@Test&lt;/code&gt;方法，并且，&lt;code&gt;HSQLDB&lt;/code&gt;是内存数据库，所以这么写没有关系。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;setUp&lt;/code&gt;方法中我们首先调用了&lt;code&gt;Class.forName(&amp;quot;org.hsqldb.jdbcDriver&amp;quot;)&lt;/code&gt;这一行代码，它的作用是将指定的类加载进来（加载的是&lt;code&gt;Class&lt;/code&gt;），这个过程会强制&lt;code&gt;ClassLoader&lt;/code&gt;加载&lt;code&gt;Class&lt;/code&gt;，同时会执行&lt;code&gt;static&lt;/code&gt;代码块；其实，把这一行注释掉，代码也是可以正常运行的（前提是在&lt;code&gt;JVM&lt;/code&gt;的&lt;code&gt;classpath&lt;/code&gt;下能加载到&lt;code&gt;org.hsqldb.jdbcDriver&lt;/code&gt;这个类，以及它所依赖的其它类），原因等下再说。&lt;/p&gt;
&lt;p&gt;接下来，通过&lt;code&gt;DriverManager.getConnection(&amp;quot;jdbc:hsqldb:mem:test&amp;quot;, &amp;quot;sa&amp;quot;, &amp;quot;&amp;quot;)&lt;/code&gt;就能获取到&lt;code&gt;Connection&lt;/code&gt;对象了，它怎么知道我要哪个对象呢？这里就用到了&lt;code&gt;SPI&lt;/code&gt;机制，查看&lt;code&gt;DriverManager&lt;/code&gt;的源码，我们可以看到在它的类中有一个静态代码块：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925358417076.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个代码块在&lt;code&gt;DriverManager&lt;/code&gt;类加载的时候就会被调用，里面有一个&lt;code&gt;loadInitialDrivers()&lt;/code&gt;方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925360292126.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中关键的一行是：&lt;code&gt;ServiceLoader&amp;lt;Driver&amp;gt; loadedDrivers = ServiceLoader.load(Driver.class);&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这里调用了服务加载器来查找所有&lt;code&gt;Driver.class&lt;/code&gt;的服务提供者，这个&lt;code&gt;Driver.class&lt;/code&gt;是&lt;code&gt;java.sql.Driver&lt;/code&gt;，是一个接口，定义了服务要实现的方法。&lt;/p&gt;
&lt;p&gt;服务加载器会把所有查找到的服务提供者全部加载进来（上图中的&lt;code&gt;while&lt;/code&gt;循环）。&lt;/p&gt;
&lt;p&gt;这里特别注意一下：&lt;code&gt;loadedDrivers.iterator()&lt;/code&gt;，跟进去&lt;code&gt;ServiceLoader&lt;/code&gt;类，你会发现，这里返回的&lt;code&gt;Iterator&lt;/code&gt;对象是&lt;code&gt;ServiceLoader&lt;/code&gt;的一个内部匿名实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925400732852.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在随后的&lt;code&gt;while&lt;/code&gt;循环时，里面调用的&lt;code&gt;driversIterator.next();&lt;/code&gt;实际就是调用的上面图片中的&lt;code&gt;next()&lt;/code&gt;方法，这个&lt;code&gt;next()&lt;/code&gt;方法的实现，它在交替的通过延迟加载的方式来处理服务提供者。本质上&lt;code&gt;next()&lt;/code&gt;方法都会触发到&lt;code&gt;LazyIterator#nextService()&lt;/code&gt;方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925405806674.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;而这个方法中，有一行代码是在调用：&lt;code&gt;Class.forName(cn, false, loader);&lt;/code&gt;，这不就是我们前面测试代码中给注释掉的那行代码吗？原来，&lt;code&gt;ServiceLoader&lt;/code&gt;在加载&lt;code&gt;Provider&lt;/code&gt;时，默认会去把对应的服务的&lt;code&gt;Class&lt;/code&gt;加载进来，这个过程会触发对应的&lt;code&gt;Class&lt;/code&gt;的静态代码块，为什么要强调触发静态代码块呢？我们后面再分析。&lt;/p&gt;
&lt;p&gt;当我们的测试用例在启动的时候，在调用&lt;code&gt;DriverManager&lt;/code&gt;类的方法之前，&lt;code&gt;DriverManager&lt;/code&gt;会先去&lt;code&gt;classpath&lt;/code&gt;下搜索所有&lt;code&gt;java.sql.Driver&lt;/code&gt;的服务提供者，这里会扫描&lt;code&gt;classpath&lt;/code&gt;下的&lt;code&gt;jar&lt;/code&gt;包，搜索服务配置文件，这个配置文件的路径是在资源目录&lt;code&gt;META-INF/services&lt;/code&gt;下，文件名称在这里应该是&lt;code&gt;java.sql.Driver&lt;/code&gt;，我们查看项目工程的依赖路径下，因为我们使用的是&lt;code&gt;HSQLDB&lt;/code&gt;，所以在项目依赖中，我们会添加&lt;code&gt;hsqldb-xxx.jar&lt;/code&gt;的依赖（这里的&lt;code&gt;xxx&lt;/code&gt;是版本号）。&lt;/p&gt;
&lt;p&gt;我们点开&lt;code&gt;hsqldb-xxx.jar&lt;/code&gt;，我们可以看到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925363833175.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个&lt;code&gt;jar&lt;/code&gt;包下面，确实有对应的路径和文件，打开文件，可以看到里面的内容是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925364204669.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按照前面的约定，这个文件的内容就是全路径的服务提供者名称，我们就可以打开这个类来看一下就会发现，&lt;code&gt;org.hsqldb.jdbcDriver&lt;/code&gt;实现了&lt;code&gt;java.sql.Driver&lt;/code&gt;类。&lt;/p&gt;
&lt;p&gt;到这里为止，感觉确实是通过&lt;code&gt;SPI&lt;/code&gt;的方式加载了&lt;code&gt;HSQLDB&lt;/code&gt;的驱动，如果我的&lt;code&gt;classpath&lt;/code&gt;下有多个厂商提供的驱动会怎样呢？&lt;/p&gt;
&lt;p&gt;我们在&lt;code&gt;classpath&lt;/code&gt;下加上&lt;code&gt;h2&lt;/code&gt;内存数据库的依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;com&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;h2database&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;h2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;version&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;version&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;scope&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;scope&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后同样在项目的依赖下找到&lt;code&gt;h2-xxx.jar&lt;/code&gt;的&lt;code&gt;jar&lt;/code&gt;包，点开，可以看到：&lt;/p&gt;
&lt;p&gt;`&lt;img src=&#34;https://zhaoyang.me/img/15925371593865.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;完全符合&lt;code&gt;JDBC&lt;/code&gt;对第三方扩展的规范，这里&lt;code&gt;java.sql.Driver&lt;/code&gt;文件的内容为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925372106896.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;打开这个类文件，可以发现&lt;code&gt;org.h2.Driver&lt;/code&gt;也同样实现了&lt;code&gt;java.sql.Driver&lt;/code&gt;接口。&lt;/p&gt;
&lt;p&gt;到现在为止，我们清楚&lt;code&gt;Service&lt;/code&gt;、&lt;code&gt;Service Provider&lt;/code&gt;和&lt;code&gt;ServiceLoader&lt;/code&gt;三者的关系，但我们还是不清楚，一个第三方的&lt;code&gt;java.sql.Driver&lt;/code&gt;实现具体是怎么被&lt;code&gt;DriverManager&lt;/code&gt;发现的，现在还只有&lt;code&gt;ServiceLoader&lt;/code&gt;知道了这些第三方实现的存在。&lt;/p&gt;
&lt;p&gt;我们再看一下&lt;code&gt;DriverManager#getConnection()&lt;/code&gt;方法（参数去掉了），这里面有一段循环处理已注册的驱动的代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925408646269.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;原来&lt;code&gt;DriverManager&lt;/code&gt;循环查找已经向自己注册过的&lt;code&gt;Driver&lt;/code&gt;类，那第三方的驱动是什么时候，又是如何向&lt;code&gt;DrvierManager&lt;/code&gt;注册的呢？我们清楚了这一些，整个流程才全部串联起来了。&lt;/p&gt;
&lt;p&gt;前面一直在强调&lt;code&gt;Class#forName()&lt;/code&gt;方法会触发对应类的静态代码块，那就可以猜测一下，是不是第三方的实现在实现类中有一段静态代码块专门来向&lt;code&gt;DrvierManager&lt;/code&gt;注册自己，这样在&lt;code&gt;ServiceLoader&lt;/code&gt;加载到自己时，通过&lt;code&gt;Class#forName()&lt;/code&gt;方法就可以触发自己的注册流程了（这就是为什么前面的测试用例，注释了&lt;code&gt;Class#forName()&lt;/code&gt;那行代码，测试用例也能正常运行的原因，这是&lt;code&gt;JDBC 4.0&lt;/code&gt;新增的功能）。&lt;/p&gt;
&lt;p&gt;于是，我们去查看前面的两个驱动类：&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;org.hsqldb.jdbc.JDBCDriver&lt;/code&gt;类中有这样一段静态代码块：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925411586770.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样，在&lt;code&gt;org.h2.Driver&lt;/code&gt;类中有这样一代静态代码块：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925412104743.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;对应的&lt;code&gt;load()&lt;/code&gt;方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925412260019.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;果然是这样啊，第三方的实现在自己的服务提供者实现类中，增加一个静态代码块，这个代码块中通过调用&lt;code&gt;DriverManager#registerDriver()&lt;/code&gt;方法来把自己的实例注册给&lt;code&gt;DriverManager&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这两个都是内存数据库，我想知道我们常用的&lt;code&gt;MySQL&lt;/code&gt;是不是也是这样，于是，把&lt;code&gt;MySQL&lt;/code&gt;的&lt;code&gt;JDBC&lt;/code&gt;驱动添加到项目的依赖中，然后去找到资源配置文件里面的类，打开：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925414515314.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;结果既不惊喜也不意外，非常直接。&lt;/p&gt;
&lt;p&gt;至此，我们已经研究了&lt;code&gt;java.sql.Driver&lt;/code&gt;的多个扩展实现了，你再看&lt;code&gt;MySQL&lt;/code&gt;、&lt;code&gt;Oracle&lt;/code&gt;等数据库的驱动&lt;code&gt;jar&lt;/code&gt;包，也会发现它们也都符合&lt;code&gt;JDBC&lt;/code&gt;对第三方的扩展规范。&lt;/p&gt;
&lt;p&gt;现在，我们的&lt;code&gt;classpath&lt;/code&gt;上有了&lt;code&gt;java.sql.Driver&lt;/code&gt;的多个服务提供者，那会不会出问题呢？&lt;/p&gt;
&lt;p&gt;按照前面定义里讲的话是不会出问题的，因为只有你的代码使用到某一个具体的服务提供者的时候，它才会去加载它，同时存在多个是不会影响的。&lt;/p&gt;
&lt;p&gt;我们试一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestJdbcSpi&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Connection conn&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testJdbcSpiByHsqldb&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            Class&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;forName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.hsqldb.jdbc.JDBCDriver&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DriverManager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getConnection&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jdbc:hsqldb:mem:test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sa&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SQLException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testJdbcSpiByH2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            Class&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;forName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.h2.Driver&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DriverManager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getConnection&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jdbc:h2:mem:test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sa&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SQLException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行整个测试类，两个测试方法被执行，分别输出如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925375003834.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;两个测试方法各自正确的加载了各自需要的驱动，并打印出了各自获取到的连接对象的类名。&lt;/p&gt;
&lt;p&gt;到这里，&lt;code&gt;JDK&lt;/code&gt;源码中使用&lt;code&gt;SPI&lt;/code&gt;的分析就结束了。&lt;/p&gt;
&lt;p&gt;通过上面的实践，我们可以知道，对于一个&lt;code&gt;Service&lt;/code&gt;，我们可以实现很多不同的&lt;code&gt;Service Provier&lt;/code&gt;，这些不同的&lt;code&gt;Provider&lt;/code&gt;是可以共存在同一个&lt;code&gt;classpath&lt;/code&gt;下的，而且，我们要扩展一种新的&lt;code&gt;Service Provider&lt;/code&gt;能力时，不用去修改原来的代码，只需要按照约定的规范去做一个新的&lt;code&gt;Provider&lt;/code&gt;即可，最后把它放到程序能加载到的地方（通常是程序的&lt;code&gt;classpath&lt;/code&gt;，但并不只有这一个位置可以放，具体有哪些路径和&lt;code&gt;jvm&lt;/code&gt;的加载机制有关），这样我们的程序的可扩展性就大大的增强了。&lt;/p&gt;
&lt;h4 id=&#34;0x04-基于spi机制的实现示例&#34;&gt;0x04 基于&lt;strong&gt;SPI&lt;/strong&gt;机制的实现示例&lt;/h4&gt;
&lt;p&gt;现在我们清楚了整个&lt;code&gt;SPI&lt;/code&gt;运行的流程，以及各个不同的角色的职责分工，下面应该动手实践了。&lt;/p&gt;
&lt;p&gt;首先，定义一个服务接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dictionary&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Get the definition of the input word.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param word the query word
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return the definition of the word
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    String &lt;span style=&#34;color:#a6e22e&#34;&gt;getDefinition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String word&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后定义两个不同的服务提供者：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExtendedDictionary&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Dictionary &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SortedMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExtendedDictionary&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ExtendedDictionary loaded&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TreeMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xml&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a document standard often used in web services, among other things&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;REST&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;an architecture style for creating, reading, updating, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;and deleting data that attempts to use the common &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vocabulary of the HTTP protocol; Representational State &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Transfer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getDefinition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String word&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;word&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GeneralDictionary&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Dictionary &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SortedMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GeneralDictionary&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GeneralDictionary loaded&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TreeMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a set of written or printed pages, usually bound with &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a protective cover&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;editor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a person who edits&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getDefinition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String word&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;word&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务提供者的构造函数有一行代码会打印一行信息，这个信息会在服务提供者被实例化时输出，加上这一行代码的目的是想验证服务提供者被加载的次数。&lt;/p&gt;
&lt;p&gt;然后实现服务的调用方：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DictionaryService&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ServiceLoader&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Dictionary&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; serviceLoader&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Not allowed create DictionaryService instances from other place.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DictionaryService&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// load all Dictionaries when initialized DictionaryService.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        loadServices&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; DictionaryService &lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; LazyHolder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SERVICE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Singleton instance holder
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LazyHolder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; DictionaryService SERVICE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DictionaryService&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * ServiceLoader load all Dictionary.class implements
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loadServices&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        serviceLoader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ServiceLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Dictionary&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Find definition from all loaded dictionaries.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * If found, return the first matched definition,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * otherwise, return null.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param word the query word.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return The first result find from all Dictionaries.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getDefinition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String word&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String definition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;//            serviceLoader.reload();
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Iterator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Dictionary&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dictionaries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serviceLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;iterator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;definition &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; dictionaries&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                Dictionary d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dictionaries&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                definition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getDefinition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;word&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ServiceConfigurationError error&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            definition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            error&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; definition&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的服务调用方使用了单例模式，确保系统只创建一个实例。这里定义了一个&lt;code&gt;getDefinition&lt;/code&gt;方法，这是真正被系统使用的方法，本质上，这里是定义的服务&lt;code&gt;Dictionary&lt;/code&gt;被如何使用的逻辑。&lt;/p&gt;
&lt;p&gt;从上面的代码我们可以看到，对于输入的&lt;code&gt;word&lt;/code&gt;，我们会对服务加载器所加载到的所有的服务提供者都会去调用它们所实现的&lt;code&gt;getDefinition&lt;/code&gt;方法。这与&lt;code&gt;java.sql.Driver&lt;/code&gt;的服务使用逻辑不太一样，&lt;code&gt;java.sql.Driver&lt;/code&gt;是替换的思想，而我们这里是组合的思想，对于输入的&lt;code&gt;word&lt;/code&gt;，如果没有查到对应的定义，只要还有服务提供者就会继续遍历下去，直到遍历完所有的服务提供者为止。&lt;/p&gt;
&lt;p&gt;注释掉的那行：&lt;code&gt;serviceLoader.reload()&lt;/code&gt;是用来验证&lt;code&gt;ServiceLoader&lt;/code&gt;的缓存的。&lt;/p&gt;
&lt;p&gt;然后就是测试代码了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DictionaryApp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Using &amp;lt;code&amp;gt;DictionaryService&amp;lt;/code&amp;gt; to look up the word definition.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param dictService concrete look up service
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param word the query word
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return the definition of the word
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DictionaryService dictService&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String word&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        String definition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dictService&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getDefinition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;word&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;definition &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; output &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot find definition for this word.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; output &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; definition&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        DictionaryService dictService &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DictionaryService&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lookup&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dictService&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lookup&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dictService&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;editor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lookup&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dictService&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xml&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lookup&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dictService&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;REST&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lookup&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dictService&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not-exist&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lookup&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dictService&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;code&gt;DictionaryApp&lt;/code&gt;的&lt;code&gt;main()&lt;/code&gt;方法中，调用了两次&lt;code&gt;lookup(dictService, &amp;quot;book&amp;quot;)&lt;/code&gt;，目的是为了验证服务加载器会对每个特定的服务加载几次。&lt;/p&gt;
&lt;p&gt;运行程序，得到输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15925470745937.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，我们自己的实现和我们的预期一样执行。&lt;/p&gt;
&lt;p&gt;另外，这里的示例，服务的定义、服务的两种不同实现，以及服务的调用分别是放在不同的工程下的，具体参考文末的示例代码链接的仓库代码。（本地运行需要先在项目根目录下执行&lt;code&gt;mvn install&lt;/code&gt;，将包安装到本地仓库，否则可能会提示找不到&lt;code&gt;jar&lt;/code&gt;包）&lt;/p&gt;
&lt;h4 id=&#34;0x05-jdk的spi有什么限制吗&#34;&gt;0x05 &lt;strong&gt;JDK&lt;/strong&gt;的&lt;strong&gt;SPI&lt;/strong&gt;有什么限制吗&lt;/h4&gt;
&lt;p&gt;到这里，关于&lt;code&gt;JDK&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;就全部讲完了，那这个&lt;code&gt;SPI&lt;/code&gt;完美吗？有没有什么局限性呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JDK&lt;/code&gt;提供的&lt;code&gt;ServiceLoader&lt;/code&gt; &lt;code&gt;API&lt;/code&gt;很有用，但也有其局限性。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ServiceLoader&lt;/code&gt;是一个&lt;code&gt;final&lt;/code&gt;类，不能被扩展，也就是说，我们没有办法去改变服务加载器的加载行为；&lt;/li&gt;
&lt;li&gt;当前的&lt;code&gt;ServiceLoader&lt;/code&gt;没办法在运行时加载新的服务提供者；&lt;/li&gt;
&lt;li&gt;我们也没有办法对&lt;code&gt;ServiceLoader&lt;/code&gt;增加&lt;code&gt;Listener&lt;/code&gt;来监听一些感兴趣的变化事件等；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;0x06-总结&#34;&gt;0x06 总结&lt;/h4&gt;
&lt;p&gt;到这里，我们把&lt;code&gt;JDK&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;机制完整的分析了一遍，并通过一个示例实践动手验证了它的一些约定等。&lt;/p&gt;
&lt;p&gt;我们也清楚了&lt;code&gt;SPI&lt;/code&gt;的目的是什么，有什么用处，如何使用等，未来，我们可以轻松的把这种扩展机制应用到我们的代码中，让我们代码的扩展能力更强。&lt;/p&gt;
&lt;p&gt;同时，我们也知道&lt;code&gt;JDK&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;也有一些局限性，所以后面的&lt;code&gt;Spring&lt;/code&gt;和&lt;code&gt;Dubbo&lt;/code&gt;框架都在这个基础之上对&lt;code&gt;SPI&lt;/code&gt;进行了增强，接下来会分析&lt;code&gt;Spring&lt;/code&gt;中的&lt;code&gt;SPI&lt;/code&gt;，然后再分析&lt;code&gt;Dubbo&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;，我个人觉得&lt;code&gt;Dubbo&lt;/code&gt;的&lt;code&gt;SPI&lt;/code&gt;是这三者中最美的。&lt;/p&gt;
&lt;p&gt;好了，这一篇的内容到此就结束了，欢迎各种反馈和交流！&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Service_provider_interface&#34;&gt;Service Provider Interface&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/ext/basics/spi.html&#34;&gt;Creating Extensible Applications&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html&#34;&gt;ServiceLoader API Document&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://plentymore.github.io/2019/01/04/IDEA%E6%9F%A5%E7%9C%8BJava%E7%9A%84sun%E5%8C%85%E4%B8%8B%E7%9A%84%E6%BA%90%E7%A0%81/&#34;&gt;如何在&lt;code&gt;IDEA&lt;/code&gt;中查看&lt;code&gt;JDK&lt;/code&gt;中的&lt;code&gt;sun&lt;/code&gt;包下的源码&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/openjdk-mirror/jdk&#34;&gt;&lt;code&gt;OpenJDK&lt;/code&gt;源码镜像&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/unclezhao/architecture-std&#34;&gt;示例代码仓库&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/spi/">SPI</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/microkernel/">MicroKernel</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/spi/">SPI</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>读源码学架构系列：开篇</title>
                <link>https://zhaoyang.me/posts/architecture-from-source-code-guidelines/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/architecture-from-source-code-guidelines/</guid>
                <pubDate>Mon, 15 Jun 2020 13:18:08 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;有感于自己对架构似是而非、朦朦胧胧的理解，并且对于架构的基础理论没有形成知识体系，所以就想从一些优秀的开源框架中去学习它们的设计思想，同时基于自己的理解和积累看能否总结出属于自己的架构知识体系。&lt;/p&gt;
&lt;p&gt;我不知道自己能写出一些什么东西，也不知道自己能坚持多久，但是平时教导儿子什么都要勇于尝试，身为父亲更应当以身做则，于是乎就写下了这篇，后续会输出一些我个人阅读源码时的一些理解。&lt;/p&gt;
&lt;p&gt;输出的目的其实很简单：我希望我能把我理解的东西清晰的描述出来。以此来检验我是否真的理解了。&lt;/p&gt;
&lt;p&gt;这篇文章是这个系列的开篇（努力让系列成为可能），主要包括以下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对架构师的灵魂拷问&lt;/li&gt;
&lt;li&gt;架构是不是无迹可寻&lt;/li&gt;
&lt;li&gt;让架构成为重中之重&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是正文开始，文中所参考的链接全部放在文末。&lt;/p&gt;
&lt;h4 id=&#34;0x01-对架构师的灵魂拷问&#34;&gt;0x01 对架构师的灵魂拷问&lt;/h4&gt;
&lt;p&gt;“什么是软件架构？”&lt;/p&gt;
&lt;p&gt;我觉得这个问题可以成为&lt;strong&gt;IT&lt;/strong&gt;行业的灵魂拷问。为什么呢？我个人的感受是：因为似乎&lt;code&gt;100&lt;/code&gt;个人对架构（以下特指软件架构）这个词会出现&lt;code&gt;100&lt;/code&gt;种理解，然而更奇妙的地方在于，对于不同的人所理解的架构的含义，基本上你无法指出对方的理解哪里不对，同时，又会觉得好像和自己的理解不完全一样，而且你还不一定能给别人解释清楚。&lt;/p&gt;
&lt;p&gt;我自己对架构的定义理解就是这样一种状态。&lt;/p&gt;
&lt;p&gt;当我发现自己无法对架构这个词给出清晰的描述时，我就去搜索引擎搜索，于是在维基百科上找到了关于它的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;软件架构&lt;/strong&gt;是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看完这句话并没有帮助我理解软件架构的定义。中文版看不懂，那就切到英文版。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Software architecture refers to the fundamental structures of a software system and the discipline of creating such structures and systems. Each structure comprises software elements, relations among them, and properties of both elements and relations. The architecture of a software system is a metaphor, analogous to the architecture of a building. It functions as a blueprint for the system and the developing project, laying out the tasks necessary to be executed by the design teams.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Software architecture is about making fundamental structural choices that are costly to change once implemented. Software architecture choices include specific structural options from possibilities in the design of the software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大意就是说软件架构是软件系统的基石，它是对建筑学中建筑架构的一种类比，它是系统和项目开发的蓝图，指明了设计团队必须要实现的任务。并且软件架构是对（系统的）基础结构做选择的，这个选择一旦被实现之后，再要修改将会耗费巨大的成本。软件架构的选择包括了在软件设计时所有明确的结构选项。&lt;/p&gt;
&lt;p&gt;感觉也还不是那么的清楚，完全不像我们平时所碰到的对名词的定义。&lt;/p&gt;
&lt;p&gt;在继续搜索的过程中，找到了大师（&lt;code&gt;Martin Fowler&lt;/code&gt;）的一篇文章（&lt;code&gt;Software Architecture Guide&lt;/code&gt;），里面的第一个问题就是我们最前面的灵魂拷问：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is architecture?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大师&lt;code&gt;Martin Fowler&lt;/code&gt;说在软件界，人们对架构的定义已经争论了很久（&lt;code&gt;long argued&lt;/code&gt;），他和另外一名大师（&lt;code&gt;Ralph Johnson&lt;/code&gt;，&lt;code&gt;Gang of Four Design Patterns&lt;/code&gt;的作者之一）通过邮件的不断交流，得出的一个想法是：从一个更好的角度来看，&lt;strong&gt;架构是用来分享开发专家对系统设计的理解的&lt;/strong&gt;（英文原文：&lt;code&gt; a better view of architecture was the shared understanding that the expert developers have of the system design.&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;而大师&lt;code&gt;Ralph Johnson&lt;/code&gt;的结论是：&lt;strong&gt;不管它是什么，反正架构是很重要的东西&lt;/strong&gt;。（英文原文：&lt;code&gt;Architecture is about the important stuff. Whatever that is.&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;看来业内大师们也没能给架构给出一个明确的定义（所以在文章开头我把这个问题当作是灵魂拷问），那我自己的这种朦胧状态的理解应该也没有什么问题了。&lt;/p&gt;
&lt;h4 id=&#34;0x02-架构是不是无迹可寻&#34;&gt;0x02 架构是不是无迹可寻&lt;/h4&gt;
&lt;p&gt;虽然没有人对架构给出过明确的定义，那架构是不是无迹可寻呢？&lt;/p&gt;
&lt;p&gt;答案是：架构是有迹可寻的。&lt;/p&gt;
&lt;p&gt;大师&lt;code&gt;Martin Fowler&lt;/code&gt;前面的结论可以看作是架构的一种意义（不是含义，也不是定义）吧：&lt;strong&gt;架构是用来分享开发专家对系统设计的理解的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;既然架构是用来分享设计者的理念的，那我们是不是可以理解为：开发专家（架构师）针对系统的需求，作出了自己的设计（或是团队做出的设计），并给出了实现。那假如有一天，有别人（或别的团队）需要用到这个实现，对方希望能够理解该实现的设计原理和思想，以及如何通过扩展与自己的设计实现进行集成，这时怎么办呢？当然是让对方理解自己的设计思想了，明白了设计思想就能理解实现中的各个模块、组件的用途和意义了，同时也理解了整个设计是如何组成一个整体，如何运作的了。&lt;/p&gt;
&lt;p&gt;那分享的对象只有同样角色的开发人员或开发团队吗？&lt;/p&gt;
&lt;p&gt;答案是：不一定。&lt;/p&gt;
&lt;p&gt;分享的对象有可能是具体的开发人员，也有可能是用户（使用者），还有可能是需求方的管理者等等。&lt;/p&gt;
&lt;p&gt;既然分享的目标群体多样，那是不是就应该针对不同的目标群体有不同的分享内容呢？毕竟你把软件设计的思想（例如：系统使用了哪些设计模式，组件拆分的考虑是基于什么考虑等）分享给用户，用户也未必能懂，最关键的点在于用户所关注的点并不在你的系统设计上，而是在系统的使用上。对需求方的管理层这个目标群体，道理也一样。&lt;/p&gt;
&lt;p&gt;所以，这里就需要有针对不同相关方的架构文档存在了。针对不同相关方的架构文档的具体内容有重叠也有不同，比如，针对开发人员的架构文档应该更关注系统设计的细节，类似于组件之间的调用流程、时序等；针对需求方管理层的架构文档更关注系统的部署模型等。&lt;/p&gt;
&lt;p&gt;具体到架构设计过程中，可以对应到不同的架构视图，不同的目标群体对应到的不同的架构视图的组合不同。&lt;/p&gt;
&lt;p&gt;到这里就和我们平常在到处看到的关于架构的视图、架构方法这些理论和实践关联起来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zhaoyang.me/img/15924697018373.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;以上是软件架构的架构图（出自李智慧老师）&lt;/p&gt;
&lt;h4 id=&#34;0x03-让架构成为重中之重&#34;&gt;0x03 让架构成为重中之重&lt;/h4&gt;
&lt;p&gt;大师&lt;code&gt;Martin Fowler&lt;/code&gt;在&lt;code&gt;OSCON 2015&lt;/code&gt;的演讲&lt;code&gt;Making Architecture Matter&lt;/code&gt;中提出了一个概念：设计耐力假说（&lt;code&gt;Design Stamina Hypothesis&lt;/code&gt;），大师指出要重视内部质量（&lt;code&gt;internal quality&lt;/code&gt;，内部质量就是指用户所看不到的系统部分），具体的原因他写在了他的另一篇文章中了。&lt;/p&gt;
&lt;p&gt;我个人对&lt;code&gt;Design Stamina Hypothesis&lt;/code&gt;的理解觉得应该更像是&lt;strong&gt;可持续化的设计&lt;/strong&gt;，因为设计本身自始至终就不会是一成不变的，设计应该随着需求的不断变化而作出相应的调整（也就是通常所说的重构），换句话说：每次上线时，系统的架构设计应当是符合当前需求所作出的最适合的设计。不断的保证这一点才能保证大师所说的&lt;code&gt;good design&lt;/code&gt;，也才能更好的配合&lt;code&gt;CI/CD&lt;/code&gt;，快速迭代。&lt;/p&gt;
&lt;h4 id=&#34;0x04-结尾&#34;&gt;0x04 结尾&lt;/h4&gt;
&lt;p&gt;以上是我个人查阅资源后，对什么是架构，以及为什么要有不同的架构视图，为什么是这几种视图这些问题的理解。&lt;/p&gt;
&lt;p&gt;这一篇似乎和读源码没什么关系，确实是的，但是我读源码的目的是想从一些优秀的框架中学习它们的架构设计思想的，所以有必要先理解到底什么是构架。&lt;/p&gt;
&lt;h5 id=&#34;references&#34;&gt;References&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_architecture&#34;&gt;Software Architecture&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://martinfowler.com/architecture/&#34;&gt;Software Architecture Guide&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DngAZyWMGR0&#34;&gt;Martin Fowler - Making Architecture Matter&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&#34;&gt;Design Stamina Hypothesis&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/architecture/">architecture</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>微信摇一摇摇奖设计</title>
                <link>https://zhaoyang.me/posts/wx-shake-design/</link>
                <guid isPermaLink="true">https://zhaoyang.me/posts/wx-shake-design/</guid>
                <pubDate>Sat, 19 Dec 2015 23:55:32 &#43;0800</pubDate>
                
                    <author>young.icetea@gmail.com (赵洋)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;公司最近策划了一场运营活动，利用微信的摇一摇周边功能，在每天的下午三点一刻，接收用户通过摇周边来摇奖。对于周排名和月排名第一的公司，免费赠送100杯冠名咖啡（冠公司名称，且帮冠名公司向这100个用户推广其公司的产品）&lt;/p&gt;
&lt;h3 id=&#34;需求&#34;&gt;需求&lt;/h3&gt;
&lt;p&gt;通过报名的方式来参与微信摇一摇摇奖活动，领取了带beacon的包菜仔的公司，在每天的15:15~15:30这段时间，打开蓝牙，通过微信的摇一摇周边功能来摇奖。&lt;/p&gt;
&lt;h3 id=&#34;规则&#34;&gt;规则&lt;/h3&gt;
&lt;p&gt;用户在摇的时候，微信会发送摇一摇的事件到微信公众号的后台，在接收到用户的摇一摇事件后，后台根据一定的规则来判断是否中奖，同一用户每天最多可中奖三次。&lt;/p&gt;
&lt;p&gt;用户在摇一摇的界面，摇到了配置的页面后，点击配置的链接进去，会看到自己是否中奖，奖品分为两大类：实物和虚拟物品，虚拟物品的好说，直接下发到用户的账户；对于实物奖品，还要生成订单，并推送到相应的店铺，出小票，店员看到订单后，制作出品并配送。&lt;/p&gt;
&lt;p&gt;在参加摇一摇的这些用户中，有一部分用户是未关注过我们的微信公众号的，对这部分用户，必须在进到页面来的时候生成用户信息，这一点没问题，之前的系统已经支持了。&lt;/p&gt;
&lt;h3 id=&#34;防作弊&#34;&gt;防作弊&lt;/h3&gt;
&lt;p&gt;有的用户不断的在刷那个页面，以为是那个页面通过刷新来参与抽奖的，实际则不然。摇一摇摇到的页面只是一个领取奖品的纯查询操作，而实际的抽奖逻辑是在后台接收到微信摇一摇事件的时候进行的。有点类似CQRS，摇到的页面只是读，和抽奖的逻辑（写）是分开的，所以用户除了摇，也没办法作弊。&lt;/p&gt;
&lt;h3 id=&#34;系统设计&#34;&gt;系统设计&lt;/h3&gt;
&lt;p&gt;所有的奖品有大约七种：四种是实物的，三种是虚拟的。虚拟的奖品如优惠券，要能够支持配置金额，所有的奖品都需要支持一些可配置项，如：奖品的份数，每种奖品每个人可以中多少次（每天中一次？永远只能中一次？系统需要支持这种配置策略），奖品的开放时间段（可以支持不同时间段做不同的活动）。&lt;/p&gt;
&lt;p&gt;除此以外，还需要记录用户的摇奖记录，每个参与的公司参与人数的排行榜，以及每家公司的中奖排行磅等等。&lt;/p&gt;
&lt;p&gt;以上是功能需求，在系统的角度，还需要考虑一些问题：15分钟的时候，用户不断的摇微信，会不断的有摇一摇事件发送到服务器，当用户量上来的时候，系统的可用性是个问题。&lt;/p&gt;
&lt;p&gt;所以在设计的时候，奖随机中奖的逻辑前置，记录完用户的摇一摇记录之后就进行随机校验，这样可以过滤掉很大一部分的请求往后面走，减轻服务器的压力；其次，把奖品、用户信息等不变的数据放入到缓存中，减少数据库的IO次数，这样一来，整个过程的平均响应时间基本上可以控制在200ms以内（这里发现了一个问题：测试环境在未加缓存的时候，平均响应时间已经不到200ms了，但是生产环境用了缓存平均响应时间却比测试环境长很多，我检查了两个环境下的所有配置，包括nigix和tomcat，完全一样，唯一有区别的地方就在于，测试环境的web服务器和数据库都在深圳区，生产环境的web服务器在深圳区，而数据库在杭州区，数据库的访问是通过内网地址访问，难道是这个原因导致？需要找机会确认）测试环境下使用了上述策略后，平均响应时间在100ms以内。&lt;/p&gt;
&lt;p&gt;另外，部分代码的优化也是必要的，例如解析摇一摇事件等等。其实优化的原则和数据库的优化思路类似：&lt;/p&gt;
&lt;p&gt;减少对象的创建次数，减少对数据库的访问次数，对于不变的数据使用缓存来存放，减少循环尤其是嵌套循环的次数，对整体的业务逻辑做梳理，尽量的把用户的请求靠前处理完成（这个就是快速失败的概念？），利用业务规则，不断的过滤掉请求，只有真正中奖的用户的请求才会走到流程的最后；对于没有依赖的数据，异步处理。&lt;/p&gt;
&lt;p&gt;再极限一点：将数据插入到数据库成功后，同步更新缓存，然后在读的一端直接去从缓存中读，这样又可以将性能进一步提升，但这种需要构建同步更新缓存的模型，复杂度也会上升，必要的时候才做。&lt;/p&gt;
&lt;h4 id=&#34;一致性的问题&#34;&gt;一致性的问题&lt;/h4&gt;
&lt;p&gt;如何保证总共10份奖品，不会被领取10份以上？一般可能会考虑利用事务。没错，事务是可以，事务会加大方法的执行时间，在这种业务场景下，流量量级上升的时候，直接影响着系统的响应能力，所以在这里，我没有采用事务的方式来处理，而是通过程序的设计来保证数据的一致性，而且，事实也证明，不使用事务，系统的响应能力也会提升很多。&lt;/p&gt;
&lt;p&gt;可能有人会有一个疑问：这样做，岂不是可能会出面某用户摇完之后，打开领奖页面的时候，本来已经中奖了，但打开的时候，因为数据还没写入，页面中会显示未中奖？确实有这个可能，但是，概率非常低，只是方法执行得够快就不会出现这个情况；再者，万一出现了也没关系，用户下一次摇完之后，打开页面的时候还是可以再领到自己中到的奖品，因为前面的规则定了每人每天最多可中奖三次，所以这个问题也不会成为问题。&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;代码的质量、规范、业务逻辑的组织（区分业务场景）等等，每一个环节对系统的性能都有一定的影响，不过早优化，但要任何时候要先思考再设计。&lt;/p&gt;
&lt;p&gt;拆分不只是数据层面，业务逻辑层面也一样；分离变的和不变的部分。&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/categories/startup/">startup</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/wechat/">wechat</category>
                                
                            
                                
                                
                                
                                    <category domain="https://zhaoyang.me/tags/architecture/">architecture</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
